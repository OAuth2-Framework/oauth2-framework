Escaped mutants:
================

Timeout mutants:
================


1) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:135    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.18c09bc903bbae31a3fb40fb4e926d5c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $expiresAt = \DateTimeImmutable::createFromFormat('U', (string) $json->payload->expires_at);
-        $resourceServerId = null !== $json->payload->resource_server_id ? ResourceServerId::create($json->payload->resource_server_id) : null;
+        $resourceServerId = null === $json->payload->resource_server_id ? ResourceServerId::create($json->payload->resource_server_id) : null;
         return new self($accessTokenId, $resourceOwnerId, $clientId, $parameters, $metadatas, $scopes, $expiresAt, $resourceServerId, $recordedOn, $eventId);
     }
     /**
      * @return AccessTokenId
      */
     public function getAccessTokenId() : AccessTokenId

Killed mutants:
===============

Errors mutants:
===============


1) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:51    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.77e974a76628f28cc25cfaeeb710b201.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createEmpty() : self
+    protected static function createEmpty() : self
     {
         return new self();
     }
     /**
      * {@inheritdoc}
      */


2) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:59    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bf1bb4a6f06bae77877bf98640611b8e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/model/authorization-code/1.0/schema';
     }
     /**
      * @param AuthorizationCodeId $authorizationCodeId
      * @param ClientId            $clientId


3) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:78    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9e0a5c6af3eec182f51fbd36eb9bd492.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function create(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId)
+    protected function create(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId)
     {
         $clone = clone $this;
         $clone->authorizationCodeId = $authorizationCodeId;
         $clone->clientId = $clientId;
         $clone->resourceOwnerId = $userAccountId;
         $clone->queryParameters = $queryParameters;


4) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:105    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.998d6f4852989a7bcece4195edca5549.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->authorizationCodeId) {
+        if (null !== $this->authorizationCodeId) {
             throw new \RuntimeException('Authorization code not initialized.');
         }
         return $this->authorizationCodeId;
     }
     /**
      * @return array


5) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:103    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b759f0d18e3af05af3544f3c7ecfb9b9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTokenId() : TokenId
+    protected function getTokenId() : TokenId
     {
         if (null === $this->authorizationCodeId) {
             throw new \RuntimeException('Authorization code not initialized.');
         }
         return $this->authorizationCodeId;
     }


6) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:115    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4dda7b8b64437f218bbfa2809367c601.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getQueryParameters() : array
+    protected function getQueryParameters() : array
     {
         return $this->queryParameters;
     }
     /**
      * @return bool
      */


7) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:123    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.86e9792b547cb99d7a0f42f73cf1d973.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isUsed() : bool
+    protected function isUsed() : bool
     {
         return $this->used;
     }
     /**
      * @return AuthorizationCode
      */


8) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:133    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.01b0867d6cf66e8f57a0a3a23e622254.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (true === $this->used) {
+        if (false === $this->used) {
             return $this;
         }
         $clone = clone $this;
         $clone->used = true;
         $event = AuthorizationCodeEvent\AuthorizationCodeMarkedAsUsedEvent::create($clone->getTokenId());
         $clone->record($event);


9) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:133    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7f7ddc9c28c7201eb9afd3f7288205e5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (true === $this->used) {
+        if (true !== $this->used) {
             return $this;
         }
         $clone = clone $this;
         $clone->used = true;
         $event = AuthorizationCodeEvent\AuthorizationCodeMarkedAsUsedEvent::create($clone->getTokenId());
         $clone->record($event);


10) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:137    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.299e0768952bfd53baac3c1c101fed5e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->used = true;
+        $clone->used = false;
         $event = AuthorizationCodeEvent\AuthorizationCodeMarkedAsUsedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;
     }
     /**
      * @return AuthorizationCode


11) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:131    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b46a1297c1eaed62ac2821bd9ac3a2b3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function markAsUsed() : self
+    protected function markAsUsed() : self
     {
         if (true === $this->used) {
             return $this;
         }
         $clone = clone $this;
         $clone->used = true;


12) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:150    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.61452d1db84644236be0ba619cb67ecd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         $event = AuthorizationCodeEvent\AuthorizationCodeRevokedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;
     }
     /**
      * @return array


13) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:147    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2554ac753c73665c3b558af27b0b33b1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function markAsRevoked() : self
+    protected function markAsRevoked() : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         $event = AuthorizationCodeEvent\AuthorizationCodeRevokedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;


14) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:160    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.138116bb5cc8197a9a259387f575f0c5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getQueryParams() : array
+    protected function getQueryParams() : array
     {
         return $this->queryParameters;
     }
     /**
      * @param string $key
      *


15) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:194    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4fed1ec62864333d48d87bed4034e984.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->authorizationCodeId) {
+        if (null !== $this->authorizationCodeId) {
             throw new \RuntimeException('Authorization code not initialized.');
         }
         return $this->redirectUri;
     }
     /**
      * @return array


16) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:192    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.202ea7e066804aca5422b098dc398bc8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRedirectUri() : string
+    protected function getRedirectUri() : string
     {
         if (null === $this->authorizationCodeId) {
             throw new \RuntimeException('Authorization code not initialized.');
         }
         return $this->redirectUri;
     }


17) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:219    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.612c5780c53ca86dc0c11537d9add439.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $redirectUri = $json->redirect_uri;
-        $resourceServerId = null !== $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
+        $resourceServerId = null === $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
         $used = $json->is_used;
         $expiresAt = \DateTimeImmutable::createFromFormat('U', (string) $json->expires_at);
         $clientId = ClientId::create($json->client_id);
         $parameters = DataBag::create((array) $json->parameters);
         $metadatas = DataBag::create((array) $json->metadatas);
         $scopes = (array) $json->scopes;


18) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:214    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.51d7b7fbaf61c49e037696204a54c03a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $authorizationCodeId = AuthorizationCodeId::create($json->auth_code_id);
         $queryParameters = (array) $json->query_parameters;
         $redirectUri = $json->redirect_uri;
         $resourceServerId = null !== $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
         $used = $json->is_used;


19) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:254    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5c4310c122c50ca98fb01f70174bb70e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        $data = parent::jsonSerialize() + ['auth_code_id' => $this->getTokenId()->getValue(), 'query_parameters' => (object) $this->getQueryParameters(), 'redirect_uri' => $this->getRedirectUri(), 'is_used' => $this->isUsed()];
+        $data = parent::jsonSerialize() - ['auth_code_id' => $this->getTokenId()->getValue(), 'query_parameters' => (object) $this->getQueryParameters(), 'redirect_uri' => $this->getRedirectUri(), 'is_used' => $this->isUsed()];
         return $data;
     }
     /**
      * @param Event $event
      *
      * @return AuthorizationCode


20) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:252    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6e2ba9b0ade7f07e82737515a814be48.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         $data = parent::jsonSerialize() + ['auth_code_id' => $this->getTokenId()->getValue(), 'query_parameters' => (object) $this->getQueryParameters(), 'redirect_uri' => $this->getRedirectUri(), 'is_used' => $this->isUsed()];
         return $data;
     }
     /**
      * @param Event $event


21) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:272    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f91f5ca148b1f831e6c7a8f4ba2b7b9e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $map = $this->getEventMap();
-        if (!array_key_exists($event->getType(), $map)) {
+        if (array_key_exists($event->getType(), $map)) {
             throw new \RuntimeException('Unsupported event.');
         }
         if (null !== $this->authorizationCodeId && $this->authorizationCodeId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \RuntimeException('Event not applicable for this authorization code.');
         }
         $method = $map[$event->getType()];


22) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:275    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6515a21986978b23bdd4a178ad31b35a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->authorizationCodeId && $this->authorizationCodeId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null === $this->authorizationCodeId && $this->authorizationCodeId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \RuntimeException('Event not applicable for this authorization code.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


23) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:275    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.79850020db6e91e7429fea64854b0170.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->authorizationCodeId && $this->authorizationCodeId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->authorizationCodeId && $this->authorizationCodeId->getValue() === $event->getDomainId()->getValue()) {
             throw new \RuntimeException('Event not applicable for this authorization code.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


24) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:275    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.272027cb9e7cb09f38c0a84ef84a9600.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->authorizationCodeId && $this->authorizationCodeId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->authorizationCodeId || $this->authorizationCodeId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \RuntimeException('Event not applicable for this authorization code.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


25) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:269    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8cd9e9d81b4917a4f267547e0ac12889.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function apply(Event $event) : self
+    protected function apply(Event $event) : self
     {
         $map = $this->getEventMap();
         if (!array_key_exists($event->getType(), $map)) {
             throw new \RuntimeException('Unsupported event.');
         }
         if (null !== $this->authorizationCodeId && $this->authorizationCodeId->getValue() !== $event->getDomainId()->getValue()) {


26) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:300    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6fdc87836a6a0daf90655945e234b443.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyAuthorizationCodeCreatedEvent(AuthorizationCodeEvent\AuthorizationCodeCreatedEvent $event) : self
+    private function applyAuthorizationCodeCreatedEvent(AuthorizationCodeEvent\AuthorizationCodeCreatedEvent $event) : self
     {
         $clone = clone $this;
         $clone->authorizationCodeId = $event->getAuthorizationCodeId();
         $clone->clientId = $event->getClientId();
         $clone->resourceOwnerId = $event->getUserAccountId();
         $clone->queryParameters = $event->getQueryParameters();


27) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:326    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.05d211dd0760e62af016aba528cef3ba.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->used = true;
+        $clone->used = false;
         return $clone;
     }
     /**
      * @param AuthorizationCodeEvent\AuthorizationCodeRevokedEvent $event
      *
      * @return AuthorizationCode


28) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:323    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9391e7fe41d0612a3e384cfbb6bed9f6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyAuthorizationCodeMarkedAsUsedEvent(AuthorizationCodeEvent\AuthorizationCodeMarkedAsUsedEvent $event) : self
+    private function applyAuthorizationCodeMarkedAsUsedEvent(AuthorizationCodeEvent\AuthorizationCodeMarkedAsUsedEvent $event) : self
     {
         $clone = clone $this;
         $clone->used = true;
         return $clone;
     }
     /**


29) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:339    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7db8f3e0076bc9ee0bce07e31e7ba27d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         return $clone;
     }
 }



30) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:336    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.95ec8d541b35e30e916c300eeb15d5cd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyAuthorizationCodeRevokedEvent(AuthorizationCodeEvent\AuthorizationCodeRevokedEvent $event) : self
+    private function applyAuthorizationCodeRevokedEvent(AuthorizationCodeEvent\AuthorizationCodeRevokedEvent $event) : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         return $clone;
     }
 }


31) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:50    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9825af5ac3685be30857a7c02269f5d4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAssociatedResponseTypes() : array
+    protected function getAssociatedResponseTypes() : array
     {
         return ['code'];
     }
     /**
      * {@inheritdoc}
      */


32) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:58    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8c38aa1dca8d46de22757106bcb14999.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getGrantType() : string
+    protected function getGrantType() : string
     {
         return 'authorization_code';
     }
     /**
      * {@inheritdoc}
      */


33) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:72    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.84f9ea515eb4bac3c797aba3895680c0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $diff = array_diff($requiredParameters, array_keys($parameters));
-        if (!empty($diff)) {
+        if (empty($diff)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('Missing grant type parameter(s): %s.', implode(', ', $diff)));
         }
     }
     /**
      * {@inheritdoc}
      */


34) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:66    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.89e19fe892327869d544bfe7f01b4a02.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkTokenRequest(ServerRequestInterface $request)
+    protected function checkTokenRequest(ServerRequestInterface $request)
     {
         $parameters = $request->getParsedBody() ?? [];
         $requiredParameters = ['code', 'redirect_uri'];
         $diff = array_diff($requiredParameters, array_keys($parameters));
         if (!empty($diff)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('Missing grant type parameter(s): %s.', implode(', ', $diff)));


35) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:85    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ed608d28458f20a1c71cb2cc4ddf5cac.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->getAuthorizationCode($parameters['code']);
-        if (true === $authorizationCode->isUsed() || true === $authorizationCode->isRevoked()) {
+        if (false === $authorizationCode->isUsed() || true === $authorizationCode->isRevoked()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code" is invalid.');
         }
         $grantTypeData = $grantTypeData->withAvailableScopes($authorizationCode->getScopes());
         return $grantTypeData;
     }
     /**


36) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:85    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.27ff160c4177062978120fd4413fbbaa.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->getAuthorizationCode($parameters['code']);
-        if (true === $authorizationCode->isUsed() || true === $authorizationCode->isRevoked()) {
+        if (true !== $authorizationCode->isUsed() || true === $authorizationCode->isRevoked()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code" is invalid.');
         }
         $grantTypeData = $grantTypeData->withAvailableScopes($authorizationCode->getScopes());
         return $grantTypeData;
     }
     /**


37) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:85    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c7a746197735ef9ef226b780085e755a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->getAuthorizationCode($parameters['code']);
-        if (true === $authorizationCode->isUsed() || true === $authorizationCode->isRevoked()) {
+        if (true === $authorizationCode->isUsed() || false === $authorizationCode->isRevoked()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code" is invalid.');
         }
         $grantTypeData = $grantTypeData->withAvailableScopes($authorizationCode->getScopes());
         return $grantTypeData;
     }
     /**


38) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:85    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.243f2741b4bb91d02f1c11b6405f4b82.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->getAuthorizationCode($parameters['code']);
-        if (true === $authorizationCode->isUsed() || true === $authorizationCode->isRevoked()) {
+        if (true === $authorizationCode->isUsed() || true !== $authorizationCode->isRevoked()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code" is invalid.');
         }
         $grantTypeData = $grantTypeData->withAvailableScopes($authorizationCode->getScopes());
         return $grantTypeData;
     }
     /**


39) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:85    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.31f9a015eda48b88fba8adf0934ebe89.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->getAuthorizationCode($parameters['code']);
-        if (true === $authorizationCode->isUsed() || true === $authorizationCode->isRevoked()) {
+        if (true === $authorizationCode->isUsed() && true === $authorizationCode->isRevoked()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code" is invalid.');
         }
         $grantTypeData = $grantTypeData->withAvailableScopes($authorizationCode->getScopes());
         return $grantTypeData;
     }
     /**


40) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:80    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b11fdb00f09da1899b0444ee71a8cd16.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         $parameters = $request->getParsedBody() ?? [];
         $authorizationCode = $this->getAuthorizationCode($parameters['code']);
         if (true === $authorizationCode->isUsed() || true === $authorizationCode->isRevoked()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code" is invalid.');
         }


41) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:96    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f813a32250890a1aa6da04f11e7107b5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         $parameters = $request->getParsedBody() ?? [];
         $authorizationCode = $this->getAuthorizationCode($parameters['code']);
         $this->checkClient($grantTypeData->getClient(), $parameters);
         $this->checkAuthorizationCode($authorizationCode, $grantTypeData->getClient());
         $this->checkPKCE($authorizationCode, $parameters);


42) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:130    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.66e2f70718852c0ac0d4726fbd641247.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->authorizationCodeRepository->find(AuthorizationCodeId::create($code));
-        if (!$authorizationCode instanceof AuthorizationCode) {
+        if ($authorizationCode instanceof AuthorizationCode) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Code does not exist or is invalid for the client.');
         }
         return $authorizationCode;
     }
     /**
      * @param Client $client


43) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:145    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.390bb24e5d3ef7d92ded7817067ac96b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (true === $client->isPublic()) {
+        if (false === $client->isPublic()) {
             if (!array_key_exists('client_id', $parameters) || $client->getPublicId()->getValue() !== $parameters['client_id']) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The "client_id" parameter is required for non-confidential clients.');
             }
         }
     }
     /**


44) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:145    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b1afea3384945f9da6c6c3437bdd11f5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (true === $client->isPublic()) {
+        if (true !== $client->isPublic()) {
             if (!array_key_exists('client_id', $parameters) || $client->getPublicId()->getValue() !== $parameters['client_id']) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The "client_id" parameter is required for non-confidential clients.');
             }
         }
     }
     /**


45) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:161    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6f1c6de48a92dbc8559c50093c2dc964.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $params = $authorizationCode->getQueryParams();
-        if (!array_key_exists('code_challenge', $params)) {
+        if (array_key_exists('code_challenge', $params)) {
             return;
         }
         $code_challenge = $params['code_challenge'];
         $code_challenge_method = array_key_exists('code_challenge_method', $params) ? $params['code_challenge_method'] : 'plain';
         try {
             if (!array_key_exists('code_verifier', $parameters)) {


46) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:169    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.32b7cd251c21db86c8f3822ed7a85f90.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         try {
-            if (!array_key_exists('code_verifier', $parameters)) {
+            if (array_key_exists('code_verifier', $parameters)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code_verifier" is missing or invalid.');
             }
             $code_verifier = $parameters['code_verifier'];
             $method = $this->pkceMethodManager->get($code_challenge_method);
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage());


47) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:178    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.20972d8be40686cabcb1efd7624e8338.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (false === $method->isChallengeVerified($code_verifier, $code_challenge)) {
+        if (true === $method->isChallengeVerified($code_verifier, $code_challenge)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code_verifier" is invalid or invalid.');
         }
     }
     /**
      * @param AuthorizationCode $authorizationCode
      * @param string            $redirectUri


48) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:178    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f2b4a61d4a5d96fa6780e535dd1cfb1a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (false === $method->isChallengeVerified($code_verifier, $code_challenge)) {
+        if (false !== $method->isChallengeVerified($code_verifier, $code_challenge)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "code_verifier" is invalid or invalid.');
         }
     }
     /**
      * @param AuthorizationCode $authorizationCode
      * @param string            $redirectUri


49) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:191    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e83281e15096e37c23f44a300ded36b5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($redirectUri !== $authorizationCode->getRedirectUri()) {
+        if ($redirectUri === $authorizationCode->getRedirectUri()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "redirect_uri" is invalid.');
         }
     }
     /**
      * @param AuthorizationCode $authorizationCode
      * @param Client            $client


50) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:204    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.23a454b5d188d2bdbfa022bb4e689c3f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($client->getPublicId()->getValue() !== $authorizationCode->getClientId()->getValue()) {
+        if ($client->getPublicId()->getValue() === $authorizationCode->getClientId()->getValue()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Code does not exist or is invalid for the client.');
         }
         if ($authorizationCode->hasExpired()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The authorization code has expired.');
         }
     }


51) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeId.php:25    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.53c19ec78d587ec47b54e7b01e865844.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



52) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:64    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.30279bfc1b5d526b7c1ec91038e28e60.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAssociatedGrantTypes() : array
+    protected function getAssociatedGrantTypes() : array
     {
         return ['authorization_code'];
     }
     /**
      * {@inheritdoc}
      */


53) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:72    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.679fcc639e67ab2c58d69a79e632ab5c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResponseType() : string
+    protected function getResponseType() : string
     {
         return 'code';
     }
     /**
      * {@inheritdoc}
      */


54) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:80    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.14c5e6f1472c553fa67f54e761480a7d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResponseMode() : string
+    protected function getResponseMode() : string
     {
         return self::RESPONSE_TYPE_MODE_QUERY;
     }
     /**
      * {@inheritdoc}
      */


55) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:92    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.99ee27b0522615558cc04c6eeaf9e2af.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $queryParams = $authorization->getQueryParams();
-        if (!array_key_exists('code_challenge', $queryParams)) {
+        if (array_key_exists('code_challenge', $queryParams)) {
             if (true === $this->pkceForPublicClientsEnforced && $authorization->getClient()->isPublic()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Non-confidential clients must set a proof key (PKCE) for code exchange.');
             }
         } else {
             $codeChallengeMethod = array_key_exists('code_challenge_method', $queryParams) ? $queryParams['code_challenge_method'] : 'plain';
             if (!$this->pkceMethodManager->has($codeChallengeMethod)) {


56) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:98    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c05fe90a8574203f1a895e5bc523b051.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $codeChallengeMethod = array_key_exists('code_challenge_method', $queryParams) ? $queryParams['code_challenge_method'] : 'plain';
-            if (!$this->pkceMethodManager->has($codeChallengeMethod)) {
+            if ($this->pkceMethodManager->has($codeChallengeMethod)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('The challenge method "%s" is not supported.', $codeChallengeMethod));
             }
         }
         $authorizationCode = AuthorizationCode::createEmpty();
         $authorizationCode = $authorizationCode->create(AuthorizationCodeId::create(Base64Url::encode(random_bytes(64))), $authorization->getClient()->getPublicId(), $authorization->getUserAccount()->getPublicId(), $queryParams, $authorization->getRedirectUri(), (new \DateTimeImmutable())->setTimestamp(time() + $this->authorizationCodeLifetime), DataBag::create([]), DataBag::create([]), $authorization->getScopes(), $authorization->getResourceServer() ? $authorization->getResourceServer()->getResourceServerId() : null);
         $this->authorizationCodeRepository->save($authorizationCode);


57) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:110    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2ff834c49430052c3579dd6393863112.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = AuthorizationCode::createEmpty();
-        $authorizationCode = $authorizationCode->create(AuthorizationCodeId::create(Base64Url::encode(random_bytes(64))), $authorization->getClient()->getPublicId(), $authorization->getUserAccount()->getPublicId(), $queryParams, $authorization->getRedirectUri(), (new \DateTimeImmutable())->setTimestamp(time() + $this->authorizationCodeLifetime), DataBag::create([]), DataBag::create([]), $authorization->getScopes(), $authorization->getResourceServer() ? $authorization->getResourceServer()->getResourceServerId() : null);
+        $authorizationCode = $authorizationCode->create(AuthorizationCodeId::create(Base64Url::encode(random_bytes(64))), $authorization->getClient()->getPublicId(), $authorization->getUserAccount()->getPublicId(), $queryParams, $authorization->getRedirectUri(), (new \DateTimeImmutable())->setTimestamp(time() - $this->authorizationCodeLifetime), DataBag::create([]), DataBag::create([]), $authorization->getScopes(), $authorization->getResourceServer() ? $authorization->getResourceServer()->getResourceServerId() : null);
         $this->authorizationCodeRepository->save($authorizationCode);
         $authorization = $authorization->withResponseParameter('code', $authorizationCode->getTokenId()->getValue());
         return $next($authorization);
     }
 }



58) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:88    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5912a0c9fa2f7e0ffbe759db9e837b4e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         $queryParams = $authorization->getQueryParams();
         if (!array_key_exists('code_challenge', $queryParams)) {
             if (true === $this->pkceForPublicClientsEnforced && $authorization->getClient()->isPublic()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Non-confidential clients must set a proof key (PKCE) for code exchange.');
             }


59) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2b52a87190f987b1e020243fe744ff78.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function hint() : string
+    protected function hint() : string
     {
         return 'auth_code';
     }
     /**
      * {@inheritdoc}
      */


60) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bd715c6dfaf19761863175ca6021d8ac.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function find(string $token) : ?Token
+    protected function find(string $token) : ?Token
     {
         $id = AuthorizationCodeId::create($token);
         return $this->authorizationCodeRepository->find($id);
     }
     /**
      * {@inheritdoc}


61) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:60    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7a2d4eccbeed846ce2c30a5be6f07c61.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AuthorizationCode) {
+        if ($token instanceof AuthorizationCode) {
             throw new \InvalidArgumentException('The token is not a valid authorization code.');
         }
         if ($token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();


62) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:58    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ba5be44fad8a425abc0d0dd051369b43.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function revoke(Token $token)
+    protected function revoke(Token $token)
     {
         if (!$token instanceof AuthorizationCode) {
             throw new \InvalidArgumentException('The token is not a valid authorization code.');
         }
         if ($token->isRevoked()) {
             return;


63) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:76    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.adce92bd35a1faa5aceec259eaa0ef8d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AuthorizationCode) {
+        if ($token instanceof AuthorizationCode) {
             throw new \InvalidArgumentException('The token is not a valid authorization code.');
         }
         if ($token->isRevoked()) {
             return ['active' => false];
         }
         $result = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];


64) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:86    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.95958b62381120d31fa5f722ec84ee74.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        $result = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
+        $result = ['active' => $token->hasExpired(), 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
         if (!empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }
         return $result;
     }
 }


65) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:91    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.251eee74212fa4071a91487c46e4d308.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $result = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
-        if (!empty($token->getScopes())) {
+        if (empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }
         return $result;
     }
 }



66) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:74    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e63f763bd937b5ddd96e7979680be47e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function introspect(Token $token) : array
+    protected function introspect(Token $token) : array
     {
         if (!$token instanceof AuthorizationCode) {
             throw new \InvalidArgumentException('The token is not a valid authorization code.');
         }
         if ($token->isRevoked()) {
             return ['active' => false];


67) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:88    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d07169bdcf9159c936a8accf63fa094d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId)
+    private function __construct(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId)
     {
         $this->authorizationCodeId = $authorizationCodeId;
         $this->clientId = $clientId;
         $this->userAccountId = $userAccountId;
         $this->queryParameters = $queryParameters;
         $this->redirectUri = $redirectUri;


68) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:116    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b388528fa6883137cbfc30b3c266cdf1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId) : self
+    protected static function create(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId) : self
     {
         return new self($authorizationCodeId, $clientId, $userAccountId, $queryParameters, $redirectUri, $expiresAt, $parameters, $metadatas, $scopes, $resourceServerId);
     }
     /**
      * @return ClientId
      */


69) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:124    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.88e93df33615391ec1c2fa521a77d909.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return UserAccountId
      */


70) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:132    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1467e8500e93096c020a9d938be9502c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return array
      */


71) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:140    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.02a9cda2e0b0a695c9cc0ee15d684670.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getQueryParameters() : array
+    protected function getQueryParameters() : array
     {
         return $this->queryParameters;
     }
     /**
      * @return string
      */


72) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:148    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d225d759028337197e7e2bb01cd57651.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRedirectUri() : string
+    protected function getRedirectUri() : string
     {
         return $this->redirectUri;
     }
     /**
      * @return DataBag
      */


73) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:156    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fa96d2588827e9ab5e06cb85bc553bcc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @return DataBag
      */


74) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:164    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.12e69a1536edbd1ef1722b10072c2807.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getMetadatas() : DataBag
+    protected function getMetadatas() : DataBag
     {
         return $this->metadatas;
     }
     /**
      * @return array
      */


75) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:172    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9867ababd319834105124b1fa5fafcf1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return null|ResourceServerId
      */


76) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:180    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5a53c891c22ac630950ef14674efa7bd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
     /**
      * @return AuthorizationCodeId
      */


77) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:188    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.43c9aea183c214c90c44a1c78dc8bab6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAuthorizationCodeId() : AuthorizationCodeId
+    protected function getAuthorizationCodeId() : AuthorizationCodeId
     {
         return $this->authorizationCodeId;
     }
     /**
      * @return \DateTimeImmutable
      */


78) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommand.php:196    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fc5fd861b4ee817da2f6ee1e43ca1358.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : \DateTimeImmutable
+    protected function getExpiresAt() : \DateTimeImmutable
     {
         return $this->expiresAt;
     }
 }



79) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommandHandler.php:42    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5ab30d174b7aea3d5b7b58ba547edca3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->authorizationCodeRepository->find($command->getAuthorizationCodeId());
-        if (null !== $authorizationCode) {
+        if (null === $authorizationCode) {
             throw new \InvalidArgumentException(sprintf('The authorization code with ID "%s" already exists.', $command->getAuthorizationCodeId()->getValue()));
         }
         $authorizationCode = AuthorizationCode::createEmpty();
         $authorizationCode = $authorizationCode->create($command->getAuthorizationCodeId(), $command->getClientId(), $command->getUserAccountId(), $command->getQueryParameters(), $command->getRedirectUri(), $command->getExpiresAt(), $command->getParameters(), $command->getMetadatas(), $command->getScopes(), $command->getResourceServerId());
         $this->authorizationCodeRepository->save($authorizationCode);
     }


80) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/CreateAuthorizationCodeCommandHandler.php:39    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2e75c127ed6d48e28265d1d79789bb26.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(CreateAuthorizationCodeCommand $command)
+    protected function handle(CreateAuthorizationCodeCommand $command)
     {
         $authorizationCode = $this->authorizationCodeRepository->find($command->getAuthorizationCodeId());
         if (null !== $authorizationCode) {
             throw new \InvalidArgumentException(sprintf('The authorization code with ID "%s" already exists.', $command->getAuthorizationCodeId()->getValue()));
         }
         $authorizationCode = AuthorizationCode::createEmpty();


81) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/MarkAuthorizationCodeAsUsedCommand.php:30    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f3b2c237b7adc39d2e9a81362f184451.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AuthorizationCodeId $authorizationCodeId)
+    private function __construct(AuthorizationCodeId $authorizationCodeId)
     {
         $this->authorizationCodeId = $authorizationCodeId;
     }
     /**
      * @param AuthorizationCodeId $authorizationCodeId
      *


82) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/MarkAuthorizationCodeAsUsedCommand.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.65a03560463a51e81e6debe08e22882a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AuthorizationCodeId $authorizationCodeId) : self
+    protected static function create(AuthorizationCodeId $authorizationCodeId) : self
     {
         return new self($authorizationCodeId);
     }
     /**
      * @return AuthorizationCodeId
      */


83) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/MarkAuthorizationCodeAsUsedCommand.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4f5215908f87bc89e6bd119a94cbb686.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAuthorizationCodeId() : AuthorizationCodeId
+    protected function getAuthorizationCodeId() : AuthorizationCodeId
     {
         return $this->authorizationCodeId;
     }
 }



84) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/MarkAuthorizationCodeAsUsedCommandHandler.php:42    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b1f94007bc9d2379dc544f8084a1e17c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->authorizationCodeRepository->find($authorizationCodeId);
-        if (null === $authorizationCode) {
+        if (null !== $authorizationCode) {
             throw new \InvalidArgumentException(sprintf('Unable to find the authorization code with ID "%s".', $command->getAuthorizationCodeId()->getValue()));
         }
         $authorizationCode = $authorizationCode->markAsUsed();
         $this->authorizationCodeRepository->save($authorizationCode);
     }
 }


85) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/MarkAuthorizationCodeAsUsedCommandHandler.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.070db93c3c5328592b89250ad01959c2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(MarkAuthorizationCodeAsUsedCommand $command)
+    protected function handle(MarkAuthorizationCodeAsUsedCommand $command)
     {
         $authorizationCodeId = $command->getAuthorizationCodeId();
         $authorizationCode = $this->authorizationCodeRepository->find($authorizationCodeId);
         if (null === $authorizationCode) {
             throw new \InvalidArgumentException(sprintf('Unable to find the authorization code with ID "%s".', $command->getAuthorizationCodeId()->getValue()));
         }


86) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/RevokeAuthorizationCodeCommand.php:30    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b8c8b9593cf1f2cfc057d4327d0768b1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AuthorizationCodeId $authorizationCodeId)
+    private function __construct(AuthorizationCodeId $authorizationCodeId)
     {
         $this->authorizationCodeId = $authorizationCodeId;
     }
     /**
      * @param AuthorizationCodeId $authorizationCodeId
      *


87) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/RevokeAuthorizationCodeCommand.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0549975f7907725d239ceed80a8f4410.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AuthorizationCodeId $authorizationCodeId) : self
+    protected static function create(AuthorizationCodeId $authorizationCodeId) : self
     {
         return new self($authorizationCodeId);
     }
     /**
      * @return AuthorizationCodeId
      */


88) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/RevokeAuthorizationCodeCommand.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c44d150495e41c9a24bf75e56369c1e1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAuthorizationCodeId() : AuthorizationCodeId
+    protected function getAuthorizationCodeId() : AuthorizationCodeId
     {
         return $this->authorizationCodeId;
     }
 }



89) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/RevokeAuthorizationCodeCommandHandler.php:42    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.21446f30ec2e408bbe8da5e426cb18ac.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorizationCode = $this->authorizationCodeRepository->find($authorizationCodeId);
-        if (null === $authorizationCode) {
+        if (null !== $authorizationCode) {
             throw new \InvalidArgumentException(sprintf('Unable to find the authorization code with ID "%s".', $command->getAuthorizationCodeId()->getValue()));
         }
         $authorizationCode = $authorizationCode->markAsRevoked();
         $this->authorizationCodeRepository->save($authorizationCode);
     }
 }


90) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Command/RevokeAuthorizationCodeCommandHandler.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.33d176cf11be7a4399202158eb3c8dfe.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(RevokeAuthorizationCodeCommand $command)
+    protected function handle(RevokeAuthorizationCodeCommand $command)
     {
         $authorizationCodeId = $command->getAuthorizationCodeId();
         $authorizationCode = $this->authorizationCodeRepository->find($authorizationCodeId);
         if (null === $authorizationCode) {
             throw new \InvalidArgumentException(sprintf('Unable to find the authorization code with ID "%s".', $command->getAuthorizationCodeId()->getValue()));
         }


91) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:94    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b2f8a6eee5f745ae1a5955cb6f0c1cf8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->authorizationCodeId = $authorizationCodeId;
         $this->userAccountId = $userAccountId;
         $this->clientId = $clientId;
         $this->expiresAt = $expiresAt;


92) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:131    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2247384db5e997fa0a6681f1d1250932.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId) : self
+    protected static function create(AuthorizationCodeId $authorizationCodeId, ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId) : self
     {
         return new self($authorizationCodeId, $clientId, $userAccountId, $queryParameters, $redirectUri, $expiresAt, $parameters, $metadatas, $scopes, $resourceServerId, null, null);
     }
     /**
      * @return AuthorizationCodeId
      */


93) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:139    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.26a951726e41eb3fe1545ad439b4cce1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAuthorizationCodeId() : AuthorizationCodeId
+    protected function getAuthorizationCodeId() : AuthorizationCodeId
     {
         return $this->authorizationCodeId;
     }
     /**
      * @return \DateTimeImmutable
      */


94) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:147    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.77849e6cbf357d6e335dbc78e7e184b3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : \DateTimeImmutable
+    protected function getExpiresAt() : \DateTimeImmutable
     {
         return $this->expiresAt;
     }
     /**
      * @return UserAccountId
      */


95) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:155    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4bf6f1cbd5f0ea2ddfb7ad988a0392e9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return ClientId
      */


96) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:163    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cbeca1de61c3c586e2e74ba9aaa77bc1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return DataBag
      */


97) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:171    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.41c4c1f393cdf5141dff33b20ca50696.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @return DataBag
      */


98) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:179    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.482731f0919738c2c67a6d3e37fcbf22.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getMetadatas() : DataBag
+    protected function getMetadatas() : DataBag
     {
         return $this->metadatas;
     }
     /**
      * @return \string[]
      */


99) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:187    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bc5e0895f2ddd569875aed47f64e984a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return array
      */


100) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:195    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.00b7c7aae21eba22956d8357d95608f8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getQueryParameters() : array
+    protected function getQueryParameters() : array
     {
         return $this->queryParameters;
     }
     /**
      * @return string
      */


101) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:203    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.162f7bd5f7d9bbe0e3f116d3d40913e5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRedirectUri() : string
+    protected function getRedirectUri() : string
     {
         return $this->redirectUri;
     }
     /**
      * @return ResourceServerId|null
      */


102) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:211    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b0f76fbf085b943374a8280a6bb2782f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
     /**
      * {@inheritdoc}
      */


103) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:258    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d5a334329027673e8405729bc94bcc46.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $queryParameters = (array) $json->payload->query_parameters;
-        $resourceServerId = null !== $json->payload->resource_server_id ? ResourceServerId::create($json->payload->resource_server_id) : null;
+        $resourceServerId = null === $json->payload->resource_server_id ? ResourceServerId::create($json->payload->resource_server_id) : null;
         return new self($authorizationCodeId, $clientId, $userAccountId, $queryParameters, $redirectUri, $expiresAt, $parameters, $metadatas, $scopes, $resourceServerId, $recordedOn, $eventId);
     }
 }



104) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:245    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9693f948c16b9717c416342ef2a2fcea.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $authorizationCodeId = AuthorizationCodeId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $userAccountId = UserAccountId::create($json->payload->user_account_id);
         $clientId = ClientId::create($json->payload->client_id);


105) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeMarkedAsUsedEvent.php:36    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c5631b9e245bd27bbc4d7da58a84d5e8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AuthorizationCodeId $authorizationCodeId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(AuthorizationCodeId $authorizationCodeId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->authorizationCodeId = $authorizationCodeId;
     }
     /**
      * {@inheritdoc}


106) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeMarkedAsUsedEvent.php:55    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4f7fde602786cad7968b942c4bf3902c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AuthorizationCodeId $authorizationCodeId) : self
+    protected static function create(AuthorizationCodeId $authorizationCodeId) : self
     {
         return new self($authorizationCodeId, null, null);
     }
     /**
      * @return AuthorizationCodeId
      */


107) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeMarkedAsUsedEvent.php:63    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.55c59ae8506a4372a9dcb0eb9818fe86.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAuthorizationCodeId() : AuthorizationCodeId
+    protected function getAuthorizationCodeId() : AuthorizationCodeId
     {
         return $this->authorizationCodeId;
     }
     /**
      * {@inheritdoc}
      */


108) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeMarkedAsUsedEvent.php:71    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9d389bee672eeebe52152cd23feeebf8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getAuthorizationCodeId();
     }
     /**
      * {@inheritdoc}
      */


109) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeMarkedAsUsedEvent.php:86    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.74f2e6ed931dcc944a21269c147424ab.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $authorizationCodeId = AuthorizationCodeId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         return new self($authorizationCodeId, $recordedOn, $eventId);
     }


110) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeRevokedEvent.php:36    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5b37b7bbc798cecd819fe7cd43966239.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AuthorizationCodeId $authorizationCodeId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(AuthorizationCodeId $authorizationCodeId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->authorizationCodeId = $authorizationCodeId;
     }
     /**
      * {@inheritdoc}


111) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeRevokedEvent.php:55    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9338355b950c659ebaf80b6ed5464a02.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AuthorizationCodeId $authorizationCodeId) : self
+    protected static function create(AuthorizationCodeId $authorizationCodeId) : self
     {
         return new self($authorizationCodeId, null, null);
     }
     /**
      * @return AuthorizationCodeId
      */


112) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeRevokedEvent.php:63    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.00b9e1d5cde6caddf76861e4594a2490.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAuthorizationCodeId() : AuthorizationCodeId
+    protected function getAuthorizationCodeId() : AuthorizationCodeId
     {
         return $this->authorizationCodeId;
     }
     /**
      * {@inheritdoc}
      */


113) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeRevokedEvent.php:71    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.87ce35fd1f244e8ca896dcb512a168df.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getAuthorizationCodeId();
     }
     /**
      * {@inheritdoc}
      */


114) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeRevokedEvent.php:86    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8f00245510eef482a634f4e222300b98.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $authorizationCodeId = AuthorizationCodeId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         return new self($authorizationCodeId, $recordedOn, $eventId);
     }


115) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/PKCEMethodManager.php:28    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6856fc3428f571a1bdf939f9e4f8f901.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(PKCEMethod $method) : self
+    protected function add(PKCEMethod $method) : self
     {
         $this->pkceMethods[$method->name()] = $method;
         return $this;
     }
     /**
      * @param string $method


116) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/PKCEMethodManager.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.46cca3ef88ce59211ce90817a33c854d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function has(string $method) : bool
+    protected function has(string $method) : bool
     {
         return array_key_exists($method, $this->pkceMethods);
     }
     /**
      * @param string $method
      *


117) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/PKCEMethodManager.php:52    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.19065a2c266d906cb38bbfdff1d476d5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function get(string $method) : PKCEMethod
+    protected function get(string $method) : PKCEMethod
     {
         return $this->pkceMethods[$method];
     }
     /**
      * @return string[]
      */


118) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/PKCEMethodManager.php:60    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1ae6fddf37407729c5ce8cca08ff8896.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function names() : array
+    protected function names() : array
     {
         return array_keys($this->pkceMethods);
     }
 }



119) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/Plain.php:21    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.011bd713a0506c359ff9b89f401767fc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return 'plain';
     }
     /**
      * {@inheritdoc}
      */


120) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/Plain.php:29    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.788649b79e0d49bffa34e589fb89d67a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isChallengeVerified(string $codeVerifier, string $codeChallenge) : bool
+    protected function isChallengeVerified(string $codeVerifier, string $codeChallenge) : bool
     {
         return hash_equals($codeChallenge, $codeVerifier);
     }
 }



121) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/S256.php:23    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7f3486fcca01ba64a01542716c742bee.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return 'S256';
     }
     /**
      * {@inheritdoc}
      */


122) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/S256.php:33    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.adecdcfcd8547a8d76e0cb41dcbdb8d3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        return hash_equals($codeChallenge, Base64Url::encode(hash('sha256', $codeVerifier, true)));
+        return hash_equals($codeChallenge, Base64Url::encode(hash('sha256', $codeVerifier, false)));
     }
 }



123) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/PKCEMethod/S256.php:31    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.695fc22e2c2d8fe0e75126ffa6aaa6f3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isChallengeVerified(string $codeVerifier, string $codeChallenge) : bool
+    protected function isChallengeVerified(string $codeVerifier, string $codeChallenge) : bool
     {
         return hash_equals($codeChallenge, Base64Url::encode(hash('sha256', $codeVerifier, true)));
     }
 }



124) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:117    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9375307c24f33d8c78ea2b0cf5d49f31.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(Client $client, array $queryParameters) : self
+    protected static function create(Client $client, array $queryParameters) : self
     {
         return new self($client, $queryParameters);
     }
     /**
      * @return array
      */


125) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:125    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7feb855b02cd65dc57057aff4fd39a40.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getQueryParams() : array
+    protected function getQueryParams() : array
     {
         return $this->queryParameters;
     }
     /**
      * @param string $param
      *


126) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:157    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4959d7fdf0879d63d28b35afc273f659.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClient() : Client
+    protected function getClient() : Client
     {
         return $this->client;
     }
     /**
      * @param TokenType $tokenType
      *


127) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:167    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7891fb0a2ad32f30368350c851c51290.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withTokenType(TokenType $tokenType) : self
+    protected function withTokenType(TokenType $tokenType) : self
     {
         $clone = clone $this;
         $clone->tokenType = $tokenType;
         return $clone;
     }
     /**


128) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:178    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6bbbf2b782e2fd291bf4339de1f27481.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTokenType() : ?TokenType
+    protected function getTokenType() : ?TokenType
     {
         return $this->tokenType;
     }
     /**
      * @param ResponseType[] $responseTypes
      *


129) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:230    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f3a7f5dbca46154dd07d64f059d7a088.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withRedirectUri(string $redirectUri) : self
+    protected function withRedirectUri(string $redirectUri) : self
     {
         $clone = clone $this;
         $clone->redirectUri = $redirectUri;
         return $clone;
     }
     /**


130) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:241    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.eb9a51cc1a2efcffc10c5b8ab3870ed9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRedirectUri() : ?string
+    protected function getRedirectUri() : ?string
     {
         return $this->redirectUri;
     }
     /**
      * @param UserAccount $userAccount
      * @param bool        $isFullyAuthenticated


131) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:252    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0abf3f54c084a76637b1746386855b81.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withUserAccount(UserAccount $userAccount, bool $isFullyAuthenticated) : self
+    protected function withUserAccount(UserAccount $userAccount, bool $isFullyAuthenticated) : self
     {
         $clone = clone $this;
         $clone->userAccount = $userAccount;
         $clone->userAccountFullyAuthenticated = $isFullyAuthenticated;
         return $clone;
     }


132) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:264    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.acc104a1ddb3a84550212a7661acc100.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getUserAccount() : ?UserAccount
+    protected function getUserAccount() : ?UserAccount
     {
         return $this->userAccount;
     }
     /**
      * @param string $responseParameter
      * @param mixed  $value


133) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:275    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.eacf0971ef7e81d3f46b1b8a16a64e72.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withResponseParameter(string $responseParameter, $value) : self
+    protected function withResponseParameter(string $responseParameter, $value) : self
     {
         $clone = clone $this;
         $clone->responseParameters[$responseParameter] = $value;
         return $clone;
     }
     /**


134) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:286    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.03a9c7b13c9317db4a744eed045e6eda.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResponseParameters() : array
+    protected function getResponseParameters() : array
     {
         return $this->responseParameters;
     }
     /**
      * @param string $param
      *


135) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:298    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4cd67eb30bb3f2d8c66576be8312876f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->hasResponseParameter($param)) {
+        if ($this->hasResponseParameter($param)) {
             throw new \InvalidArgumentException(sprintf('Invalid response parameter "%s".', $param));
         }
         return $this->getResponseParameters()[$param];
     }
     /**
      * @param string $param


136) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:296    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c1153e0098573b5fa12fe557685ef17b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResponseParameter(string $param)
+    protected function getResponseParameter(string $param)
     {
         if (!$this->hasResponseParameter($param)) {
             throw new \InvalidArgumentException(sprintf('Invalid response parameter "%s".', $param));
         }
         return $this->getResponseParameters()[$param];
     }


137) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:310    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.51c69deeafb616c11c29d7cf5a74b0b2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function hasResponseParameter(string $param) : bool
+    protected function hasResponseParameter(string $param) : bool
     {
         return array_key_exists($param, $this->getResponseParameters());
     }
     /**
      * @param string $responseHeader
      * @param mixed  $value


138) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:399    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.801def90b7abbb7a2386477ff28917b4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @param string $scope
      *


139) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:517    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.81ef33d8f84a729e0acb2b719558ab4a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceServer() : ?ResourceServer
+    protected function getResourceServer() : ?ResourceServer
     {
         return $this->resourceServer;
     }
     /**
      * @param ResourceServer $resourceServer
      *


140) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:28    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.89d19a498fc1bb3f53bb1ed473864190.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(ResponseType $responseType) : self
+    protected function add(ResponseType $responseType) : self
     {
         $this->responseTypes[$responseType->getResponseType()] = $responseType;
         return $this;
     }
     /**
      * @param string $name


141) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:54    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bad7d7c10db8d7ed1a0ca3257f6d1a5e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->isSupported($names)) {
+        if ($this->isSupported($names)) {
             throw new \InvalidArgumentException(sprintf('The response type "%s" is not supported.', $names));
         }
         $responseTypes = explode(' ', $names);
         $types = [];
         foreach ($responseTypes as $responseType) {
             $type = $this->responseTypes[$responseType];


142) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:60    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bf783e784cec307436956ae90cb84ff5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $types = [];
-        foreach ($responseTypes as $responseType) {
+        foreach (array() as $responseType) {
             $type = $this->responseTypes[$responseType];
             $types[] = $type;
         }
         return $types;
     }
     /**


143) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:52    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6fdf5ee41e47d58f286fd5f0d1e50857.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function find(string $names) : array
+    protected function find(string $names) : array
     {
         if (!$this->isSupported($names)) {
             throw new \InvalidArgumentException(sprintf('The response type "%s" is not supported.', $names));
         }
         $responseTypes = explode(' ', $names);
         $types = [];


144) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:81    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e67a5ed4d031e4137c3e55678218615d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (in_array('code', $types) && in_array('token', $types)) {
+            if (in_array('code', $types) || in_array('token', $types)) {
                 $types[] = 'code id_token token';
             }
         }
         if (in_array('code', $types) && in_array('token', $types)) {
             $types[] = 'code token';
         }


145) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:85    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.70ad91f43464fb0bb4cab635f7a8cb2a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (in_array('code', $types) && in_array('token', $types)) {
+        if (in_array('code', $types) || in_array('token', $types)) {
             $types[] = 'code token';
         }
         return $types;
     }
     /**
      * @param string $responseType


146) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:71    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d095829e3b08b37e406eb542e5c585f7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         $types = array_keys($this->responseTypes);
         if (in_array('id_token', $types)) {
             if (in_array('code', $types)) {
                 $types[] = 'code id_token';
             }


147) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:97    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.687e02b7bcecdff87739ad18817f3525.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isSupported(string $responseType) : bool
+    protected function isSupported(string $responseType) : bool
     {
         return in_array($responseType, $this->all());
     }
 }



148) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:61    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d14be1ee82ae628ebca8fd6fd0fd66db.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isTokenFromAuthorizationHeaderAllowed() : bool
+    protected function isTokenFromAuthorizationHeaderAllowed() : bool
     {
         return $this->tokenFromAuthorizationHeaderAllowed;
     }
     /**
      * @return bool
      */


149) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:69    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6b3fb2234b19a65ec7a1a68a04634348.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isTokenFromRequestBodyAllowed() : bool
+    protected function isTokenFromRequestBodyAllowed() : bool
     {
         return $this->tokenFromRequestBodyAllowed;
     }
     /**
      * @return bool
      */


150) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:77    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2348a2b5a70116e0d12e8c67116322b8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isTokenFromQueryStringAllowed() : bool
+    protected function isTokenFromQueryStringAllowed() : bool
     {
         return $this->tokenFromQueryStringAllowed;
     }
     /**
      * {@inheritdoc}
      */


151) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:85    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b2e166a18af4b5bd0dfcddf1004c99ed.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return 'Bearer';
     }
     /**
      * {@inheritdoc}
      */


152) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:93    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.480c9c8507ecc15ab0a07d50466be9a0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScheme() : string
+    protected function getScheme() : string
     {
         return sprintf('%s realm="%s"', $this->name(), $this->realm);
     }
     /**
      * {@inheritdoc}
      */


153) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:101    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.73f8be111beda21d96ee8ea0ddb3778d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getInformation() : array
+    protected function getInformation() : array
     {
         return ['token_type' => $this->name()];
     }
     /**
      * {@inheritdoc}
      */


154) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:120    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4ab958a3278ebf458ff53914e92659b7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($methods as $test => $method) {
-            if (true === $this->{$test}() && null !== ($token = $this->{$method}($request))) {
+            if (false === $this->{$test}() && null !== ($token = $this->{$method}($request))) {
                 return $token;
             }
         }
         return null;
     }
     /**


155) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:120    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.286e682cf1a02ec2d4971c8ffe3888e5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($methods as $test => $method) {
-            if (true === $this->{$test}() && null !== ($token = $this->{$method}($request))) {
+            if (true !== $this->{$test}() && null !== ($token = $this->{$method}($request))) {
                 return $token;
             }
         }
         return null;
     }
     /**


156) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:120    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.509a2d08847f70e3545bb880ca44b129.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($methods as $test => $method) {
-            if (true === $this->{$test}() && null !== ($token = $this->{$method}($request))) {
+            if (true === $this->{$test}() && null === ($token = $this->{$method}($request))) {
                 return $token;
             }
         }
         return null;
     }
     /**


157) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:120    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3dc9c830d7cb0965ef9c587ff2e02cb2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($methods as $test => $method) {
-            if (true === $this->{$test}() && null !== ($token = $this->{$method}($request))) {
+            if (true === $this->{$test}() || null !== ($token = $this->{$method}($request))) {
                 return $token;
             }
         }
         return null;
     }
     /**


158) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:119    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c1b74f7868be8826515b28cf050b6c2c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $methods = ['isTokenFromAuthorizationHeaderAllowed' => 'getTokenFromAuthorizationHeaders', 'isTokenFromQueryStringAllowed' => 'getTokenFromQuery', 'isTokenFromRequestBodyAllowed' => 'getTokenFromRequestBody'];
-        foreach ($methods as $test => $method) {
+        foreach (array() as $test => $method) {
             if (true === $this->{$test}() && null !== ($token = $this->{$method}($request))) {
                 return $token;
             }
         }
         return null;
     }


159) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:111    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fd75a6799a125a78bfab41e10c9dda65.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function findToken(ServerRequestInterface $request, array &$additionalCredentialValues) : ?string
+    protected function findToken(ServerRequestInterface $request, array &$additionalCredentialValues) : ?string
     {
         $methods = ['isTokenFromAuthorizationHeaderAllowed' => 'getTokenFromAuthorizationHeaders', 'isTokenFromQueryStringAllowed' => 'getTokenFromQuery', 'isTokenFromRequestBodyAllowed' => 'getTokenFromRequestBody'];
         foreach ($methods as $test => $method) {
             if (true === $this->{$test}() && null !== ($token = $this->{$method}($request))) {
                 return $token;
             }


160) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:133    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e4092b350a90f64ca4be501c488ff2d6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$accessToken->hasParameter('token_type')) {
+        if ($accessToken->hasParameter('token_type')) {
             return false;
         }
         return $accessToken->getParameter('token_type') === $this->name();
     }
     /**
      * Get the token from the authorization header.


161) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:137    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.66108a7b7a548ff9f08c8e4108d2a8fe.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return $accessToken->getParameter('token_type') === $this->name();
+        return $accessToken->getParameter('token_type') !== $this->name();
     }
     /**
      * Get the token from the authorization header.
      *
      * @param ServerRequestInterface $request
      *


162) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:131    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1c854185b675eecc4cb6a4e5c9729e48.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isTokenRequestValid(AccessToken $accessToken, ServerRequestInterface $request, array $additionalCredentialValues) : bool
+    protected function isTokenRequestValid(AccessToken $accessToken, ServerRequestInterface $request, array $additionalCredentialValues) : bool
     {
         if (!$accessToken->hasParameter('token_type')) {
             return false;
         }
         return $accessToken->getParameter('token_type') === $this->name();
     }


163) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:152    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.495e9c402c909576ceb9fafb14b3f72b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($authorization_headers as $authorization_header) {
-            if (1 === preg_match('/' . preg_quote('Bearer', '/') . '\\s([a-zA-Z0-9\\-_\\+~\\/\\.]+)/', $authorization_header, $matches)) {
+            if (0 === preg_match('/' . preg_quote('Bearer', '/') . '\\s([a-zA-Z0-9\\-_\\+~\\/\\.]+)/', $authorization_header, $matches)) {
                 return $matches[1];
             }
         }
         return null;
     }
     /**


164) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:152    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.47528f629793309af2b70ad378bc41d3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($authorization_headers as $authorization_header) {
-            if (1 === preg_match('/' . preg_quote('Bearer', '/') . '\\s([a-zA-Z0-9\\-_\\+~\\/\\.]+)/', $authorization_header, $matches)) {
+            if (1 !== preg_match('/' . preg_quote('Bearer', '/') . '\\s([a-zA-Z0-9\\-_\\+~\\/\\.]+)/', $authorization_header, $matches)) {
                 return $matches[1];
             }
         }
         return null;
     }
     /**


165) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:153    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b5378b1e9ef867dd992d55c4b1db24a5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             if (1 === preg_match('/' . preg_quote('Bearer', '/') . '\\s([a-zA-Z0-9\\-_\\+~\\/\\.]+)/', $authorization_header, $matches)) {
-                return $matches[1];
+                return $matches[0];
             }
         }
         return null;
     }
     /**
      * Get the token from the request body.


166) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:151    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d1f2f9eca47b90e8e30d1e846c37168a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorization_headers = $request->getHeader('AUTHORIZATION');
-        foreach ($authorization_headers as $authorization_header) {
+        foreach (array() as $authorization_header) {
             if (1 === preg_match('/' . preg_quote('Bearer', '/') . '\\s([a-zA-Z0-9\\-_\\+~\\/\\.]+)/', $authorization_header, $matches)) {
                 return $matches[1];
             }
         }
         return null;
     }


167) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:147    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1f0c7e73e11988d82cd87d5203b90137.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getTokenFromAuthorizationHeaders(ServerRequestInterface $request) : ?string
+    private function getTokenFromAuthorizationHeaders(ServerRequestInterface $request) : ?string
     {
         $authorization_headers = $request->getHeader('AUTHORIZATION');
         foreach ($authorization_headers as $authorization_header) {
             if (1 === preg_match('/' . preg_quote('Bearer', '/') . '\\s([a-zA-Z0-9\\-_\\+~\\/\\.]+)/', $authorization_header, $matches)) {
                 return $matches[1];
             }


168) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:181    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4bda0b13c2327430a464b0cce12b514b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getTokenFromQuery(ServerRequestInterface $request) : ?string
+    private function getTokenFromQuery(ServerRequestInterface $request) : ?string
     {
         $query_params = $request->getQueryParams();
         return $this->getAccessTokenFromParameters($query_params);
     }
     /**
      * @param array $params


169) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:193    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7bceac9ace0d3d2e5a52fc82975a585c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getAccessTokenFromParameters(array $params) : ?string
+    private function getAccessTokenFromParameters(array $params) : ?string
     {
         return array_key_exists('access_token', $params) ? $params['access_token'] : null;
     }
 }



170) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationDeleteEndpoint.php:64    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4a4fa1703594429230a3b49860d9a56c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $headers = ['Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
 }



171) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationDeleteEndpoint.php:52    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bbc66c0e007ab1a098735827096a2310.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $next) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $next) : ResponseInterface
     {
         /**
          * @var Client
          */
         $client = $request->getAttribute('client');
         $id = $client->getPublicId();


172) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationEndpoint.php:68    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.aaf5007d14263185a7b10c6fb0933318.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $next) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $next) : ResponseInterface
     {
         $this->checkClient($request);
         switch ($request->getMethod()) {
             case 'GET':
                 $get = new ClientConfigurationGetEndpoint($this->responseFactory);
                 return $get->process($request, $next);


173) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationEndpoint.php:98    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.95fb0c1e7857ed9f92e8c33cacd36ae9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $client = $request->getAttribute('client');
-            if (!$client instanceof Client) {
+            if ($client instanceof Client) {
                 throw new \RuntimeException('Invalid client or invalid registration access token.');
             }
             if (!$client->has('registration_access_token')) {
                 throw new \RuntimeException('Invalid client or invalid registration access token.');
             }
             $values = [];


174) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationEndpoint.php:101    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.211b63f257554e6a3730182e2d1f1b3e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (!$client->has('registration_access_token')) {
+            if ($client->has('registration_access_token')) {
                 throw new \RuntimeException('Invalid client or invalid registration access token.');
             }
             $values = [];
             $token = $this->bearerToken->findToken($request, $values);
             if (null === $token) {
                 throw new \RuntimeException('Invalid client or invalid registration access token.');


175) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationEndpoint.php:106    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e763b5d126525b1b6ce02a24cd42d7d9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $token = $this->bearerToken->findToken($request, $values);
-            if (null === $token) {
+            if (null !== $token) {
                 throw new \RuntimeException('Invalid client or invalid registration access token.');
             }
             if (!hash_equals($client->get('registration_access_token'), $token)) {
                 throw new \InvalidArgumentException('Invalid client or invalid registration access token.');
             }
         } catch (\InvalidArgumentException $e) {


176) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationEndpoint.php:109    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dc11039bae58f2e5d42654db03d110eb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (!hash_equals($client->get('registration_access_token'), $token)) {
+            if (hash_equals($client->get('registration_access_token'), $token)) {
                 throw new \InvalidArgumentException('Invalid client or invalid registration access token.');
             }
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);
         }
     }


177) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationGetEndpoint.php:46    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6256012a1532fdca6228516457f0b24c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $response = $this->responseFactory->createResponse();
-        $response->getBody()->write(json_encode($client->all(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+        $response->getBody()->write(json_encode($client->all(), JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
         foreach ($headers as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }


178) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationGetEndpoint.php:48    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.89ccb0fad7e8f6e1ae1dda71670cc0b2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
 }



179) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationGetEndpoint.php:42    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2247b268caf59e45b7db6b026a68fae1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $next) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $next) : ResponseInterface
     {
         $client = $request->getAttribute('client');
         $response = $this->responseFactory->createResponse();
         $response->getBody()->write(json_encode($client->all(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
         foreach ($headers as $k => $v) {


180) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationPutEndpoint.php:78    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c2564996966c431315ac21ff41772ca4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $response = $this->responseFactory->createResponse();
-        $response->getBody()->write(json_encode($client->all(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+        $response->getBody()->write(json_encode($client->all(), JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
         foreach ($headers as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }


181) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationPutEndpoint.php:80    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4bc0fa986dad5d33526cb33bf1f4c2bc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
 }



182) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientConfigurationEndpoint/ClientConfigurationPutEndpoint.php:62    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.91e297e16797aa31b7681f13dead5ec4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $next) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $next) : ResponseInterface
     {
         /** @var Client $client */
         $client = $request->getAttribute('client');
         $command_parameters = DataBag::create($request->getParsedBody() ?? []);
         $command = UpdateClientCommand::create($client->getPublicId(), $command_parameters);
         try {


183) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientCredentialsGrant/ClientCredentialsGrantType.php:41    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.db6136253c04123261b453031fd873b3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAssociatedResponseTypes() : array
+    protected function getAssociatedResponseTypes() : array
     {
         return [];
     }
     /**
      * {@inheritdoc}
      */


184) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientCredentialsGrant/ClientCredentialsGrantType.php:49    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d306c1a53f1e1bcd582775affc308d0f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getGrantType() : string
+    protected function getGrantType() : string
     {
         return 'client_credentials';
     }
     /**
      * {@inheritdoc}
      */


185) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientCredentialsGrant/ClientCredentialsGrantType.php:57    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a9a1bf2fe6a0f040fbb16b82a44dc2db.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkTokenRequest(ServerRequestInterface $request)
+    protected function checkTokenRequest(ServerRequestInterface $request)
     {
         // Nothing to do
     }
     /**
      * {@inheritdoc}
      */


186) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientCredentialsGrant/ClientCredentialsGrantType.php:65    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1e47a2f556a74501b50b691bc21b42ea.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         // Nothing to do
         return $grantTypeData;
     }
     /**
      * {@inheritdoc}


187) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientCredentialsGrant/ClientCredentialsGrantType.php:74    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bb629b52f7e3eefdb3c5d832ae883c17.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         $client = $grantTypeData->getClient();
         if ($client->isPublic()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'The client is not a confidential client.');
         }
         $grantTypeData = $grantTypeData->withResourceOwnerId($grantTypeData->getClient()->getPublicId());


188) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientCredentialsGrant/ClientCredentialsGrantType.php:89    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5357052e1537fc244dcf248ee65fd123.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isRefreshTokenIssuedWithAccessToken()
+    protected function isRefreshTokenIssuedWithAccessToken()
     {
         return $this->issueRefreshTokenWithAccessToken;
     }
 }



189) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/ClientRegistrationEndpoint.php:80    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2e65a722e99cd39268e89ea9dc9296e6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $client = $this->clientRepository->find($clientId);
-            if (null === $client) {
+            if (null !== $client) {
                 throw new \Exception('Unable to create or retrieve the client.');
             }
             return $this->createResponse($client);
         } catch (\Exception $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);
         }


190) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/ClientRegistrationEndpoint.php:64    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4e33dc3bb0e7ea2239f75e18e741f800.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler = null) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler = null) : ResponseInterface
     {
         $this->checkRequest($request);
         $initialAccessToken = $request->getAttribute('initial_access_token');
         try {
             if ($initialAccessToken instanceof InitialAccessToken) {
                 $userAccountId = $initialAccessToken->getUserAccountId();


191) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/ClientRegistrationEndpoint.php:97    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.21923d0eb8eea9842a062d58402d3eab.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ('POST' !== $request->getMethod()) {
+        if ('POST' === $request->getMethod()) {
             throw new OAuth2Exception(405, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unsupported method.');
         }
     }
     /**
      * @param Client $client
      *


192) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/ClientRegistrationEndpoint.php:110    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6357ea755662770dc4ddb7a700a4dc38.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $response = $this->responseFactory->createResponse(201);
-        foreach (['Content-Type' => 'application/json', 'Cache-Control' => 'no-store', 'Pragma' => 'no-cache'] as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         $response->getBody()->write(json_encode($client->all(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
         return $response;
     }
 }


193) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/ClientRegistrationEndpoint.php:113    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0192ab7a640c0c307d0dfb39058a4009.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        $response->getBody()->write(json_encode($client->all(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+        $response->getBody()->write(json_encode($client->all(), JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
         return $response;
     }
 }



194) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/CreateInitialAccessTokenCommand.php:43    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9d750e00a84c216191135cfed939a4fe.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(InitialAccessTokenId $initialAccessTokenId, ?UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt)
+    private function __construct(InitialAccessTokenId $initialAccessTokenId, ?UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt)
     {
         $this->initialAccessTokenId = $initialAccessTokenId;
         $this->userAccountId = $userAccountId;
         $this->expiresAt = $expiresAt;
     }
     /**


195) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/CreateInitialAccessTokenCommand.php:57    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a36cd20b036fab527462ae4586f95663.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(InitialAccessTokenId $initialAccessTokenId, ?UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt) : self
+    protected static function create(InitialAccessTokenId $initialAccessTokenId, ?UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt) : self
     {
         return new self($initialAccessTokenId, $userAccountId, $expiresAt);
     }
     /**
      * @return InitialAccessTokenId
      */


196) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/CreateInitialAccessTokenCommand.php:65    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bf3ea7f76169e6beff1ffb5192d04632.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getInitialAccessTokenId() : InitialAccessTokenId
+    protected function getInitialAccessTokenId() : InitialAccessTokenId
     {
         return $this->initialAccessTokenId;
     }
     /**
      * @return null|UserAccountId
      */


197) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/CreateInitialAccessTokenCommand.php:73    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.13a433faf9632171a75b232ace2b8177.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : ?UserAccountId
+    protected function getUserAccountId() : ?UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return null|\DateTimeImmutable
      */


198) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/CreateInitialAccessTokenCommand.php:81    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.03e6580197186c908354fb6045dd2a97.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : ?\DateTimeImmutable
+    protected function getExpiresAt() : ?\DateTimeImmutable
     {
         return $this->expiresAt;
     }
 }



199) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/CreateInitialAccessTokenCommandHandler.php:39    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8e1d6f6ee31033789dcee06e63ff2cf0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(CreateInitialAccessTokenCommand $command)
+    protected function handle(CreateInitialAccessTokenCommand $command)
     {
         $initialAccessToken = InitialAccessToken::createEmpty();
         $initialAccessToken = $initialAccessToken->create($command->getInitialAccessTokenId(), $command->getUserAccountId(), $command->getExpiresAt());
         $this->initialAccessTokenManager->save($initialAccessToken);
     }
 }


200) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/RevokeInitialAccessTokenCommand.php:30    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c68ea4be716fbfd6de0785466aa59f23.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(InitialAccessTokenId $initialAccessTokenId)
+    private function __construct(InitialAccessTokenId $initialAccessTokenId)
     {
         $this->initialAccessTokenId = $initialAccessTokenId;
     }
     /**
      * @param InitialAccessTokenId $initialAccessTokenId
      *


201) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/RevokeInitialAccessTokenCommand.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1b50436de48da90c70c76e5fe9cb7a2c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(InitialAccessTokenId $initialAccessTokenId) : self
+    protected static function create(InitialAccessTokenId $initialAccessTokenId) : self
     {
         return new self($initialAccessTokenId);
     }
     /**
      * @return InitialAccessTokenId
      */


202) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/RevokeInitialAccessTokenCommand.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6ee078bf90b58b396801a29aa96c198a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getInitialAccessTokenId() : InitialAccessTokenId
+    protected function getInitialAccessTokenId() : InitialAccessTokenId
     {
         return $this->initialAccessTokenId;
     }
 }



203) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/RevokeInitialAccessTokenCommandHandler.php:42    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ded1d177478dfa5603d80db8ad8498ea.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $accessToken = $this->initialAccessTokenRepository->find($accessTokenId);
-        if (null !== $accessToken) {
+        if (null === $accessToken) {
             $accessToken = $accessToken->markAsRevoked();
             $this->initialAccessTokenRepository->save($accessToken);
         }
     }
 }



204) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Command/RevokeInitialAccessTokenCommandHandler.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3346350f5df234f5f032feeb34777e01.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(RevokeInitialAccessTokenCommand $command)
+    protected function handle(RevokeInitialAccessTokenCommand $command)
     {
         $accessTokenId = $command->getInitialAccessTokenId();
         $accessToken = $this->initialAccessTokenRepository->find($accessTokenId);
         if (null !== $accessToken) {
             $accessToken = $accessToken->markAsRevoked();
             $this->initialAccessTokenRepository->save($accessToken);


205) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:49    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b56b6fa31a44bc1567614163469eee29.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(InitialAccessTokenId $initialAccessTokenId, UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(InitialAccessTokenId $initialAccessTokenId, UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->initialAccessTokenId = $initialAccessTokenId;
         $this->expiresAt = $expiresAt;
         $this->userAccountId = $userAccountId;
     }


206) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:72    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e0d94689ed1289f75a11ce86d0f3f7e3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(InitialAccessTokenId $initialAccessTokenId, UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt) : self
+    protected static function create(InitialAccessTokenId $initialAccessTokenId, UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt) : self
     {
         return new self($initialAccessTokenId, $userAccountId, $expiresAt, null, null);
     }
     /**
      * @return InitialAccessTokenId
      */


207) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:80    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.065a2bd8e06dc911817637085d59b88d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getInitialAccessTokenId() : InitialAccessTokenId
+    protected function getInitialAccessTokenId() : InitialAccessTokenId
     {
         return $this->initialAccessTokenId;
     }
     /**
      * @return UserAccountId
      */


208) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:88    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fef2bd05857c830655fc23b08c092385.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return \DateTimeImmutable|null
      */


209) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:96    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2ba61186c8e3b4db74a56b032ad66687.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : ?\DateTimeImmutable
+    protected function getExpiresAt() : ?\DateTimeImmutable
     {
         return $this->expiresAt;
     }
     /**
      * {@inheritdoc}
      */


210) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:129    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3385166200d326204a72c8ede92a482a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
-        $userAccountId = null === $json->payload->user_account_id ? null : UserAccountId::create($json->payload->user_account_id);
+        $userAccountId = null !== $json->payload->user_account_id ? null : UserAccountId::create($json->payload->user_account_id);
         $expiresAt = null === $json->payload->expires_at ? null : \DateTimeImmutable::createFromFormat('U', (string) $json->payload->expires_at);
         return new self($initialAccessTokenId, $userAccountId, $expiresAt, $recordedOn, $eventId);
     }
 }



211) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:130    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bed9b3eeca8dd584ea81b6895a3c8860.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $userAccountId = null === $json->payload->user_account_id ? null : UserAccountId::create($json->payload->user_account_id);
-        $expiresAt = null === $json->payload->expires_at ? null : \DateTimeImmutable::createFromFormat('U', (string) $json->payload->expires_at);
+        $expiresAt = null !== $json->payload->expires_at ? null : \DateTimeImmutable::createFromFormat('U', (string) $json->payload->expires_at);
         return new self($initialAccessTokenId, $userAccountId, $expiresAt, $recordedOn, $eventId);
     }
 }



212) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:123    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b4136007a01735846c8285f0adbf18f6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $initialAccessTokenId = InitialAccessTokenId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $userAccountId = null === $json->payload->user_account_id ? null : UserAccountId::create($json->payload->user_account_id);
         $expiresAt = null === $json->payload->expires_at ? null : \DateTimeImmutable::createFromFormat('U', (string) $json->payload->expires_at);


213) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenRevokedEvent.php:36    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8f7068f0219541a9673b0d33f7c5e275.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(InitialAccessTokenId $initialAccessTokenId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(InitialAccessTokenId $initialAccessTokenId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->initialAccessTokenId = $initialAccessTokenId;
     }
     /**
      * {@inheritdoc}


214) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenRevokedEvent.php:55    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.108acfb00f32796c38e3ca764eceb4d8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(InitialAccessTokenId $initialAccessTokenId) : self
+    protected static function create(InitialAccessTokenId $initialAccessTokenId) : self
     {
         return new self($initialAccessTokenId, null, null);
     }
     /**
      * @return InitialAccessTokenId
      */


215) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenRevokedEvent.php:63    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.502c89b4533e16cb40d4be9d2df8843d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getInitialAccessTokenId() : InitialAccessTokenId
+    protected function getInitialAccessTokenId() : InitialAccessTokenId
     {
         return $this->initialAccessTokenId;
     }
     /**
      * {@inheritdoc}
      */


216) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenRevokedEvent.php:71    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2311bed70495dc243acbdb3cf5a1545c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getInitialAccessTokenId();
     }
     /**
      * {@inheritdoc}
      */


217) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenRevokedEvent.php:86    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.635a3d291902f2b5ed665dace029a745.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $initialAccessTokenId = InitialAccessTokenId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         return new self($initialAccessTokenId, $recordedOn, $eventId);
     }


218) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:50    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8045a547e1ab6a0c221dcf6e46d6422d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createEmpty() : self
+    protected static function createEmpty() : self
     {
         return new self();
     }
     /**
      * @param InitialAccessTokenId    $initialAccessTokenId
      * @param UserAccountId           $userAccountId


219) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:62    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d53f0b0d3457dbdba3cee453fa831aeb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function create(InitialAccessTokenId $initialAccessTokenId, UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt) : self
+    protected function create(InitialAccessTokenId $initialAccessTokenId, UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt) : self
     {
         $clone = clone $this;
         $clone->initialAccessTokenId = $initialAccessTokenId;
         $clone->expiresAt = $expiresAt;
         $clone->userAccountId = $userAccountId;
         $event = InitialAccessTokenEvent\InitialAccessTokenCreatedEvent::create($initialAccessTokenId, $userAccountId, $expiresAt);


220) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:80    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.77becdfe8a4fce60fd34b2c725c594a9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->initialAccessTokenId) {
+        if (null !== $this->initialAccessTokenId) {
             throw new \LogicException('Initial Access Token not initialized.');
         }
         return $this->initialAccessTokenId;
     }
     /**
      * @return UserAccountId


221) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:78    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7fcb9f676ae8af44ff9d51ec14800ba4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTokenId() : InitialAccessTokenId
+    protected function getTokenId() : InitialAccessTokenId
     {
         if (null === $this->initialAccessTokenId) {
             throw new \LogicException('Initial Access Token not initialized.');
         }
         return $this->initialAccessTokenId;
     }


222) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:92    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2ed6701899aa778ee4d691ffa22102b2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->userAccountId) {
+        if (null !== $this->userAccountId) {
             throw new \LogicException('Initial Access Token not initialized.');
         }
         return $this->userAccountId;
     }
     /**
      * @return \DateTimeImmutable|null


223) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:90    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9f68df3c3f463f317903539445105d79.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         if (null === $this->userAccountId) {
             throw new \LogicException('Initial Access Token not initialized.');
         }
         return $this->userAccountId;
     }


224) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:102    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.771a13aeb991522e4c6bc58a666d8c93.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : ?\DateTimeImmutable
+    protected function getExpiresAt() : ?\DateTimeImmutable
     {
         return $this->expiresAt;
     }
     /**
      * @return bool
      */


225) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:118    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fd97fee596457aa1f7f3207d4226ac98.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isRevoked() : bool
+    protected function isRevoked() : bool
     {
         return $this->revoked;
     }
     /**
      * @return InitialAccessToken
      */


226) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:129    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1bad5b4c5d4dc50c08447606080257ab.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         $event = InitialAccessTokenEvent\InitialAccessTokenRevokedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;
     }
     /**
      * {@inheritdoc}


227) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:126    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.943de5773f69a9fcee87fd905b14a663.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function markAsRevoked() : self
+    protected function markAsRevoked() : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         $event = InitialAccessTokenEvent\InitialAccessTokenRevokedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;


228) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:139    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9ed277cd8e52799faef7d3fb92db3ff7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/model/initial-access-token/1.0/schema';
     }
     /**
      * {@inheritdoc}
      */


229) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:147    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.59f552ad98c75e8072913b1d730ffbf1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $initialAccessTokenId = InitialAccessTokenId::create($json->initial_access_token_id);
         $expiresAt = $json->expires_at ? \DateTimeImmutable::createFromFormat('U', (string) $json->expires_at) : null;
         $userAccountId = $json->user_account_id ? UserAccountId::create($json->user_account_id) : null;
         $revoked = $json->is_revoked;
         $initialAccessToken = new self();


230) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:166    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9f3a8e73be343c706d33d3e09b22ab73.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         $data = ['$schema' => $this->getSchema(), 'type' => get_class($this), 'initial_access_token_id' => $this->getTokenId() ? $this->getTokenId()->getValue() : null, 'user_account_id' => $this->getUserAccountId() ? $this->getUserAccountId()->getValue() : null, 'expires_at' => $this->getExpiresAt() ? $this->getExpiresAt()->getTimestamp() : null, 'is_revoked' => $this->isRevoked()];
         return $data;
     }
     /**
      * @param Event $event


231) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:188    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6e9d6f9b406bd466f00ce0bddd825575.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $map = $this->getEventMap();
-        if (!array_key_exists($event->getType(), $map)) {
+        if (array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->initialAccessTokenId && $this->initialAccessTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this initial access token.');
         }
         $method = $map[$event->getType()];


232) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:191    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.005b1844700631c5df9a940409a6347e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->initialAccessTokenId && $this->initialAccessTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null === $this->initialAccessTokenId && $this->initialAccessTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this initial access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


233) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:191    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.36ce3c8ae6f0b8e0e80995c64d6f0837.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->initialAccessTokenId && $this->initialAccessTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->initialAccessTokenId && $this->initialAccessTokenId->getValue() === $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this initial access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


234) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:191    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.67cdc323b81183f5e3ece94ae2d5352b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->initialAccessTokenId && $this->initialAccessTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->initialAccessTokenId || $this->initialAccessTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this initial access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


235) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:185    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.66d04815280130b81f6c04e8af34ae91.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function apply(Event $event) : self
+    protected function apply(Event $event) : self
     {
         $map = $this->getEventMap();
         if (!array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->initialAccessTokenId && $this->initialAccessTokenId->getValue() !== $event->getDomainId()->getValue()) {


236) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:215    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f45e2c51c5e5000e55d53f6961204c09.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyInitialAccessTokenCreatedEvent(InitialAccessTokenEvent\InitialAccessTokenCreatedEvent $event) : self
+    private function applyInitialAccessTokenCreatedEvent(InitialAccessTokenEvent\InitialAccessTokenCreatedEvent $event) : self
     {
         $clone = clone $this;
         $clone->initialAccessTokenId = $event->getInitialAccessTokenId();
         $clone->expiresAt = $event->getExpiresAt();
         $clone->userAccountId = $event->getUserAccountId();
         return $clone;


237) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:233    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bcf89380a1cffcf885628abe213b2dc2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         return $clone;
     }
 }



238) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:230    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5bb3cf87065cd3e7983fc93e4fdaa1be.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyInitialAccessTokenRevokedEvent(InitialAccessTokenEvent\InitialAccessTokenRevokedEvent $event) : self
+    private function applyInitialAccessTokenRevokedEvent(InitialAccessTokenEvent\InitialAccessTokenRevokedEvent $event) : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         return $clone;
     }
 }


239) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessTokenId.php:25    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fc16eb8c4ef95c6a2a78569f9b6c74c1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



240) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:36    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.398d66b000c3bb61f16b8123e320583b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createEmpty() : self
+    protected static function createEmpty() : self
     {
         return new self();
     }
     /**
      * {@inheritdoc}
      */


241) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:44    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7ba024501ff0eece583f7f5f12d30928.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/model/access-token/1.0/schema';
     }
     /**
      * @param AccessTokenId         $accessTokenId
      * @param ResourceOwnerId       $resourceOwnerId


242) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:61    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ecf2277360a036f9c4968c4509b46141.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function create(AccessTokenId $accessTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, \DateTimeImmutable $expiresAt, ?ResourceServerId $resourceServerId)
+    protected function create(AccessTokenId $accessTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, \DateTimeImmutable $expiresAt, ?ResourceServerId $resourceServerId)
     {
         $clone = clone $this;
         $clone->accessTokenId = $accessTokenId;
         $clone->resourceOwnerId = $resourceOwnerId;
         $clone->clientId = $clientId;
         $clone->parameters = $parameters;


243) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:84    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.eba9a9132875ba20c01ef23b9eebcc0a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->accessTokenId) {
+        if (null !== $this->accessTokenId) {
             throw new \RuntimeException('Access token not initialized.');
         }
         return $this->accessTokenId;
     }
     /**
      * @return AccessToken


244) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:82    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.11b3ae0e164f97674cd785dd8aee8ff4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTokenId() : TokenId
+    protected function getTokenId() : TokenId
     {
         if (null === $this->accessTokenId) {
             throw new \RuntimeException('Access token not initialized.');
         }
         return $this->accessTokenId;
     }


245) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:97    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9ff91a3b0c15e435a92f76d478284b05.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         $event = AccessTokenEvent\AccessTokenRevokedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;
     }
     /**
      * {@inheritdoc}


246) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:94    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b0f6792db493824cb0effca71c4a6111.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function markAsRevoked() : self
+    protected function markAsRevoked() : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         $event = AccessTokenEvent\AccessTokenRevokedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;


247) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:109    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a837562878a8c355884900e00f7e7ae5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        $data = parent::jsonSerialize() + ['access_token_id' => $this->getTokenId()->getValue()];
+        $data = parent::jsonSerialize() - ['access_token_id' => $this->getTokenId()->getValue()];
         return $data;
     }
     /**
      * {@inheritdoc}
      */
     public static function createFromJson(\stdClass $json) : DomainObject


248) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:107    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.74f7160985695ac4f2bf7d38ae84affe.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         $data = parent::jsonSerialize() + ['access_token_id' => $this->getTokenId()->getValue()];
         return $data;
     }
     /**
      * {@inheritdoc}


249) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:122    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bf9d878f3b2c69e28a59d6306982c8d0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $accessTokenId = AccessTokenId::create($json->access_token_id);
-        $resourceServerId = null !== $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
+        $resourceServerId = null === $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
         $expiresAt = \DateTimeImmutable::createFromFormat('U', (string) $json->expires_at);
         $clientId = ClientId::create($json->client_id);
         $parameters = DataBag::create((array) $json->parameters);
         $metadatas = DataBag::create((array) $json->metadatas);
         $scopes = (array) $json->scopes;
         $revoked = $json->is_revoked;


250) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:131    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2f6d4dca43369b4b37300f48512a4d32.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $resourceOwnerClass = $json->resource_owner_class;
-        if (!method_exists($resourceOwnerClass, 'create')) {
+        if (method_exists($resourceOwnerClass, 'create')) {
             throw new \InvalidArgumentException('Invalid resource owner.');
         }
         $resourceOwnerId = $resourceOwnerClass::create($json->resource_owner_id);
         $accessToken = new self();
         $accessToken->accessTokenId = $accessTokenId;
         $accessToken->resourceServerId = $resourceServerId;


251) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:119    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a1deac09a7ada44b88ce5f11f06f24e1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $accessTokenId = AccessTokenId::create($json->access_token_id);
         $resourceServerId = null !== $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
         $expiresAt = \DateTimeImmutable::createFromFormat('U', (string) $json->expires_at);
         $clientId = ClientId::create($json->client_id);
         $parameters = DataBag::create((array) $json->parameters);


252) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:159    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1f2bcd34b5124198db15dccb88e1dd44.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $data['expires_in'] = $this->getExpiresIn();
-        if (!empty($this->getScopes())) {
+        if (empty($this->getScopes())) {
             $data['scope'] = implode(' ', $this->getScopes());
         }
         return $data;
     }
     /**
      * @param Event $event


253) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:154    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d67e83748790e61b66710b50d7439232.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResponseData() : array
+    protected function getResponseData() : array
     {
         $data = $this->getParameters()->all();
         $data['access_token'] = $this->getTokenId()->getValue();
         $data['expires_in'] = $this->getExpiresIn();
         if (!empty($this->getScopes())) {
             $data['scope'] = implode(' ', $this->getScopes());


254) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:174    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6a451b3f4c9ce606a3a6125cf09bd6e6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $map = $this->getEventMap();
-        if (!array_key_exists($event->getType(), $map)) {
+        if (array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->clientId && $this->accessTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this access token.');
         }
         $method = $map[$event->getType()];


255) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:177    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.72fd29d7d9d8ed06da9791ce0646ce05.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->clientId && $this->accessTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null === $this->clientId && $this->accessTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


256) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:177    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0315b056a87de707b0751db5ed629b6b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->clientId && $this->accessTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->clientId && $this->accessTokenId->getValue() === $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


257) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:177    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3f6bdc4823fd4db612316388cf96324a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->clientId && $this->accessTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->clientId || $this->accessTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


258) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:171    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e26a35a07526c795fbecdbbceeb868fb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function apply(Event $event) : self
+    protected function apply(Event $event) : self
     {
         $map = $this->getEventMap();
         if (!array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->clientId && $this->accessTokenId->getValue() !== $event->getDomainId()->getValue()) {


259) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:201    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a22a8d61070772f8a3ddc7c5d0d12d3b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyAccessTokenCreatedEvent(AccessTokenEvent\AccessTokenCreatedEvent $event) : self
+    private function applyAccessTokenCreatedEvent(AccessTokenEvent\AccessTokenCreatedEvent $event) : self
     {
         $clone = clone $this;
         $clone->accessTokenId = $event->getAccessTokenId();
         $clone->resourceOwnerId = $event->getResourceOwnerId();
         $clone->clientId = $event->getClientId();
         $clone->parameters = $event->getParameters();


260) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:222    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ea82f8aeae380b671477d2de444bfd74.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         return $clone;
     }
 }



261) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessToken.php:219    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.30768c6cf1f5c3a7a1b0d2efcf4a0f8d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyAccessTokenRevokedEvent() : self
+    private function applyAccessTokenRevokedEvent() : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         return $clone;
     }
 }


262) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenHandlerManager.php:28    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2c522729479140b10741ae6962ccb5dc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(AccessTokenHandler $accessTokenHandler) : self
+    protected function add(AccessTokenHandler $accessTokenHandler) : self
     {
         $this->accessTokenHandlers[] = $accessTokenHandler;
         return $this;
     }
     /**
      * @param AccessTokenId $token


263) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenHandlerManager.php:44    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.991846c6cc1c267e99650e4e27837131.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $accessToken = $accessTokenHandler->find($token);
-            if (null !== $accessToken) {
+            if (null === $accessToken) {
                 return $accessToken;
             }
         }
         return null;
     }
 }


264) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenHandlerManager.php:42    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6c4f33620b42b585f7c63c3022e6994c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        foreach ($this->accessTokenHandlers as $accessTokenHandler) {
+        foreach (array() as $accessTokenHandler) {
             $accessToken = $accessTokenHandler->find($token);
             if (null !== $accessToken) {
                 return $accessToken;
             }
         }
         return null;


265) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenHandlerManager.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1a013b0aa1baa135445e0b07c7ec98ee.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function find(AccessTokenId $token) : ?AccessToken
+    protected function find(AccessTokenId $token) : ?AccessToken
     {
         foreach ($this->accessTokenHandlers as $accessTokenHandler) {
             $accessToken = $accessTokenHandler->find($token);
             if (null !== $accessToken) {
                 return $accessToken;
             }


266) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenId.php:25    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8fda686b441a311521d9d74a0557ee6e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



267) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.899568a210b4fb148a6d21aff89c0737.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function hint() : string
+    protected function hint() : string
     {
         return 'access_token';
     }
     /**
      * {@inheritdoc}
      */


268) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7e84d16d639ad418349da843e4c5df4e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function find(string $token) : ?Token
+    protected function find(string $token) : ?Token
     {
         $id = AccessTokenId::create($token);
         return $this->accessTokenRepository->find($id);
     }
     /**
      * {@inheritdoc}


269) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:60    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e6899b6f2f6abe2f14aa474f3e861335.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AccessToken || true === $token->isRevoked()) {
+        if ($token instanceof AccessToken || true === $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->accessTokenRepository->save($token);
     }
     /**


270) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:60    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b50cf9c6365fb966a89bad3fa96eb7b7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AccessToken || true === $token->isRevoked()) {
+        if (!$token instanceof AccessToken || false === $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->accessTokenRepository->save($token);
     }
     /**


271) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:60    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.04e88499d282345a9afa3143d5ea9ee8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AccessToken || true === $token->isRevoked()) {
+        if (!$token instanceof AccessToken || true !== $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->accessTokenRepository->save($token);
     }
     /**


272) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:60    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5aa891ce5c6aa3bdae7c36433158d62d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AccessToken || true === $token->isRevoked()) {
+        if (!$token instanceof AccessToken && true === $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->accessTokenRepository->save($token);
     }
     /**


273) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:58    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e0cde17115f64a5cc4f5f3a7cb300f2c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function revoke(Token $token)
+    protected function revoke(Token $token)
     {
         if (!$token instanceof AccessToken || true === $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->accessTokenRepository->save($token);


274) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:72    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f6a5e1852deec08d7d7494666812d0da.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AccessToken || true === $token->isRevoked()) {
+        if ($token instanceof AccessToken || true === $token->isRevoked()) {
             return ['active' => false];
         }
         $values = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
         if (!empty($token->getScopes())) {
             $values['scope'] = implode(' ', $token->getScopes());
         }


275) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:72    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7cad1522337e7d7eef511d9f03f4eadb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AccessToken || true === $token->isRevoked()) {
+        if (!$token instanceof AccessToken || false === $token->isRevoked()) {
             return ['active' => false];
         }
         $values = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
         if (!empty($token->getScopes())) {
             $values['scope'] = implode(' ', $token->getScopes());
         }


276) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:72    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.db477b41858b3fd4bf3af08c5a2d2e48.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AccessToken || true === $token->isRevoked()) {
+        if (!$token instanceof AccessToken || true !== $token->isRevoked()) {
             return ['active' => false];
         }
         $values = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
         if (!empty($token->getScopes())) {
             $values['scope'] = implode(' ', $token->getScopes());
         }


277) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:72    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1d669e57bfbd28d3ad4f484cc9acc822.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof AccessToken || true === $token->isRevoked()) {
+        if (!$token instanceof AccessToken && true === $token->isRevoked()) {
             return ['active' => false];
         }
         $values = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
         if (!empty($token->getScopes())) {
             $values['scope'] = implode(' ', $token->getScopes());
         }


278) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:79    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.75459e96ce4b87b5080b83a8094b69d6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        $values = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
+        $values = ['active' => $token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
         if (!empty($token->getScopes())) {
             $values['scope'] = implode(' ', $token->getScopes());
         }
         return $values + $token->getParameters()->all();
     }
 }


279) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:84    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a7be1c60028f96be5a31cdbd01fd13dc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $values = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
-        if (!empty($token->getScopes())) {
+        if (empty($token->getScopes())) {
             $values['scope'] = implode(' ', $token->getScopes());
         }
         return $values + $token->getParameters()->all();
     }
 }



280) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:88    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.66c797eb4889aaa8853d99addb452849.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return $values + $token->getParameters()->all();
+        return $values - $token->getParameters()->all();
     }
 }



281) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:70    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4867b2e0e68866c7effcf38ac7ff3715.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function introspect(Token $token) : array
+    protected function introspect(Token $token) : array
     {
         if (!$token instanceof AccessToken || true === $token->isRevoked()) {
             return ['active' => false];
         }
         $values = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
         if (!empty($token->getScopes())) {


282) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:76    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2345628e5eca17d3123b4177daddbd26.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AccessTokenId $accessTokenId, ClientId $clientId, UserAccountId $userAccountId, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId)
+    private function __construct(AccessTokenId $accessTokenId, ClientId $clientId, UserAccountId $userAccountId, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId)
     {
         $this->accessTokenId = $accessTokenId;
         $this->clientId = $clientId;
         $this->userAccountId = $userAccountId;
         $this->expiresAt = $expiresAt;
         $this->parameters = $parameters;


283) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:100    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.364b9eb19827aa904ce46e7c35842265.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AccessTokenId $accessTokenId, ClientId $clientId, UserAccountId $userAccountId, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId) : self
+    protected static function create(AccessTokenId $accessTokenId, ClientId $clientId, UserAccountId $userAccountId, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId) : self
     {
         return new self($accessTokenId, $clientId, $userAccountId, $expiresAt, $parameters, $metadatas, $scopes, $resourceServerId);
     }
     /**
      * @return ClientId
      */


284) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:108    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5d982723d13232d77803c7769865a491.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return UserAccountId
      */


285) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:116    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1217b483256da05bf9c9268d6202e234.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return DataBag
      */


286) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:124    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2d91cf61a26b01b1f93225ec26f74eda.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @return DataBag
      */


287) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:132    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a91aa3f506c059737923ee532245afbb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getMetadatas() : DataBag
+    protected function getMetadatas() : DataBag
     {
         return $this->metadatas;
     }
     /**
      * @return array
      */


288) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:140    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.200feb43aabb37ec1db0f97d6c7a64f0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return null|ResourceServerId
      */


289) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:148    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4fecfc7ec28be4645b033de29d978b0d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
     /**
      * @return AccessTokenId
      */


290) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:156    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8ecc0adf459d465dfefd579e41264ab2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAccessTokenId() : AccessTokenId
+    protected function getAccessTokenId() : AccessTokenId
     {
         return $this->accessTokenId;
     }
     /**
      * @return \DateTimeImmutable
      */


291) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommand.php:164    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8f4d2a6940e2fb40d98c0fe67f15d852.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : \DateTimeImmutable
+    protected function getExpiresAt() : \DateTimeImmutable
     {
         return $this->expiresAt;
     }
 }



292) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommandHandler.php:42    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fee68cb087702d2d209a980deee859ea.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $accessToken = $this->accessTokenRepository->find($command->getAccessTokenId());
-        if (null !== $accessToken) {
+        if (null === $accessToken) {
             throw new \InvalidArgumentException(sprintf('The access token with ID "%s" already exists.', $command->getAccessTokenId()->getValue()));
         }
         $accessToken = AccessToken::createEmpty();
         $accessToken = $accessToken->create($command->getAccessTokenId(), $command->getUserAccountId(), $command->getClientId(), $command->getParameters(), $command->getMetadatas(), $command->getScopes(), $command->getExpiresAt(), $command->getResourceServerId());
         $this->accessTokenRepository->save($accessToken);
     }


293) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/CreateAccessTokenCommandHandler.php:39    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bac46bfce8984b16bbbd15c4350fcf7b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(CreateAccessTokenCommand $command)
+    protected function handle(CreateAccessTokenCommand $command)
     {
         $accessToken = $this->accessTokenRepository->find($command->getAccessTokenId());
         if (null !== $accessToken) {
             throw new \InvalidArgumentException(sprintf('The access token with ID "%s" already exists.', $command->getAccessTokenId()->getValue()));
         }
         $accessToken = AccessToken::createEmpty();


294) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/RevokeAccessTokenCommand.php:30    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f73e904d64e372ca64c5205540ed3bec.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AccessTokenId $accessTokenId)
+    private function __construct(AccessTokenId $accessTokenId)
     {
         $this->accessTokenId = $accessTokenId;
     }
     /**
      * @param AccessTokenId $accessTokenId
      *


295) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/RevokeAccessTokenCommand.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4dc4b4f1e04f7fb149986ce65a917965.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AccessTokenId $accessTokenId) : self
+    protected static function create(AccessTokenId $accessTokenId) : self
     {
         return new self($accessTokenId);
     }
     /**
      * @return AccessTokenId
      */


296) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/RevokeAccessTokenCommand.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5f6f60808c13cc793260c443de00f652.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAccessTokenId() : AccessTokenId
+    protected function getAccessTokenId() : AccessTokenId
     {
         return $this->accessTokenId;
     }
 }



297) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/RevokeAccessTokenCommandHandler.php:42    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ada19e52fb32640a63915bae53081f3a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $accessToken = $this->accessTokenRepository->find($accessTokenId);
-        if (null === $accessToken) {
+        if (null !== $accessToken) {
             throw new \InvalidArgumentException(sprintf('Unable to find the access token with ID "%s".', $command->getAccessTokenId()->getValue()));
         }
         $accessToken = $accessToken->markAsRevoked();
         $this->accessTokenRepository->save($accessToken);
     }
 }


298) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Command/RevokeAccessTokenCommandHandler.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8db712f3b35fc5e4eef5dc7de45253a8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(RevokeAccessTokenCommand $command)
+    protected function handle(RevokeAccessTokenCommand $command)
     {
         $accessTokenId = $command->getAccessTokenId();
         $accessToken = $this->accessTokenRepository->find($accessTokenId);
         if (null === $accessToken) {
             throw new \InvalidArgumentException(sprintf('Unable to find the access token with ID "%s".', $command->getAccessTokenId()->getValue()));
         }


299) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:82    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a118a57820b9776b3120b1b0158d002f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AccessTokenId $accessTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, \DateTimeImmutable $expiresAt, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(AccessTokenId $accessTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, \DateTimeImmutable $expiresAt, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->accessTokenId = $accessTokenId;
         $this->resourceOwnerId = $resourceOwnerId;
         $this->clientId = $clientId;
         $this->parameters = $parameters;


300) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:115    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ecfb9dd65e32de5c168a5529f2898cad.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AccessTokenId $accessTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, \DateTimeImmutable $expiresAt, ?ResourceServerId $resourceServerId) : self
+    protected static function create(AccessTokenId $accessTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, \DateTimeImmutable $expiresAt, ?ResourceServerId $resourceServerId) : self
     {
         return new self($accessTokenId, $resourceOwnerId, $clientId, $parameters, $metadatas, $scopes, $expiresAt, $resourceServerId, null, null);
     }
     /**
      * {@inheritdoc}
      */


301) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:123    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2282afae68c3d91cfa52d921cdf4fbe0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $accessTokenId = AccessTokenId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $resourceOwnerClass = $json->payload->resource_owner_class;
         $resourceOwnerId = $resourceOwnerClass::create($json->payload->resource_owner_id);


302) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:143    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dd4c4f10289d4aca556099721f2a81f3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAccessTokenId() : AccessTokenId
+    protected function getAccessTokenId() : AccessTokenId
     {
         return $this->accessTokenId;
     }
     /**
      * @return \DateTimeImmutable
      */


303) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:151    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0ee98805895fdd201d40be1a3cc24d44.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : \DateTimeImmutable
+    protected function getExpiresAt() : \DateTimeImmutable
     {
         return $this->expiresAt;
     }
     /**
      * @return ResourceOwnerId
      */


304) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:159    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.29663b5fbdf7d314842aa8a7be894cdb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceOwnerId() : ResourceOwnerId
+    protected function getResourceOwnerId() : ResourceOwnerId
     {
         return $this->resourceOwnerId;
     }
     /**
      * @return ClientId
      */


305) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:167    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d911a2941ea260d7976c9c73c495bd72.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return DataBag
      */


306) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:175    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4dd1b5e787f20f17af04ca9c4f1f1335.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @return DataBag
      */


307) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:183    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d94d9ed777794702dd957b3e6d47f1f1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getMetadatas() : DataBag
+    protected function getMetadatas() : DataBag
     {
         return $this->metadatas;
     }
     /**
      * @return \string[]
      */


308) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:191    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0e615905de4218061d352ecfaa57c357.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return null|ResourceServerId
      */


309) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:199    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d9f2e0accd79583cd27e809fcd1324a0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
     /**
      * {@inheritdoc}
      */


310) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenRevokedEvent.php:36    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8c482d53ae28c5a951710612197a0a82.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(AccessTokenId $accessTokenId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(AccessTokenId $accessTokenId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->accessTokenId = $accessTokenId;
     }
     /**
      * {@inheritdoc}


311) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenRevokedEvent.php:55    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9549cd10dc1c1ceb9a63170b498d9cfd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(AccessTokenId $accessTokenId) : self
+    protected static function create(AccessTokenId $accessTokenId) : self
     {
         return new self($accessTokenId, null, null);
     }
     /**
      * {@inheritdoc}
      */


312) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenRevokedEvent.php:63    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ea1f8b5cbb9f56ed15ba11c7cd97f509.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $accessTokenId = AccessTokenId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         return new self($accessTokenId, $recordedOn, $eventId);
     }


313) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenRevokedEvent.php:75    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5c018f28af737e6ccf70166d1271efd5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAccessTokenId() : AccessTokenId
+    protected function getAccessTokenId() : AccessTokenId
     {
         return $this->accessTokenId;
     }
     /**
      * {@inheritdoc}
      */


314) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenRevokedEvent.php:83    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a57074265f87c3061614a7379245871a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getAccessTokenId();
     }
     /**
      * {@inheritdoc}
      */


315) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:70    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d82ce9e2621b6bd9631ce3860fdad63d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/model/client/1.0/schema';
     }
     /**
      * @return Client
      */


316) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:78    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c59a6b805918d4f35a6fd558940ad067.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createEmpty() : self
+    protected static function createEmpty() : self
     {
         return new self();
     }
     /**
      * @param ClientId           $clientId
      * @param DataBag            $parameters


317) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:90    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.92d782e7a4eb505dd5a0c9cbb3e08d50.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function create(ClientId $clientId, DataBag $parameters, ?UserAccountId $ownerId) : self
+    protected function create(ClientId $clientId, DataBag $parameters, ?UserAccountId $ownerId) : self
     {
         $clone = clone $this;
         $clone->clientId = $clientId;
         $clone->parameters = $parameters;
         $clone->ownerId = $ownerId;
         $event = ClientEvent\ClientCreatedEvent::create($clone->clientId, $parameters, $ownerId);


318) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:106    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.49bc6a8f1df5238ed7e99d1c8d54e2be.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getOwnerId() : ?UserAccountId
+    protected function getOwnerId() : ?UserAccountId
     {
         return $this->ownerId;
     }
     /**
      * @param UserAccountId $ownerId
      *


319) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:118    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.365750b6f86c97c654d358aa4ad98fd5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($this->getOwnerId()->getValue() === $ownerId->getValue()) {
+        if ($this->getOwnerId()->getValue() !== $ownerId->getValue()) {
             return $this;
         }
         $clone = clone $this;
         $clone->ownerId = $ownerId;
         $event = ClientEvent\ClientOwnerChangedEvent::create($clone->getPublicId(), $ownerId);
         $clone->record($event);


320) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:116    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bcd2a914b8cc8310f26b9137da64ae79.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withOwnerId(UserAccountId $ownerId) : self
+    protected function withOwnerId(UserAccountId $ownerId) : self
     {
         if ($this->getOwnerId()->getValue() === $ownerId->getValue()) {
             return $this;
         }
         $clone = clone $this;
         $clone->ownerId = $ownerId;


321) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:135    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.abfcfcf0cf184838dcbc336fb33c72b4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withParameters(DataBag $parameters) : self
+    protected function withParameters(DataBag $parameters) : self
     {
         $clone = clone $this;
         $clone->parameters = $parameters;
         $event = ClientEvent\ClientParametersUpdatedEvent::create($clone->getPublicId(), $parameters);
         $clone->record($event);
         return $clone;


322) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:151    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bff97bcb116dd6a0700df89bb69ee035.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->deleted = true;
+        $clone->deleted = false;
         $event = ClientEvent\ClientDeletedEvent::create($clone->getPublicId());
         $clone->record($event);
         return $clone;
     }
     /**
      * @return bool


323) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:148    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.de59833b936ae38ffac1390ebe5da393.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function markAsDeleted() : self
+    protected function markAsDeleted() : self
     {
         $clone = clone $this;
         $clone->deleted = true;
         $event = ClientEvent\ClientDeletedEvent::create($clone->getPublicId());
         $clone->record($event);
         return $clone;


324) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:161    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.045fa4b67d6ec751a78ad6339c8d37c1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isDeleted() : bool
+    protected function isDeleted() : bool
     {
         return $this->deleted;
     }
     /**
      * @param string $grant_type
      *


325) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:219    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.248a694d1cbf6f4b4d54d1694e097ffa.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        return 'none' === $this->getTokenEndpointAuthenticationMethod();
+        return 'none' !== $this->getTokenEndpointAuthenticationMethod();
     }
     /**
      * @return string
      */
     public function getTokenEndpointAuthenticationMethod() : string
     {


326) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:217    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e1d0bd79c5c9f079f3da9cee398cf0c5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isPublic() : bool
+    protected function isPublic() : bool
     {
         return 'none' === $this->getTokenEndpointAuthenticationMethod();
     }
     /**
      * @return string
      */


327) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:225    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e4a39cbe2eddf6c08a0aea8f3b715daa.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTokenEndpointAuthenticationMethod() : string
+    protected function getTokenEndpointAuthenticationMethod() : string
     {
         if ($this->has('token_endpoint_auth_method')) {
             return $this->get('token_endpoint_auth_method');
         }
         return 'client_secret_basic';
     }


328) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:263    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a526b64127717346bf0718aed245c697.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        return $this->has('jwks') || $this->has('jwks_uri') || $this->has('client_secret');
+        return $this->has('jwks') && $this->has('jwks_uri') || $this->has('client_secret');
     }
     /**
      * @return JWKSet
      */
     public function getPublicKeySet() : JWKSet
     {


329) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:263    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.17d669c73b088a86f3c6d7bab9cf41df.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        return $this->has('jwks') || $this->has('jwks_uri') || $this->has('client_secret');
+        return ($this->has('jwks') || $this->has('jwks_uri')) && $this->has('client_secret');
     }
     /**
      * @return JWKSet
      */
     public function getPublicKeySet() : JWKSet
     {


330) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:261    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ccb17a024f0a88fcb854c5e5a15feac5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function hasPublicKeySet() : bool
+    protected function hasPublicKeySet() : bool
     {
         return $this->has('jwks') || $this->has('jwks_uri') || $this->has('client_secret');
     }
     /**
      * @return JWKSet
      */


331) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:271    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.79a0e33d15967dee4c73c5c65cbb5443.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->hasPublicKeySet()) {
+        if ($this->hasPublicKeySet()) {
             throw new \LogicException('The client has no public key set');
         }
         $jwkset = null;
         if ($this->has('jwks')) {
             $jwkset = JWKSet::createFromJson($this->get('jwks'));
         }


332) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:269    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c999eb31ce530ec95b2b08fde98cce4a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getPublicKeySet() : JWKSet
+    protected function getPublicKeySet() : JWKSet
     {
         if (!$this->hasPublicKeySet()) {
             throw new \LogicException('The client has no public key set');
         }
         $jwkset = null;
         if ($this->has('jwks')) {


333) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:307    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4e36e8f3f2d021e2e8a1c3b0c3e8777f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->clientId) {
+        if (null !== $this->clientId) {
             throw new \RuntimeException('Client not initialized.');
         }
         return $this->clientId;
     }
     /**
      * {@inheritdoc}


334) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:305    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.890b166d149b0e6be1481c06afed4e77.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getPublicId() : ResourceOwnerId
+    protected function getPublicId() : ResourceOwnerId
     {
         if (null === $this->clientId) {
             throw new \RuntimeException('Client not initialized.');
         }
         return $this->clientId;
     }


335) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:317    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.243cdcc8386bda369b2194b2476d57b5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function has(string $key) : bool
+    protected function has(string $key) : bool
     {
         return $this->parameters->has($key);
     }
     /**
      * {@inheritdoc}
      */


336) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:327    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.864bfb056563becf5375c350c3162dc4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->has($key)) {
+        if ($this->has($key)) {
             throw new \InvalidArgumentException(sprintf('Configuration value with key "%s" does not exist.', $key));
         }
         return $this->parameters->get($key);
     }
     /**
      * @return array


337) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:325    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8978c373dd0acc055ffc1a36cab31a16.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function get(string $key)
+    protected function get(string $key)
     {
         if (!$this->has($key)) {
             throw new \InvalidArgumentException(sprintf('Configuration value with key "%s" does not exist.', $key));
         }
         return $this->parameters->get($key);
     }


338) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:337    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8ea1ed8286744cb057384c0f34f58a27.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         $all = $this->parameters->all();
         $all['client_id'] = $this->getPublicId()->getValue();
         return $all;
     }
     /**


339) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:348    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.74a3a6705956384afb6bd05d2d4afab6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         $data = ['$schema' => $this->getSchema(), 'type' => get_class($this), 'client_id' => $this->getPublicId()->getValue(), 'owner_id' => $this->getOwnerId() ? $this->getOwnerId()->getValue() : null, 'parameters' => (object) $this->all(), 'is_deleted' => $this->isDeleted()];
         return $data;
     }
     /**
      * {@inheritdoc}


340) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:368    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.87483cc14113f3c16d4387f73ba0abd6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clientId = ClientId::create($json->client_id);
-        $ownerId = null !== $json->owner_id ? UserAccountId::create($json->owner_id) : null;
+        $ownerId = null === $json->owner_id ? UserAccountId::create($json->owner_id) : null;
         $parameters = DataBag::create((array) $json->parameters);
         $deleted = $json->is_deleted;
         $client = new self();
         $client->clientId = $clientId;
         $client->ownerId = $ownerId;
         $client->parameters = $parameters;


341) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:365    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.38dd9894e3efa0304f1f7aac658507f4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $clientId = ClientId::create($json->client_id);
         $ownerId = null !== $json->owner_id ? UserAccountId::create($json->owner_id) : null;
         $parameters = DataBag::create((array) $json->parameters);
         $deleted = $json->is_deleted;
         $client = new self();


342) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:389    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.767b418995f5802079674277ef9f58c0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $map = $this->getEventMap();
-        if (!array_key_exists($event->getType(), $map)) {
+        if (array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->clientId && $this->clientId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this client.');
         }
         $method = $map[$event->getType()];


343) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:392    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f1b2c4a6a5400f61045f523fb44db081.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->clientId && $this->clientId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null === $this->clientId && $this->clientId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this client.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


344) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:392    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5c8f11f2a1bffd437001f4f698ce40a6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->clientId && $this->clientId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->clientId && $this->clientId->getValue() === $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this client.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


345) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:392    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d6814332a14564912ed04382ef146ab7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->clientId && $this->clientId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->clientId || $this->clientId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \InvalidArgumentException('Event not applicable for this client.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


346) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:386    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.db6ca335b52944b6780e037bccf469c2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function apply(Event $event) : self
+    protected function apply(Event $event) : self
     {
         $map = $this->getEventMap();
         if (!array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->clientId && $this->clientId->getValue() !== $event->getDomainId()->getValue()) {


347) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:418    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.92fcf23873d2b1699ab7c3ffb407c5f6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyClientCreatedEvent(ClientEvent\ClientCreatedEvent $event) : self
+    private function applyClientCreatedEvent(ClientEvent\ClientCreatedEvent $event) : self
     {
         $clone = clone $this;
         $clone->clientId = $event->getClientId();
         $clone->ownerId = $event->getOwnerId();
         $clone->parameters = $event->getParameters();
         return $clone;


348) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:433    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9d40ea52521bcbe2191c600d7da08bb4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyClientOwnerChangedEvent(ClientEvent\ClientOwnerChangedEvent $event) : self
+    private function applyClientOwnerChangedEvent(ClientEvent\ClientOwnerChangedEvent $event) : self
     {
         $clone = clone $this;
         $clone->ownerId = $event->getNewOwnerId();
         return $clone;
     }
     /**


349) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:449    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9cfd774c4527b2dd1a6d0a609050be73.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->deleted = true;
+        $clone->deleted = false;
         return $clone;
     }
     /**
      * @param ClientEvent\ClientParametersUpdatedEvent $event
      *
      * @return Client


350) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:446    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a80b6a1c6305521a8e105f2b8cad4821.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyClientDeletedEvent(ClientEvent\ClientDeletedEvent $event) : self
+    private function applyClientDeletedEvent(ClientEvent\ClientDeletedEvent $event) : self
     {
         $clone = clone $this;
         $clone->deleted = true;
         return $clone;
     }
     /**


351) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:459    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.83c3297e631f6ab510514dfb5061739c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyClientParametersUpdatedEvent(ClientEvent\ClientParametersUpdatedEvent $event) : self
+    private function applyClientParametersUpdatedEvent(ClientEvent\ClientParametersUpdatedEvent $event) : self
     {
         $clone = clone $this;
         $clone->parameters = $event->getParameters();
         return $clone;
     }
 }


352) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/ClientId.php:28    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1f036e1fb7b388fcd7bc3c0cc281fb01.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



353) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/ChangeOwnerCommand.php:37    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f77577d0128d83d8b23d63c8270fba1c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(ClientId $clientId, UserAccountId $userAccountId)
+    private function __construct(ClientId $clientId, UserAccountId $userAccountId)
     {
         $this->clientId = $clientId;
         $this->userAccountId = $userAccountId;
     }
     /**
      * @param ClientId      $clientId


354) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/ChangeOwnerCommand.php:49    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f8ebb136f9224224ff58e05f3bad987d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId, UserAccountId $userAccountId) : self
+    protected static function create(ClientId $clientId, UserAccountId $userAccountId) : self
     {
         return new self($clientId, $userAccountId);
     }
     /**
      * @return ClientId
      */


355) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/ChangeOwnerCommand.php:57    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.861db79a19149de5f0df7db245a833ef.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return UserAccountId
      */


356) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/ChangeOwnerCommand.php:65    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9cfe49916470ac9c5de55d1e8801224c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getNewOwnerId() : UserAccountId
+    protected function getNewOwnerId() : UserAccountId
     {
         return $this->userAccountId;
     }
 }



357) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/ChangeOwnerCommandHandler.php:41    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0a62e4c8beac873760269ccb2b89ae20.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $client = $this->clientRepository->find($command->getClientId());
-        if (null === $client) {
+        if (null !== $client) {
             throw new \InvalidArgumentException(sprintf('The client with ID "%s" does not exists.', $command->getClientId()->getValue()));
         }
         $owner = $command->getNewOwnerId();
         $client = $client->withOwnerId($owner);
         $this->clientRepository->save($client);
     }


358) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/ChangeOwnerCommandHandler.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6829a37dbc45722a410e5f05844fd70d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ChangeOwnerCommand $command)
+    protected function handle(ChangeOwnerCommand $command)
     {
         $client = $this->clientRepository->find($command->getClientId());
         if (null === $client) {
             throw new \InvalidArgumentException(sprintf('The client with ID "%s" does not exists.', $command->getClientId()->getValue()));
         }
         $owner = $command->getNewOwnerId();


359) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/CreateClientCommand.php:44    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1fedcfd1045762044129b6a9696b3d15.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(ClientId $clientId, ?UserAccountId $userAccountId, DataBag $parameters)
+    private function __construct(ClientId $clientId, ?UserAccountId $userAccountId, DataBag $parameters)
     {
         $this->clientId = $clientId;
         $this->parameters = $parameters;
         $this->userAccountId = $userAccountId;
     }
     /**


360) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/CreateClientCommand.php:58    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.10848a62538157ead98543ea2da09cda.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId, ?UserAccountId $userAccountId, DataBag $parameters) : self
+    protected static function create(ClientId $clientId, ?UserAccountId $userAccountId, DataBag $parameters) : self
     {
         return new self($clientId, $userAccountId, $parameters);
     }
     /**
      * @return ClientId
      */


361) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/CreateClientCommand.php:66    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4c3c04bd8d319c385f3b86ef092af82c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return DataBag
      */


362) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/CreateClientCommand.php:74    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.260f9f6fb65fc517b56814496b26714a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @return UserAccountId|null
      */


363) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/CreateClientCommand.php:82    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.48aee3ba30b81053f099f6287d73d8c0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : ?UserAccountId
+    protected function getUserAccountId() : ?UserAccountId
     {
         return $this->userAccountId;
     }
 }



364) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/CreateClientCommandHandler.php:51    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1d725b95307a46e3675a58ea4f44c50c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $client = $this->clientRepository->find($clientId);
-        if (null !== $client) {
+        if (null === $client) {
             throw new \InvalidArgumentException(sprintf('The client with ID "%s" already exists.', $clientId->getValue()));
         }
         $parameters = $command->getParameters();
         $userAccountId = $command->getUserAccountId();
         $validatedParameters = $this->ruleManager->handle($clientId, $parameters, $userAccountId);
         $client = Client::createEmpty();


365) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/CreateClientCommandHandler.php:47    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1b7a7e4543dfc082e9cc20548fc8cd76.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(CreateClientCommand $command)
+    protected function handle(CreateClientCommand $command)
     {
         $clientId = $command->getClientId();
         $client = $this->clientRepository->find($clientId);
         if (null !== $client) {
             throw new \InvalidArgumentException(sprintf('The client with ID "%s" already exists.', $clientId->getValue()));
         }


366) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/DeleteClientCommand.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0b076a9143ed550eaba13539c28487d2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId) : self
+    protected static function create(ClientId $clientId) : self
     {
         return new self($clientId);
     }
     /**
      * @return ClientId
      */


367) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/DeleteClientCommand.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8618609de1852ea17f60664f4575158f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
 }



368) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/DeleteClientCommandHandler.php:42    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f0e9fea1dd59b48b8ae26cca95d94427.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $client = $this->clientRepository->find($clientId);
-        if (null !== $client && !$client->isDeleted()) {
+        if (null === $client && !$client->isDeleted()) {
             $client = $client->markAsDeleted();
             $this->clientRepository->save($client);
         }
     }
 }



369) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/DeleteClientCommandHandler.php:42    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.47f37f59b420228d2188ce5c60a63bbf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $client = $this->clientRepository->find($clientId);
-        if (null !== $client && !$client->isDeleted()) {
+        if (null !== $client && $client->isDeleted()) {
             $client = $client->markAsDeleted();
             $this->clientRepository->save($client);
         }
     }
 }



370) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/DeleteClientCommandHandler.php:42    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e05bc4200e087d247ab2ff02e4d534de.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $client = $this->clientRepository->find($clientId);
-        if (null !== $client && !$client->isDeleted()) {
+        if (null !== $client || !$client->isDeleted()) {
             $client = $client->markAsDeleted();
             $this->clientRepository->save($client);
         }
     }
 }



371) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/DeleteClientCommandHandler.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.09fb0e408ae158bf414fbbeb7ea9e378.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(DeleteClientCommand $command)
+    protected function handle(DeleteClientCommand $command)
     {
         $clientId = $command->getClientId();
         $client = $this->clientRepository->find($clientId);
         if (null !== $client && !$client->isDeleted()) {
             $client = $client->markAsDeleted();
             $this->clientRepository->save($client);


372) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/UpdateClientCommand.php:37    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.06801907246cd237bd256786d9485f2f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(ClientId $clientId, DataBag $parameters)
+    private function __construct(ClientId $clientId, DataBag $parameters)
     {
         $this->clientId = $clientId;
         $this->parameters = $parameters;
     }
     /**
      * @param ClientId $clientId


373) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/UpdateClientCommand.php:49    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0b1bd20b73a973bb7b6ab5e1529f9c2d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId, DataBag $parameters) : self
+    protected static function create(ClientId $clientId, DataBag $parameters) : self
     {
         return new self($clientId, $parameters);
     }
     /**
      * @return ClientId
      */


374) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/UpdateClientCommand.php:57    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.303b0be12a0ebd7f813ec77b8b95cc92.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return DataBag
      */


375) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/UpdateClientCommand.php:65    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c99d23842fce9ee008caf936bc656327.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
 }



376) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/UpdateClientCommandHandler.php:49    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6662288dc8f9592c29d2e29d6ab25cb0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $client = $this->clientRepository->find($command->getClientId());
-        if (null === $client) {
+        if (null !== $client) {
             throw new \InvalidArgumentException(sprintf('The client with ID "%s" does not exists.', $command->getClientId()->getValue()));
         }
         $parameters = $command->getParameters();
         $userAccountId = $client->getOwnerId();
         $validatedParameters = $this->ruleManager->handle($client->getPublicId(), $parameters, $userAccountId);
         $client = $client->withParameters($validatedParameters);


377) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Command/UpdateClientCommandHandler.php:46    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ac10ad45068f995bff584351cbfc2883.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(UpdateClientCommand $command)
+    protected function handle(UpdateClientCommand $command)
     {
         $client = $this->clientRepository->find($command->getClientId());
         if (null === $client) {
             throw new \InvalidArgumentException(sprintf('The client with ID "%s" does not exists.', $command->getClientId()->getValue()));
         }
         $parameters = $command->getParameters();


378) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:50    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fd6666c79cfe32efd54d94a9e518738f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(ClientId $clientId, DataBag $parameters, ?UserAccountId $userAccountId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(ClientId $clientId, DataBag $parameters, ?UserAccountId $userAccountId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->clientId = $clientId;
         $this->parameters = $parameters;
         $this->userAccountId = $userAccountId;
     }


379) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:65    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4277b78b909c819afa46a13124712a2d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId, DataBag $parameters, ?UserAccountId $userAccountId) : self
+    protected static function create(ClientId $clientId, DataBag $parameters, ?UserAccountId $userAccountId) : self
     {
         return new self($clientId, $parameters, $userAccountId, null, null);
     }
     /**
      * {@inheritdoc}
      */


380) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:78    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.17fc9ef8964f09a50233acc43119e39f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
-        $userAccountId = null === $json->payload->user_account_id ? null : UserAccountId::create($json->payload->user_account_id);
+        $userAccountId = null !== $json->payload->user_account_id ? null : UserAccountId::create($json->payload->user_account_id);
         $parameters = DataBag::create((array) $json->payload->parameters);
         return new self($clientId, $parameters, $userAccountId, $recordedOn, $eventId);
     }
     /**
      * {@inheritdoc}
      */


381) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:73    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0bca4472e7ca1cb42804e0903924e41e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $clientId = ClientId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $userAccountId = null === $json->payload->user_account_id ? null : UserAccountId::create($json->payload->user_account_id);
         $parameters = DataBag::create((array) $json->payload->parameters);


382) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:120    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a23f8f8696abd3d7f6b337cc9ab87789.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return DataBag
      */


383) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:128    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3b4fbdc573fe6a5f06c816532bfd2ecc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @return null|UserAccountId
      */


384) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:136    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0bf10d51c423ee466e334778f926b2e9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getOwnerId() : ?UserAccountId
+    protected function getOwnerId() : ?UserAccountId
     {
         return $this->userAccountId;
     }
 }



385) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientDeletedEvent.php:36    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.af139abd3ede024909b9b77f8d8948a9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(ClientId $clientId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(ClientId $clientId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->clientId = $clientId;
     }
     /**
      * {@inheritdoc}


386) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientDeletedEvent.php:55    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e695b1aebe36d750f29b79af6ada6d3d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId) : self
+    protected static function create(ClientId $clientId) : self
     {
         return new self($clientId, null, null);
     }
     /**
      * {@inheritdoc}
      */


387) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientDeletedEvent.php:63    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bc1da372ece86fde844a6c0c4b4b4e27.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $clientId = ClientId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         return new self($clientId, $recordedOn, $eventId);
     }


388) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientDeletedEvent.php:79    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ebe5b2f1e2e3d49220574958c7e17fb5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getClientId();
     }
     /**
      * {@inheritdoc}
      */


389) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientDeletedEvent.php:94    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2a1423ba169d0bbe5a7af70c3e92d9b6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
 }



390) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:43    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.695fda5805a81fb2a40022c471628d91.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(ClientId $clientId, UserAccountId $newOwnerId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(ClientId $clientId, UserAccountId $newOwnerId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->clientId = $clientId;
         $this->newOwnerId = $newOwnerId;
     }
     /**


391) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:64    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a9110308c32fb6a46d1dd70d8f65784a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId, UserAccountId $newOwnerId) : self
+    protected static function create(ClientId $clientId, UserAccountId $newOwnerId) : self
     {
         return new self($clientId, $newOwnerId, null, null);
     }
     /**
      * {@inheritdoc}
      */


392) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:77    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5491095b22579bafd0494624c33a3ca8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
-        $userAccountId = null === $json->payload->new_owner_id ? null : UserAccountId::create($json->payload->new_owner_id);
+        $userAccountId = null !== $json->payload->new_owner_id ? null : UserAccountId::create($json->payload->new_owner_id);
         return new self($clientId, $userAccountId, $recordedOn, $eventId);
     }
     /**
      * {@inheritdoc}
      */
     public function getDomainId() : Id


393) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:72    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fbb3b2da32e4b7c88300fab7b10eaed0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $clientId = ClientId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $userAccountId = null === $json->payload->new_owner_id ? null : UserAccountId::create($json->payload->new_owner_id);
         return new self($clientId, $userAccountId, $recordedOn, $eventId);


394) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:90    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c5e630ea292f18db6923ee09f2354faf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getClientId();
     }
     /**
      * @return ClientId
      */


395) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:98    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.469e4a13c91920d77cec91780ab47b6b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return UserAccountId
      */


396) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:106    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1621098281cfca8def2b53e009af1628.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getNewOwnerId() : UserAccountId
+    protected function getNewOwnerId() : UserAccountId
     {
         return $this->newOwnerId;
     }
     /**
      * {@inheritdoc}
      */


397) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientParametersUpdatedEvent.php:43    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9a2389a34945629f9e954b48933e187a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(ClientId $clientId, DataBag $parameters, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(ClientId $clientId, DataBag $parameters, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->clientId = $clientId;
         $this->parameters = $parameters;
     }
     /**


398) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientParametersUpdatedEvent.php:64    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b1d39514ceb5a54dd2c218d3b1c050f8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId, DataBag $parameters) : self
+    protected static function create(ClientId $clientId, DataBag $parameters) : self
     {
         return new self($clientId, $parameters, null, null);
     }
     /**
      * @return ClientId
      */


399) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientParametersUpdatedEvent.php:72    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cbb9890eec7449de0a18a173bb459d5c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return DataBag
      */


400) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientParametersUpdatedEvent.php:80    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.29c3d51be83054be533f518cc3c24a60.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * {@inheritdoc}
      */


401) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientParametersUpdatedEvent.php:88    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.829ef5bda0176bf353900b53093b9b32.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getClientId();
     }
     /**
      * {@inheritdoc}
      */


402) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientParametersUpdatedEvent.php:106    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.706a7a191abfa6fd1ddc0b30207d72a9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $clientId = ClientId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $parameters = DataBag::create((array) $json->payload->parameters);
         return new self($clientId, $parameters, $recordedOn, $eventId);


403) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:31    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dbb4482aea4374208b84f2bd018b6fbf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($requestedParameters->all() as $k => $v) {
-            if ($base === $k) {
+            if ($base !== $k) {
                 $closure($k, $v);
                 $result[$k] = $v;
                 continue;
             }
             $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
             if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {


404) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:35    [M] Continue_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.852eed8bf49d440967b2239989c33e4c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $result[$k] = $v;
-                continue;
+                break;
             }
             $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
             if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }


405) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:38    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.516aba0f8873ee8caa4d7a01168cb36b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
+            $sub = mb_substr($k, 1, mb_strlen($base, '8bit') + 1, '8bit');
             if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;


406) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:38    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d6616c9d5c8198c48c97c5d363d6aa52.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
+            $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 0, '8bit');
             if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;


407) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:38    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f730087727229320adbcc2e482af66fe.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
+            $sub = mb_substr($k, 0, mb_strlen($base, '8bit') - 1, '8bit');
             if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;


408) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:39    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.210599490117850f013acce6a793cee8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
-            if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
+            if (sprintf('%s#', $base) !== $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;
             }


409) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:39    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4e74f576e9618c16f2fcf952bab7dee4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
-            if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
+            if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 0, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;
             }


410) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:39    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8d222adf306584410aca8c2701760058.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
-            if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
+            if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') - 1, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;
             }


411) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:39    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e4cb9f8b70711d063f003ff845edffd3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
-            if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
+            if (sprintf('%s#', $base) === $sub && empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;
             }


412) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:39    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.126b64dd24e081471091f1710a653661.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');
-            if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
+            if (sprintf('%s#', $base) === $sub || !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
                 if (null !== $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;
             }


413) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:40    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.af7a8084a2d2da0a554a2cd9385bbf5e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             if (sprintf('%s#', $base) === $sub && !empty(mb_substr($k, mb_strlen($base, '8bit') + 1, null, '8bit'))) {
-                if (null !== $closure) {
+                if (null === $closure) {
                     $closure($k, $v);
                 }
                 $result[$k] = $v;
                 continue;
             }
         }


414) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:45    [M] Continue_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c5444ccc41b6fbc6c986528032753400.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $result[$k] = $v;
-                continue;
+                break;
             }
         }
         return $result;
     }
 }



415) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:30    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c94ff50a8bd451d8e9c84ebc36e49802.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $result = [];
-        foreach ($requestedParameters->all() as $k => $v) {
+        foreach (array() as $k => $v) {
             if ($base === $k) {
                 $closure($k, $v);
                 $result[$k] = $v;
                 continue;
             }
             $sub = mb_substr($k, 0, mb_strlen($base, '8bit') + 1, '8bit');


416) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/AbstractInternationalizedRule.php:27    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f0ef246a40d4b17e19ef489c586017c4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getInternationalizedParameters(DataBag $requestedParameters, string $base, ?\Closure $closure) : array
+    private function getInternationalizedParameters(DataBag $requestedParameters, string $base, ?\Closure $closure) : array
     {
         $result = [];
         foreach ($requestedParameters->all() as $k => $v) {
             if ($base === $k) {
                 $closure($k, $v);
                 $result[$k] = $v;


417) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ApplicationTypeParametersRule.php:28    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e1ae4e5340157c8fc3319f0bf71a2b9e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $application_type = $commandParameters->get('application_type');
-            if (!in_array($application_type, ['native', 'web'])) {
+            if (in_array($application_type, ['native', 'web'])) {
                 throw new \InvalidArgumentException('The parameter "application_type" must be either "native" or "web".');
             }
             $validatedParameters = $validatedParameters->with('application_type', $application_type);
         } else {
             $validatedParameters = $validatedParameters->with('application_type', 'web');
         }


418) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ApplicationTypeParametersRule.php:24    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7e3701af046ee879fc7a41a301c806a2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('application_type')) {
             $application_type = $commandParameters->get('application_type');
             if (!in_array($application_type, ['native', 'web'])) {
                 throw new \InvalidArgumentException('The parameter "application_type" must be either "native" or "web".');
             }


419) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ClientIdIssuedAtRule.php:24    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.90a7baded6cb43140445b7f88f9c2953.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('client_id_issued_at')) {
             $validatedParameters = $validatedParameters->with('client_id_issued_at', $commandParameters->get('client_id_issued_at'));
         } else {
             $validatedParameters = $validatedParameters->with('client_id_issued_at', time());
         }


420) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ClientRegistrationManagementRule.php:24    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5136f38015fe28114e0ced8267d16872.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         $validatedParameters = $validatedParameters->with('registration_access_token', $this->generateRegistrationAccessToken());
         $validatedParameters = $validatedParameters->with('registration_client_uri', $this->getRegistrationClientUri($clientId));
         return $next($clientId, $commandParameters, $validatedParameters);
     }
     /**


421) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/CommonParametersRule.php:28    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0655d2857f417d66cc0fd3d1ecb72461.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $id = $this->getInternationalizedParameters($commandParameters, $parameter, $closure);
-            foreach ($id as $k => $v) {
+            foreach (array() as $k => $v) {
                 $validatedParameters = $validatedParameters->with($k, $v);
             }
         }
         return $next($clientId, $commandParameters, $validatedParameters);
     }
     /**


422) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/CommonParametersRule.php:26    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cd26dc0bd865504e37ffecc21e8bcc56.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        foreach ($this->getSupportedParameters() as $parameter => $closure) {
+        foreach (array() as $parameter => $closure) {
             $id = $this->getInternationalizedParameters($commandParameters, $parameter, $closure);
             foreach ($id as $k => $v) {
                 $validatedParameters = $validatedParameters->with($k, $v);
             }
         }
         return $next($clientId, $commandParameters, $validatedParameters);


423) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/CommonParametersRule.php:24    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.07fd3cc253ff828afeebbc4e42debadf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         foreach ($this->getSupportedParameters() as $parameter => $closure) {
             $id = $this->getInternationalizedParameters($commandParameters, $parameter, $closure);
             foreach ($id as $k => $v) {
                 $validatedParameters = $validatedParameters->with($k, $v);
             }


424) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/CommonParametersRule.php:57    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c9f43a9f75d5fedbb02f2ae3e3dcd46c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         return function ($k, $v) {
-            if (!filter_var($v, FILTER_VALIDATE_URL)) {
+            if (filter_var($v, FILTER_VALIDATE_URL)) {
                 throw new \InvalidArgumentException(sprintf('The parameter with key "%s" is not a valid URL.', $k));
             }
         };
     }
 }



425) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ContactsParametersRule.php:28    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.deeed5a29e46bfbf340f1905b81b3dee.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $contacts = $commandParameters->get('contacts');
-            if (!is_array($contacts)) {
+            if (is_array($contacts)) {
                 throw new \InvalidArgumentException('The parameter "contacts" must be a list of e-mail addresses.');
             }
             foreach ($contacts as $contact) {
                 if (!filter_var($contact, FILTER_VALIDATE_EMAIL)) {
                     throw new \InvalidArgumentException('The parameter "contacts" must be a list of e-mail addresses.');
                 }


426) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ContactsParametersRule.php:32    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5a922fe158589c41086f61d878533d61.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             foreach ($contacts as $contact) {
-                if (!filter_var($contact, FILTER_VALIDATE_EMAIL)) {
+                if (filter_var($contact, FILTER_VALIDATE_EMAIL)) {
                     throw new \InvalidArgumentException('The parameter "contacts" must be a list of e-mail addresses.');
                 }
             }
             $validatedParameters = $validatedParameters->with('contacts', $contacts);
         }
         return $next($clientId, $commandParameters, $validatedParameters);


427) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ContactsParametersRule.php:31    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.38177ded424bbfa31a0a360edc0835fb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            foreach ($contacts as $contact) {
+            foreach (array() as $contact) {
                 if (!filter_var($contact, FILTER_VALIDATE_EMAIL)) {
                     throw new \InvalidArgumentException('The parameter "contacts" must be a list of e-mail addresses.');
                 }
             }
             $validatedParameters = $validatedParameters->with('contacts', $contacts);
         }


428) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ContactsParametersRule.php:24    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3dd38e22222ff4ebd8792c22f976d774.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('contacts')) {
             $contacts = $commandParameters->get('contacts');
             if (!is_array($contacts)) {
                 throw new \InvalidArgumentException('The parameter "contacts" must be a list of e-mail addresses.');
             }


429) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/GrantTypesRule.php:42    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.39e07370712f8ab89469a95d22703113.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$commandParameters->has('grant_types')) {
+        if ($commandParameters->has('grant_types')) {
             $commandParameters = $commandParameters->with('grant_types', []);
         }
         $this->checkGrantTypes($commandParameters);
         $validatedParameters = $validatedParameters->with('grant_types', $commandParameters->get('grant_types'));
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
         $this->checkResponseTypes($validatedParameters);


430) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/GrantTypesRule.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6f56bb512aba213adecfd22ed7b1a7f1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if (!$commandParameters->has('grant_types')) {
             $commandParameters = $commandParameters->with('grant_types', []);
         }
         $this->checkGrantTypes($commandParameters);
         $validatedParameters = $validatedParameters->with('grant_types', $commandParameters->get('grant_types'));


431) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/GrantTypesRule.php:60    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a807a86abd17a3471fa7c3b882360337.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!is_array($parameters->get('grant_types'))) {
+        if (is_array($parameters->get('grant_types'))) {
             throw new \InvalidArgumentException('The parameter "grant_types" must be an array of strings.');
         }
         foreach ($parameters->get('grant_types') as $grant_type) {
             if (!is_string($grant_type)) {
                 throw new \InvalidArgumentException('The parameter "grant_types" must be an array of strings.');
             }


432) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/GrantTypesRule.php:64    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b8ab917ed424292bcc3a56523aa39d1a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($parameters->get('grant_types') as $grant_type) {
-            if (!is_string($grant_type)) {
+            if (is_string($grant_type)) {
                 throw new \InvalidArgumentException('The parameter "grant_types" must be an array of strings.');
             }
             if (!$this->grantTypeManager->has($grant_type)) {
                 throw new \InvalidArgumentException(sprintf('The grant_type "%s" is not supported by this server.', $grant_type));
             }
         }


433) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/GrantTypesRule.php:67    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9231440a75d092e854d57986ea5f79e0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (!$this->grantTypeManager->has($grant_type)) {
+            if ($this->grantTypeManager->has($grant_type)) {
                 throw new \InvalidArgumentException(sprintf('The grant_type "%s" is not supported by this server.', $grant_type));
             }
         }
     }
     /**
      * @param DataBag $parameters


434) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/GrantTypesRule.php:63    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4eafdc08b711c3dd2f374122c7cdb36a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        foreach ($parameters->get('grant_types') as $grant_type) {
+        foreach (array() as $grant_type) {
             if (!is_string($grant_type)) {
                 throw new \InvalidArgumentException('The parameter "grant_types" must be an array of strings.');
             }
             if (!$this->grantTypeManager->has($grant_type)) {
                 throw new \InvalidArgumentException(sprintf('The grant_type "%s" is not supported by this server.', $grant_type));
             }


435) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/GrantTypesRule.php:84    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.450d2157119036808029bdbe1f0cc13a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $diff = array_diff($type->getAssociatedResponseTypes(), $responseTypes);
-            if (!empty($diff)) {
+            if (empty($diff)) {
                 throw new \InvalidArgumentException(sprintf('The grant type "%s" requires the following response type(s): %s.', $grantType, implode(', ', $diff)));
             }
         }
     }
 }



436) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/GrantTypesRule.php:81    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a2b2555c39f51b1c04c166530d8cd4f6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $responseTypes = $parameters->has('response_types') ? $parameters->get('response_types') : [];
-        foreach ($parameters->get('grant_types') as $grantType) {
+        foreach (array() as $grantType) {
             $type = $this->grantTypeManager->get($grantType);
             $diff = array_diff($type->getAssociatedResponseTypes(), $responseTypes);
             if (!empty($diff)) {
                 throw new \InvalidArgumentException(sprintf('The grant type "%s" requires the following response type(s): %s.', $grantType, implode(', ', $diff)));
             }
         }


437) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/IdTokenAlgorithmsRule.php:55    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7b5148e05630d55cdb277a939b77bd5a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ($commandParameters->has('id_token_encrypted_response_alg') && $commandParameters->has('id_token_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if (($commandParameters->has('id_token_encrypted_response_alg') || $commandParameters->has('id_token_encrypted_response_enc')) && null !== $this->jweBuilder) {
             $this->checkAlgorithms('id_token_encrypted_response_alg', $commandParameters, $this->jweBuilder->getKeyEncryptionAlgorithmManager()->list());
             $this->checkAlgorithms('id_token_encrypted_response_enc', $commandParameters, $this->jweBuilder->getContentEncryptionAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('id_token_encrypted_response_alg', $commandParameters->get('id_token_encrypted_response_alg'));
             $validatedParameters = $validatedParameters->with('id_token_encrypted_response_enc', $commandParameters->get('id_token_encrypted_response_enc'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);


438) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/IdTokenAlgorithmsRule.php:55    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.48f89627ef8ab8491f4b5a27588a7c89.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ($commandParameters->has('id_token_encrypted_response_alg') && $commandParameters->has('id_token_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if ($commandParameters->has('id_token_encrypted_response_alg') && $commandParameters->has('id_token_encrypted_response_enc') && null === $this->jweBuilder) {
             $this->checkAlgorithms('id_token_encrypted_response_alg', $commandParameters, $this->jweBuilder->getKeyEncryptionAlgorithmManager()->list());
             $this->checkAlgorithms('id_token_encrypted_response_enc', $commandParameters, $this->jweBuilder->getContentEncryptionAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('id_token_encrypted_response_alg', $commandParameters->get('id_token_encrypted_response_alg'));
             $validatedParameters = $validatedParameters->with('id_token_encrypted_response_enc', $commandParameters->get('id_token_encrypted_response_enc'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);


439) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/IdTokenAlgorithmsRule.php:55    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.de0d995a367987dc5467a61fee686766.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ($commandParameters->has('id_token_encrypted_response_alg') && $commandParameters->has('id_token_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if ($commandParameters->has('id_token_encrypted_response_alg') && $commandParameters->has('id_token_encrypted_response_enc') || null !== $this->jweBuilder) {
             $this->checkAlgorithms('id_token_encrypted_response_alg', $commandParameters, $this->jweBuilder->getKeyEncryptionAlgorithmManager()->list());
             $this->checkAlgorithms('id_token_encrypted_response_enc', $commandParameters, $this->jweBuilder->getContentEncryptionAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('id_token_encrypted_response_alg', $commandParameters->get('id_token_encrypted_response_alg'));
             $validatedParameters = $validatedParameters->with('id_token_encrypted_response_enc', $commandParameters->get('id_token_encrypted_response_enc'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);


440) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/IdTokenAlgorithmsRule.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c2fbe097c340ca3ac5a8c4c29c48fd5b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('id_token_signed_response_alg')) {
             $this->checkAlgorithms('id_token_signed_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('id_token_signed_response_alg', $commandParameters->get('id_token_signed_response_alg'));
         }
         if ($commandParameters->has('id_token_encrypted_response_alg') && $commandParameters->has('id_token_encrypted_response_enc') && null !== $this->jweBuilder) {


441) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/IdTokenAlgorithmsRule.php:73    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1080ad92bf3e101c4d2adf2c235ec693.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $algorithm = $commandParameters->get($parameter);
-        if (!is_string($algorithm) || !in_array($algorithm, $allowedAlgorithms)) {
+        if (is_string($algorithm) || !in_array($algorithm, $allowedAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The parameter "%s" must be an algorithm supported by this server. Please choose one of the following value(s): %s', $parameter, implode(', ', $allowedAlgorithms)));
         }
     }
 }



442) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/IdTokenAlgorithmsRule.php:73    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.585ab7080ff159a254069e226b14f451.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $algorithm = $commandParameters->get($parameter);
-        if (!is_string($algorithm) || !in_array($algorithm, $allowedAlgorithms)) {
+        if (!is_string($algorithm) || in_array($algorithm, $allowedAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The parameter "%s" must be an algorithm supported by this server. Please choose one of the following value(s): %s', $parameter, implode(', ', $allowedAlgorithms)));
         }
     }
 }



443) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/IdTokenAlgorithmsRule.php:73    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.506f97d5c37399fcb363c9b1dd7919e1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $algorithm = $commandParameters->get($parameter);
-        if (!is_string($algorithm) || !in_array($algorithm, $allowedAlgorithms)) {
+        if (!is_string($algorithm) && !in_array($algorithm, $allowedAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The parameter "%s" must be an algorithm supported by this server. Please choose one of the following value(s): %s', $parameter, implode(', ', $allowedAlgorithms)));
         }
     }
 }



444) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:27    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8d344af157d17b0accdf6c11d9ac93c6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
-        if (!$validatedParameters->has('response_types') || empty($validatedParameters->get('response_types'))) {
+        if ($validatedParameters->has('response_types') || empty($validatedParameters->get('response_types'))) {
             return $validatedParameters;
         }
         if (!$commandParameters->has('redirect_uris')) {
             throw new \InvalidArgumentException('The parameter "redirect_uris" is mandatory when response types are used.');
         }
         $redirectUris = $commandParameters->get('redirect_uris');


445) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:27    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6601bdb0fb89f51557b825c6114927c6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
-        if (!$validatedParameters->has('response_types') || empty($validatedParameters->get('response_types'))) {
+        if (!$validatedParameters->has('response_types') && empty($validatedParameters->get('response_types'))) {
             return $validatedParameters;
         }
         if (!$commandParameters->has('redirect_uris')) {
             throw new \InvalidArgumentException('The parameter "redirect_uris" is mandatory when response types are used.');
         }
         $redirectUris = $commandParameters->get('redirect_uris');


446) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:30    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9975065a417cfdd514e65478239b1ce8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (!$commandParameters->has('redirect_uris')) {
+        if ($commandParameters->has('redirect_uris')) {
             throw new \InvalidArgumentException('The parameter "redirect_uris" is mandatory when response types are used.');
         }
         $redirectUris = $commandParameters->get('redirect_uris');
         $application_type = $validatedParameters->has('application_type') ? $validatedParameters->get('application_type') : 'web';
         $response_types = $validatedParameters->has('response_types') ? $validatedParameters->get('response_types') : [];
         $uses_implicit_grant_type = false;


447) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:36    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.268e2453be53cd031bf1b9077a8e1d6d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $response_types = $validatedParameters->has('response_types') ? $validatedParameters->get('response_types') : [];
-        $uses_implicit_grant_type = false;
+        $uses_implicit_grant_type = true;
         foreach ($response_types as $response_type) {
             $types = explode(' ', $response_type);
             if (in_array('token', $types)) {
                 $uses_implicit_grant_type = true;
                 break;
             }


448) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:40    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5e2f7d32ed317155e8acff260c8f3ec4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             if (in_array('token', $types)) {
-                $uses_implicit_grant_type = true;
+                $uses_implicit_grant_type = false;
                 break;
             }
         }
         $this->checkAllUris($redirectUris, $application_type, $uses_implicit_grant_type);
         $validatedParameters = $validatedParameters->with('redirect_uris', $redirectUris);
         return $validatedParameters;


449) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:42    [M] Break_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5b59c4ec9b01e5029d46d5de6c9ca679.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $uses_implicit_grant_type = true;
-                break;
+                continue;
             }
         }
         $this->checkAllUris($redirectUris, $application_type, $uses_implicit_grant_type);
         $validatedParameters = $validatedParameters->with('redirect_uris', $redirectUris);
         return $validatedParameters;
     }


450) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:37    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c6fbb93d66ad55d51b12966ad46d98b1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $uses_implicit_grant_type = false;
-        foreach ($response_types as $response_type) {
+        foreach (array() as $response_type) {
             $types = explode(' ', $response_type);
             if (in_array('token', $types)) {
                 $uses_implicit_grant_type = true;
                 break;
             }
         }


451) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:24    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8ab32b669b0bd9b4e9a63fef2089893d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
         if (!$validatedParameters->has('response_types') || empty($validatedParameters->get('response_types'))) {
             return $validatedParameters;
         }
         if (!$commandParameters->has('redirect_uris')) {


452) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:58    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0aefd167d710a349d04a211ad1cb2fed.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!is_array($value)) {
+        if (is_array($value)) {
             throw new \InvalidArgumentException('The parameter "redirect_uris" must be a list of URI or URN.');
         }
         foreach ($value as $redirectUri) {
             if (!is_string($redirectUri)) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must be a list of URI or URN.');
             }


453) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:62    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dad9e188acbc751d00eb8bffcc3d8b35.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($value as $redirectUri) {
-            if (!is_string($redirectUri)) {
+            if (is_string($redirectUri)) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must be a list of URI or URN.');
             }
             $this->checkUri($redirectUri, $application_type, $uses_implicit_grant_type);
         }
     }
     /**


454) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:61    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4a8eaebbc1dce0ff0ee3ad2b8a43c03d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        foreach ($value as $redirectUri) {
+        foreach (array() as $redirectUri) {
             if (!is_string($redirectUri)) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must be a list of URI or URN.');
             }
             $this->checkUri($redirectUri, $application_type, $uses_implicit_grant_type);
         }
     }


455) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:76    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8becf8f213bc61a9a8bf3ea9dbbe9d42.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ('urn:' === mb_substr($uri, 0, 4, '8bit')) {
+        if ('urn:' === mb_substr($uri, 1, 4, '8bit')) {
             $this->checkUrn($uri);
         } else {
             $this->checkUrl($uri, $application_type, $uses_implicit_grant_type);
         }
     }
     /**


456) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:76    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8d20833c217e89de3a1281b59c6c659c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ('urn:' === mb_substr($uri, 0, 4, '8bit')) {
+        if ('urn:' !== mb_substr($uri, 0, 4, '8bit')) {
             $this->checkUrn($uri);
         } else {
             $this->checkUrl($uri, $application_type, $uses_implicit_grant_type);
         }
     }
     /**


457) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:91    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.586a24972c45e254473812d2d7141372.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         // If URI is not a valid URI, return false
-        if (!filter_var($url, FILTER_VALIDATE_URL)) {
+        if (filter_var($url, FILTER_VALIDATE_URL)) {
             throw new \InvalidArgumentException('The parameter "redirect_uris" must be a list of URI or URN.');
         }
         $parsed = parse_url($url);
         // Checks for path traversal (e.g. http://foo.bar/redirect/../bad/url)
         if (isset($parsed['path'])) {
             $path = urldecode($parsed['path']);


458) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:108    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.675c223a3ee64a6bd3a20c41c25b618d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ('web' === $application_type && true === $uses_implicit_grant_type) {
+        if ('web' !== $application_type && true === $uses_implicit_grant_type) {
             if ('localhost' === $parsed['host']) {
                 throw new \InvalidArgumentException('The host "localhost" is not allowed for web applications that use the Implicit Grant Type.');
             }
             if ('https' !== $parsed['scheme']) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must only contain URIs with the HTTPS scheme for web applications that use the Implicit Grant Type.');
             }


459) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:108    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9b418ff4b777dbb9d570b2fdf66d5ca8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ('web' === $application_type && true === $uses_implicit_grant_type) {
+        if ('web' === $application_type && false === $uses_implicit_grant_type) {
             if ('localhost' === $parsed['host']) {
                 throw new \InvalidArgumentException('The host "localhost" is not allowed for web applications that use the Implicit Grant Type.');
             }
             if ('https' !== $parsed['scheme']) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must only contain URIs with the HTTPS scheme for web applications that use the Implicit Grant Type.');
             }


460) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:108    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cd2a258861c56408eb5382e6339910f9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ('web' === $application_type && true === $uses_implicit_grant_type) {
+        if ('web' === $application_type && true !== $uses_implicit_grant_type) {
             if ('localhost' === $parsed['host']) {
                 throw new \InvalidArgumentException('The host "localhost" is not allowed for web applications that use the Implicit Grant Type.');
             }
             if ('https' !== $parsed['scheme']) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must only contain URIs with the HTTPS scheme for web applications that use the Implicit Grant Type.');
             }


461) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:108    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f7368c2ae9e57264b02d295be649ed18.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ('web' === $application_type && true === $uses_implicit_grant_type) {
+        if ('web' === $application_type || true === $uses_implicit_grant_type) {
             if ('localhost' === $parsed['host']) {
                 throw new \InvalidArgumentException('The host "localhost" is not allowed for web applications that use the Implicit Grant Type.');
             }
             if ('https' !== $parsed['scheme']) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must only contain URIs with the HTTPS scheme for web applications that use the Implicit Grant Type.');
             }


462) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:109    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.905e874793ff3c58a794afedfd0c3f8c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         if ('web' === $application_type && true === $uses_implicit_grant_type) {
-            if ('localhost' === $parsed['host']) {
+            if ('localhost' !== $parsed['host']) {
                 throw new \InvalidArgumentException('The host "localhost" is not allowed for web applications that use the Implicit Grant Type.');
             }
             if ('https' !== $parsed['scheme']) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must only contain URIs with the HTTPS scheme for web applications that use the Implicit Grant Type.');
             }
         }


463) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:112    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4a2858313b2efc3d3b6169d6da08579a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if ('https' !== $parsed['scheme']) {
+            if ('https' === $parsed['scheme']) {
                 throw new \InvalidArgumentException('The parameter "redirect_uris" must only contain URIs with the HTTPS scheme for web applications that use the Implicit Grant Type.');
             }
         }
     }
     /**
      * @param string $urn


464) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:88    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cc8947bb56f4d39c2f12ce7a993172bf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkUrl(string $url, string $application_type, bool $uses_implicit_grant_type)
+    protected function checkUrl(string $url, string $application_type, bool $uses_implicit_grant_type)
     {
         // If URI is not a valid URI, return false
         if (!filter_var($url, FILTER_VALIDATE_URL)) {
             throw new \InvalidArgumentException('The parameter "redirect_uris" must be a list of URI or URN.');
         }
         $parsed = parse_url($url);


465) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:123    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5d2f0c9f306bb1e0259a295b52a7dd0d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 !== preg_match('/^urn:[a-z0-9][a-z0-9-]{0,31}:([a-z0-9()+,-.:=@;$_!*\']|%(0[1-9a-f]|[1-9a-f][0-9a-f]))+$/i', $urn)) {
+        if (0 !== preg_match('/^urn:[a-z0-9][a-z0-9-]{0,31}:([a-z0-9()+,-.:=@;$_!*\']|%(0[1-9a-f]|[1-9a-f][0-9a-f]))+$/i', $urn)) {
             throw new \InvalidArgumentException('The parameter "redirect_uris" must be a list of URI or URN.');
         }
     }
 }



466) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RedirectionUriRule.php:123    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.541daa4a824f7b2c7a07fae3bcca20ac.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 !== preg_match('/^urn:[a-z0-9][a-z0-9-]{0,31}:([a-z0-9()+,-.:=@;$_!*\']|%(0[1-9a-f]|[1-9a-f][0-9a-f]))+$/i', $urn)) {
+        if (1 === preg_match('/^urn:[a-z0-9][a-z0-9-]{0,31}:([a-z0-9()+,-.:=@;$_!*\']|%(0[1-9a-f]|[1-9a-f][0-9a-f]))+$/i', $urn)) {
             throw new \InvalidArgumentException('The parameter "redirect_uris" must be a list of URI or URN.');
         }
     }
 }



467) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RequestUriRule.php:27    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7123e486eda1f29bd3507546e063863f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
-        if (!$validatedParameters->has('response_types') || empty($validatedParameters->get('response_types'))) {
+        if ($validatedParameters->has('response_types') || empty($validatedParameters->get('response_types'))) {
             return $validatedParameters;
         }
         if ($commandParameters->has('request_uris')) {
             $this->checkAllUris($commandParameters->get('request_uris'));
             $validatedParameters = $validatedParameters->with('request_uris', $commandParameters->get('request_uris'));
         }


468) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RequestUriRule.php:27    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4f1de398246431002c22306d262e275c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
-        if (!$validatedParameters->has('response_types') || empty($validatedParameters->get('response_types'))) {
+        if (!$validatedParameters->has('response_types') && empty($validatedParameters->get('response_types'))) {
             return $validatedParameters;
         }
         if ($commandParameters->has('request_uris')) {
             $this->checkAllUris($commandParameters->get('request_uris'));
             $validatedParameters = $validatedParameters->with('request_uris', $commandParameters->get('request_uris'));
         }


469) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RequestUriRule.php:24    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7436be0a5ef81881df0ebb1cba618d04.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
         if (!$validatedParameters->has('response_types') || empty($validatedParameters->get('response_types'))) {
             return $validatedParameters;
         }
         if ($commandParameters->has('request_uris')) {


470) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RequestUriRule.php:43    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.48c6018029e9c12aef013a8201ae6918.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!is_array($value)) {
+        if (is_array($value)) {
             throw new \InvalidArgumentException('The parameter "request_uris" must be a list of URI.');
         }
         foreach ($value as $redirectUri) {
             if (!is_string($redirectUri) || !filter_var($redirectUri, FILTER_VALIDATE_URL)) {
                 throw new \InvalidArgumentException('The parameter "request_uris" must be a list of URI.');
             }


471) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RequestUriRule.php:47    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3e7536e7cc22d05768920c1ac21fd8c5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($value as $redirectUri) {
-            if (!is_string($redirectUri) || !filter_var($redirectUri, FILTER_VALIDATE_URL)) {
+            if (is_string($redirectUri) || !filter_var($redirectUri, FILTER_VALIDATE_URL)) {
                 throw new \InvalidArgumentException('The parameter "request_uris" must be a list of URI.');
             }
         }
     }
 }



472) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RequestUriRule.php:47    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e77fefa1b09973d58e5d501e13a8fa70.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($value as $redirectUri) {
-            if (!is_string($redirectUri) || !filter_var($redirectUri, FILTER_VALIDATE_URL)) {
+            if (!is_string($redirectUri) || filter_var($redirectUri, FILTER_VALIDATE_URL)) {
                 throw new \InvalidArgumentException('The parameter "request_uris" must be a list of URI.');
             }
         }
     }
 }



473) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RequestUriRule.php:47    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a9d1602925ef386979213694b46dd7dc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($value as $redirectUri) {
-            if (!is_string($redirectUri) || !filter_var($redirectUri, FILTER_VALIDATE_URL)) {
+            if (!is_string($redirectUri) && !filter_var($redirectUri, FILTER_VALIDATE_URL)) {
                 throw new \InvalidArgumentException('The parameter "request_uris" must be a list of URI.');
             }
         }
     }
 }



474) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RequestUriRule.php:46    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.56ab10154e41299f98157195d4593288.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        foreach ($value as $redirectUri) {
+        foreach (array() as $redirectUri) {
             if (!is_string($redirectUri) || !filter_var($redirectUri, FILTER_VALIDATE_URL)) {
                 throw new \InvalidArgumentException('The parameter "request_uris" must be a list of URI.');
             }
         }
     }
 }


475) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ResponseTypesRule.php:42    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6760cf2b8b1b810da1f7a3511c676d89.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$commandParameters->has('response_types')) {
+        if ($commandParameters->has('response_types')) {
             $commandParameters = $commandParameters->with('response_types', []);
         }
         $this->checkResponseTypes($commandParameters);
         $validatedParameters = $validatedParameters->with('response_types', $commandParameters->get('response_types'));
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
         $this->checkGrantTypes($validatedParameters);


476) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ResponseTypesRule.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2c096fdf8afd24a9cb2781cd65439a7e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if (!$commandParameters->has('response_types')) {
             $commandParameters = $commandParameters->with('response_types', []);
         }
         $this->checkResponseTypes($commandParameters);
         $validatedParameters = $validatedParameters->with('response_types', $commandParameters->get('response_types'));


477) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ResponseTypesRule.php:61    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9578c26318ece245996faea4a851d9cf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!is_array($parameters->get('response_types'))) {
+        if (is_array($parameters->get('response_types'))) {
             throw new \InvalidArgumentException('The parameter "response_types" must be an array of strings.');
         }
         foreach ($parameters->get('response_types') as $grant_type) {
             if (!is_string($grant_type)) {
                 throw new \InvalidArgumentException('The parameter "response_types" must be an array of strings.');
             }


478) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ResponseTypesRule.php:65    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.12f1c447493c4209b5dc13462a97b547.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($parameters->get('response_types') as $grant_type) {
-            if (!is_string($grant_type)) {
+            if (is_string($grant_type)) {
                 throw new \InvalidArgumentException('The parameter "response_types" must be an array of strings.');
             }
         }
     }
     /**
      * @param DataBag $parameters


479) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ResponseTypesRule.php:64    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.470802a4fc40e71947c666fd8dffa921.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        foreach ($parameters->get('response_types') as $grant_type) {
+        foreach (array() as $grant_type) {
             if (!is_string($grant_type)) {
                 throw new \InvalidArgumentException('The parameter "response_types" must be an array of strings.');
             }
         }
     }
     /**


480) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ResponseTypesRule.php:83    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b27598df01decb2f8aea1f6dc7bae0d0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $diff = array_diff($type->getAssociatedGrantTypes(), $grantTypes);
-                if (!empty($diff)) {
+                if (empty($diff)) {
                     throw new \InvalidArgumentException(sprintf('The response type "%s" requires the following grant type(s): %s.', $responseType, implode(', ', $diff)));
                 }
             }
         }
     }
 }


481) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ResponseTypesRule.php:81    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.394d13aeba48f52a6901a45d1ea2e4cb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $types = $this->responseTypeManager->find($responseType);
-            foreach ($types as $type) {
+            foreach (array() as $type) {
                 $diff = array_diff($type->getAssociatedGrantTypes(), $grantTypes);
                 if (!empty($diff)) {
                     throw new \InvalidArgumentException(sprintf('The response type "%s" requires the following grant type(s): %s.', $responseType, implode(', ', $diff)));
                 }
             }
         }


482) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ResponseTypesRule.php:79    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b975673e8bbabd47987fdbbcd98f013a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $grantTypes = $parameters->has('grant_types') ? $parameters->get('grant_types') : [];
-        foreach ($parameters->get('response_types') as $responseType) {
+        foreach (array() as $responseType) {
             $types = $this->responseTypeManager->find($responseType);
             foreach ($types as $type) {
                 $diff = array_diff($type->getAssociatedGrantTypes(), $grantTypes);
                 if (!empty($diff)) {
                     throw new \InvalidArgumentException(sprintf('The response type "%s" requires the following grant type(s): %s.', $responseType, implode(', ', $diff)));
                 }


483) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RuleManager.php:56    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ae08df92c4fd0bba8a70e90ccb3a1d03.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        return call_user_func($this->callableForNextRule(0), $clientId, $commandParameters, DataBag::create([]));
+        return call_user_func($this->callableForNextRule(1), $clientId, $commandParameters, DataBag::create([]));
     }
     /**
      * @param int $index
      *
      * @return \Closure
      */


484) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RuleManager.php:54    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dc11b230c033d587c9e15cb4d8979dd9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters) : DataBag
     {
         return call_user_func($this->callableForNextRule(0), $clientId, $commandParameters, DataBag::create([]));
     }
     /**
      * @param int $index
      *


485) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RuleManager.php:66    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f0dd650bf80b9e8d6f45dc53762ebed5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!isset($this->rules[$index])) {
+        if (isset($this->rules[$index])) {
             return function (ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters) : DataBag {
                 return $validatedParameters;
             };
         }
         $rule = $this->rules[$index];
         return function (ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters) use($rule, $index) : DataBag {


486) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopePolicyDefaultRule.php:28    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c65d604ba20d71e3e2636e49b9f16290.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $defaultScope = $commandParameters->get('default_scope');
-            if (!is_string($defaultScope)) {
+            if (is_string($defaultScope)) {
                 throw new \InvalidArgumentException('The "default_scope" parameter must be a string.');
             }
             if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
                 throw new \InvalidArgumentException('Invalid characters found in the "default_scope" parameter.');
             }
             $validatedParameters = $validatedParameters->with('default_scope', $commandParameters->get('default_scope'));


487) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopePolicyDefaultRule.php:31    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.589e4c07ff46e76f4f495d9ee512202e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
+            if (0 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
                 throw new \InvalidArgumentException('Invalid characters found in the "default_scope" parameter.');
             }
             $validatedParameters = $validatedParameters->with('default_scope', $commandParameters->get('default_scope'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);
     }


488) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopePolicyDefaultRule.php:31    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5ae9180a5c58148801f39e4aea9f32b0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
+            if (1 === preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
                 throw new \InvalidArgumentException('Invalid characters found in the "default_scope" parameter.');
             }
             $validatedParameters = $validatedParameters->with('default_scope', $commandParameters->get('default_scope'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);
     }


489) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopePolicyDefaultRule.php:24    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.26a19fd9e8da4a545b163a28a0a055b7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('default_scope')) {
             $defaultScope = $commandParameters->get('default_scope');
             if (!is_string($defaultScope)) {
                 throw new \InvalidArgumentException('The "default_scope" parameter must be a string.');
             }


490) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopePolicyRule.php:42    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e7468ba970a5c0866221aba040f5f594.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $policy = $commandParameters->get('scope_policy');
-            if (!is_string($policy)) {
+            if (is_string($policy)) {
                 throw new \InvalidArgumentException('The parameter "scope_policy" must be a string.');
             }
             if (!$this->scopePolicyManager->has($policy)) {
                 throw new \InvalidArgumentException(sprintf('The scope policy "%s" is not supported.', $policy));
             }
             $validatedParameters = $validatedParameters->with('scope_policy', $commandParameters->get('scope_policy'));


491) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopePolicyRule.php:45    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9c66535b7a30234a7cd1cd6a6b9299c4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (!$this->scopePolicyManager->has($policy)) {
+            if ($this->scopePolicyManager->has($policy)) {
                 throw new \InvalidArgumentException(sprintf('The scope policy "%s" is not supported.', $policy));
             }
             $validatedParameters = $validatedParameters->with('scope_policy', $commandParameters->get('scope_policy'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);
     }


492) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopePolicyRule.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f02758493f3daed09d389ed7fd2ac4cd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('scope_policy')) {
             $policy = $commandParameters->get('scope_policy');
             if (!is_string($policy)) {
                 throw new \InvalidArgumentException('The parameter "scope_policy" must be a string.');
             }


493) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DataBag/DataBag.php:33    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d77a77a29a0528ef82c77d746f58abb2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(array $parameters) : self
+    protected static function create(array $parameters) : self
     {
         return new self($parameters);
     }
     /**
      * @param string $key
      *


494) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DataBag/DataBag.php:43    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fa9b756de43b3191993994b9dc075d8a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function has(string $key) : bool
+    protected function has(string $key) : bool
     {
         return array_key_exists($key, $this->parameters);
     }
     /**
      * @param string     $key
      * @param mixed|null $default


495) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DataBag/DataBag.php:54    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e9463ebae446f6af2b38d03690dc763e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function get(string $key, $default = null)
+    protected function get(string $key, $default = null)
     {
         if ($this->has($key)) {
             return $this->parameters[$key];
         }
         return $default;
     }


496) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DataBag/DataBag.php:69    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8813ab7ab317ffb27b5e2cf4230c8330.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function with(string $key, $value) : self
+    protected function with(string $key, $value) : self
     {
         $clone = clone $this;
         $clone->parameters[$key] = $value;
         return $clone;
     }
     /**


497) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DataBag/DataBag.php:84    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f275ca2e3829051b57cca8d0ad1cb3fd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->has($key)) {
+        if ($this->has($key)) {
             return $this;
         }
         $clone = clone $this;
         unset($clone->parameters[$key]);
         return $clone;
     }


498) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DataBag/DataBag.php:82    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cfdb2c070b8febb448f870f2918059d8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function without(string $key) : self
+    protected function without(string $key) : self
     {
         if (!$this->has($key)) {
             return $this;
         }
         $clone = clone $this;
         unset($clone->parameters[$key]);


499) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DataBag/DataBag.php:96    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9c726d8d6452ca50652943f0642b3128.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         return $this->parameters;
     }
     /**
      * {@inheritdoc}
      */


500) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DataBag/DataBag.php:104    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1111f29bc8a27d57270d33bc6503d2f3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         return $this->all();
     }
 }



501) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainConverter.php:40    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b1845906cc9cde0247c2ca2dafd5ed28.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        $this->options = JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE;
+        $this->options = JSON_UNESCAPED_SLASHES & JSON_UNESCAPED_UNICODE;
         $loaderManager = new LoaderManager(['https' => $domainUriLoader]);
         $this->dereferencer = new Dereferencer();
         $this->dereferencer->setLoaderManager($loaderManager);
     }
     /**
      * @param string $jsonData


502) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainConverter.php:56    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f206b5c85888daaf6483c909f0733e01.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         try {
-            $decoded = json_decode($jsonData, false, $this->options);
+            $decoded = json_decode($jsonData, true, $this->options);
             if (!$decoded instanceof \stdClass) {
                 throw new \RuntimeException('Unable to decode');
             }
             if (!property_exists($decoded, '$schema')) {
                 throw new \InvalidArgumentException('The object is not a valid Json object from the domain.');
             }


503) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainConverter.php:57    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d2f26ca23e537db229d9f91b742b24e7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $decoded = json_decode($jsonData, false, $this->options);
-            if (!$decoded instanceof \stdClass) {
+            if ($decoded instanceof \stdClass) {
                 throw new \RuntimeException('Unable to decode');
             }
             if (!property_exists($decoded, '$schema')) {
                 throw new \InvalidArgumentException('The object is not a valid Json object from the domain.');
             }
             $schema = $this->dereferencer->dereference($decoded->{'$schema'});


504) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainConverter.php:60    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.68f38b32f9370211375115b15c5d55c2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (!property_exists($decoded, '$schema')) {
+            if (property_exists($decoded, '$schema')) {
                 throw new \InvalidArgumentException('The object is not a valid Json object from the domain.');
             }
             $schema = $this->dereferencer->dereference($decoded->{'$schema'});
             $validator = new Validator($decoded, $schema);
             if ($validator->fails()) {
                 throw new \InvalidArgumentException('The domain object cannot be verified with the selected schema.');


505) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainConverter.php:72    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c3a9c2babc53e2d0c7ab14750317264a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $class = $decoded->type;
-            if (!class_exists($class)) {
+            if (class_exists($class)) {
                 throw new \InvalidArgumentException(sprintf('Unsupported class "%s"', $class));
             }
             $domainObject = $class::createFromJson($decoded);
         } catch (\Exception $e) {
             throw new OAuth2Exception(500, OAuth2Exception::ERROR_INTERNAL, 'The server encountered and internal error.', [], $e);
         }


506) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainConverter.php:53    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.373576acdc6272cfd1608fc8424ff586.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function fromJson(string $jsonData) : DomainObject
+    protected function fromJson(string $jsonData) : DomainObject
     {
         try {
             $decoded = json_decode($jsonData, false, $this->options);
             if (!$decoded instanceof \stdClass) {
                 throw new \RuntimeException('Unable to decode');
             }


507) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainConverter.php:90    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9bfb635d4c8ffd95076d37fb38ef6100.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function toJson(DomainObject $domainObject) : string
+    protected function toJson(DomainObject $domainObject) : string
     {
         try {
             $jsonData = (object) $domainObject->jsonSerialize();
             $schema = $this->dereferencer->dereference($jsonData->{'$schema'});
             $validator = new Validator($jsonData, $schema);
             if ($validator->fails()) {


508) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainUriLoader.php:41    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ba13f045d4b00f00081a6c7878da684b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(string $schema, string $filename)
+    protected function add(string $schema, string $filename)
     {
         $this->mappings[$schema] = $filename;
     }
     public function load($path)
     {
         if (array_key_exists($path, $this->mappings)) {


509) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainUriLoader.php:51    [M] FunctionCall
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.acb4d7d03490e15d1fe6b938f4bfe73b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $content = file_get_contents($this->mappings[$path]);
-            return json_decode($content);
+            json_decode($content);
+            return null;
         }
         throw SchemaLoadingException::notFound(sprintf('The schema "%s" is not supported.', $path));
     }
 }



510) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/DomainUriLoader.php:46    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b202bf84894c10cbfb6e96c34ad4f1f9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     }
-    public function load($path)
+    protected function load($path)
     {
         if (array_key_exists($path, $this->mappings)) {
             $content = file_get_contents($this->mappings[$path]);
             return json_decode($content);
         }
         throw SchemaLoadingException::notFound(sprintf('The schema "%s" is not supported.', $path));


511) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:40    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9998521e573a0bb047ff46cd5fd1e425.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $recordedOn || null === $eventId) {
+        if (null !== $recordedOn || null === $eventId) {
             $this->recordedOn = new \DateTimeImmutable();
             $this->eventId = EventId::create(Uuid::uuid4()->toString());
         } else {
             $this->recordedOn = $recordedOn;
             $this->eventId = $eventId;
         }


512) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:40    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7c53cb6b024b1acebd337b866c1f7843.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $recordedOn || null === $eventId) {
+        if (null === $recordedOn || null !== $eventId) {
             $this->recordedOn = new \DateTimeImmutable();
             $this->eventId = EventId::create(Uuid::uuid4()->toString());
         } else {
             $this->recordedOn = $recordedOn;
             $this->eventId = $eventId;
         }


513) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:40    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bdd87bfb17a0bb75901974ed8bd69e84.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $recordedOn || null === $eventId) {
+        if (null === $recordedOn && null === $eventId) {
             $this->recordedOn = new \DateTimeImmutable();
             $this->eventId = EventId::create(Uuid::uuid4()->toString());
         } else {
             $this->recordedOn = $recordedOn;
             $this->eventId = $eventId;
         }


514) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:38    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0ef00a39cc0d57a763370101de78e46b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         if (null === $recordedOn || null === $eventId) {
             $this->recordedOn = new \DateTimeImmutable();
             $this->eventId = EventId::create(Uuid::uuid4()->toString());
         } else {
             $this->recordedOn = $recordedOn;


515) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:78    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7edbc18dd855962c342ce279efc95d54.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getType() : string
+    protected function getType() : string
     {
         return get_class($this);
     }
     /**
      * {@inheritdoc}
      */


516) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/EventId.php:25    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9293776934d86da66d04b2f3de599aa5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



517) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Id/Id.php:28    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2f9f416bf92a405e3b5d01ae6b7269b2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(string $value)
+    private function __construct(string $value)
     {
         $this->value = $value;
     }
     /**
      * @return string
      */


518) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Id/Id.php:36    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5c6c41b8e3beb4a48920935758e87b35.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getValue() : string
+    protected function getValue() : string
     {
         return $this->value;
     }
     /**
      * {@inheritdoc}
      */


519) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Id/Id.php:52    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e33d7989ebb13fa02d5bd6ab87b014f0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         return $this->__toString();
     }
 }



520) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/ResourceServer/ResourceServerId.php:25    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c808bff9347b3c77fa1d559ccc20aaf9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



521) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Exception.php:87    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.465716b41752e502350e0993a437f1c4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->data['error'] = $error;
-        if (null !== $errorDescription) {
+        if (null === $errorDescription) {
             $this->data['error_description'] = $errorDescription;
         }
         parent::__construct('', $code, $previous);
     }
     /**
      * @return array


522) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Exception.php:96    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.de11f11f4f39ed72965f6ebf58911264.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getData() : array
+    protected function getData() : array
     {
         return $this->data;
     }
 }



523) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/Checker.php:24    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4c1ead476a2e7d1fb313b971e12d9dc5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 < count(array_keys($scopes, $scope))) {
+        if (0 < count(array_keys($scopes, $scope))) {
             throw new \InvalidArgumentException(sprintf('Scope "%s" appears more than once.', $scope));
         }
     }
     /**
      * @param string $scope
      *


524) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/Checker.php:24    [M] LessThan
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.42d8d6b0951e4c56a291b82a960963ba.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 < count(array_keys($scopes, $scope))) {
+        if (1 <= count(array_keys($scopes, $scope))) {
             throw new \InvalidArgumentException(sprintf('Scope "%s" appears more than once.', $scope));
         }
     }
     /**
      * @param string $scope
      *


525) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/Checker.php:24    [M] LessThanNegotiation
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d69fecfd37d0437f7034254980008e15.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 < count(array_keys($scopes, $scope))) {
+        if (1 >= count(array_keys($scopes, $scope))) {
             throw new \InvalidArgumentException(sprintf('Scope "%s" appears more than once.', $scope));
         }
     }
     /**
      * @param string $scope
      *


526) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/Checker.php:22    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.33c8670f2b9ebc5dca9967539d532c50.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function checkUsedOnce(string $scope, array $scopes)
+    protected static function checkUsedOnce(string $scope, array $scopes)
     {
         if (1 < count(array_keys($scopes, $scope))) {
             throw new \InvalidArgumentException(sprintf('Scope "%s" appears more than once.', $scope));
         }
     }
     /**


527) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/Checker.php:36    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7f86d29ff8a36b3c54d031bda0454fc2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $scope)) {
+        if (0 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $scope)) {
             throw new \InvalidArgumentException('Scope contains illegal characters.');
         }
     }
 }



528) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/Checker.php:36    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b7bf9a047985468c0c4bda4f6c6ff01d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $scope)) {
+        if (1 === preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $scope)) {
             throw new \InvalidArgumentException('Scope contains illegal characters.');
         }
     }
 }



529) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/Checker.php:34    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6fe240e8173045e157b68d529e842643.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function checkCharset(string $scope)
+    protected static function checkCharset(string $scope)
     {
         if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $scope)) {
             throw new \InvalidArgumentException('Scope contains illegal characters.');
         }
     }
 }


530) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/DefaultScopePolicy.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8df55d08cd47963c9ca9de7b92ca31c8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return 'default';
     }
     /**
      * {@inheritdoc}
      */


531) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/DefaultScopePolicy.php:46    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b0ebb8ed0e517e9531bdb6e991053eb9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function applyScopePolicy(array $scope, Client $client) : array
+    protected function applyScopePolicy(array $scope, Client $client) : array
     {
         return $client->has('default_scope') ? explode(' ', $client->get('default_scope')) : $this->getDefaultScopes();
     }
     /**
      * @return string[]
      */


532) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ErrorScopePolicy.php:23    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4d19d9af80ee708fbb2b2008a890b0a2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return 'error';
     }
     /**
      * {@inheritdoc}
      */


533) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ErrorScopePolicy.php:31    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dbcc2a90665013fa11efcbd266061cb2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function applyScopePolicy(array $scope, Client $client) : array
+    protected function applyScopePolicy(array $scope, Client $client) : array
     {
         throw new \RuntimeException('No scope was requested.');
     }
 }



534) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/NoScopePolicy.php:23    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.631590d0cfe9e298b24daa8523b4d4b0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return 'none';
     }
     /**
      * {@inheritdoc}
      */


535) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/NoScopePolicy.php:31    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f10092a1d83dcc9727fcc17624ab3a8b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function applyScopePolicy(array $scope, Client $client) : array
+    protected function applyScopePolicy(array $scope, Client $client) : array
     {
         return $scope;
     }
 }



536) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:41    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.78ada8d65e6465a786f0183f188b8f3e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->scopePolicies[$name] = $scopePolicy;
-        if (true === $isDefault || 1 === count($this->scopePolicies)) {
+        if (false === $isDefault || 1 === count($this->scopePolicies)) {
             $this->defaultScopePolicy = $name;
         }
         return $this;
     }
     /**
      * @param array  $scope


537) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:41    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bd8547fe7d0db01cc32fa383e06ce89d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->scopePolicies[$name] = $scopePolicy;
-        if (true === $isDefault || 1 === count($this->scopePolicies)) {
+        if (true !== $isDefault || 1 === count($this->scopePolicies)) {
             $this->defaultScopePolicy = $name;
         }
         return $this;
     }
     /**
      * @param array  $scope


538) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:41    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.84992a74537cc2d0ede318078e972dd8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->scopePolicies[$name] = $scopePolicy;
-        if (true === $isDefault || 1 === count($this->scopePolicies)) {
+        if (true === $isDefault || 0 === count($this->scopePolicies)) {
             $this->defaultScopePolicy = $name;
         }
         return $this;
     }
     /**
      * @param array  $scope


539) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:41    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.24290f2f2e1bb5370458128b609c3e0e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->scopePolicies[$name] = $scopePolicy;
-        if (true === $isDefault || 1 === count($this->scopePolicies)) {
+        if (true === $isDefault || 1 !== count($this->scopePolicies)) {
             $this->defaultScopePolicy = $name;
         }
         return $this;
     }
     /**
      * @param array  $scope


540) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:41    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c7e301b6ea835983ec54b050730edc06.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->scopePolicies[$name] = $scopePolicy;
-        if (true === $isDefault || 1 === count($this->scopePolicies)) {
+        if (true === $isDefault && 1 === count($this->scopePolicies)) {
             $this->defaultScopePolicy = $name;
         }
         return $this;
     }
     /**
      * @param array  $scope


541) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:36    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e678624e10fae5d848b496cdaf5b1cd2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(ScopePolicy $scopePolicy, bool $isDefault = false) : self
+    protected function add(ScopePolicy $scopePolicy, bool $isDefault = false) : self
     {
         $name = $scopePolicy->name();
         $this->scopePolicies[$name] = $scopePolicy;
         if (true === $isDefault || 1 === count($this->scopePolicies)) {
             $this->defaultScopePolicy = $name;
         }


542) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:59    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.292b3678290ff5a445c49e87e65de3a7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $policy = $this->getForClient($client);
-            if (null !== $policy) {
+            if (null === $policy) {
                 return $policy->applyScopePolicy($scope, $client);
             }
         }
         return $scope;
     }
     /**


543) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:54    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8cf081dd534c7539e870a51cceee66c0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function apply(array $scope, Client $client) : array
+    protected function apply(array $scope, Client $client) : array
     {
         if (empty($scope)) {
             $policy = $this->getForClient($client);
             if (null !== $policy) {
                 return $policy->applyScopePolicy($scope, $client);
             }


544) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:70    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3b1261ef2e3a5e9e74b14631664ec3e2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         return array_keys($this->scopePolicies);
     }
     /**
      * @param string $scopePolicy
      *


545) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:80    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f1a69b8c7bb61758f0c45fc00a17a01b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function has(string $scopePolicy) : bool
+    protected function has(string $scopePolicy) : bool
     {
         return array_key_exists($scopePolicy, $this->scopePolicies);
     }
     /**
      * @param string $scopePolicyName
      *


546) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:92    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.828bd71b00099c3c1e13eb7d1146b059.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->has($scopePolicyName)) {
+        if ($this->has($scopePolicyName)) {
             throw new \InvalidArgumentException(sprintf('The scope policy with name "%s" is not supported', $scopePolicyName));
         }
         return $this->scopePolicies[$scopePolicyName];
     }
     /**
      * @return ScopePolicy|null


547) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:104    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.111b7717287cff5f33791050b0aa432d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->defaultScopePolicy) {
+        if (null !== $this->defaultScopePolicy) {
             return null;
         }
         return $this->scopePolicies[$this->defaultScopePolicy];
     }
     /**
      * @param Client $client


548) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:118    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.823f7da79164fcfaef677667250ee2cb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($client->has('scope_policy') && $this->has($client->get('scope_policy'))) {
+        if ($client->has('scope_policy') || $this->has($client->get('scope_policy'))) {
             $policyName = $client->get('scope_policy');
             return $this->get($policyName);
         }
         return $this->default();
     }
 }


549) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:71    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.60990b42474c5bec95d5635be21c1939.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct()
+    private function __construct()
     {
         $this->parameters = DataBag::create([]);
         $this->metadatas = DataBag::create([]);
     }
     /**
      * @return TokenId


550) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:85    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fbbe0c34df77d304c0f74565a5e95d54.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceOwnerId() : ResourceOwnerId
+    protected function getResourceOwnerId() : ResourceOwnerId
     {
         return $this->resourceOwnerId;
     }
     /**
      * @return \DateTimeImmutable
      */


551) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:93    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.113cc7dd0384e78e1e430f699642820a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : \DateTimeImmutable
+    protected function getExpiresAt() : \DateTimeImmutable
     {
         return $this->expiresAt;
     }
     /**
      * @return bool
      */


552) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:103    [M] LessThan
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4347b960502f156c4e586318cc05e0cb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        return $this->expiresAt->getTimestamp() < time();
+        return $this->expiresAt->getTimestamp() <= time();
     }
     /**
      * {@inheritdoc}
      */
     public function getExpiresIn() : int
     {


553) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:103    [M] LessThanNegotiation
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.89d7f5dc77e9f4c794dbd458168aeef9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        return $this->expiresAt->getTimestamp() < time();
+        return $this->expiresAt->getTimestamp() >= time();
     }
     /**
      * {@inheritdoc}
      */
     public function getExpiresIn() : int
     {


554) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:101    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.27fa288e5ee709d9e2f8267e039b5861.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function hasExpired() : bool
+    protected function hasExpired() : bool
     {
         return $this->expiresAt->getTimestamp() < time();
     }
     /**
      * {@inheritdoc}
      */


555) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:112    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4fd90daee1f65d68d5065efaf909aa10.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $expiresAt = $this->expiresAt;
-        if (null === $expiresAt) {
+        if (null !== $expiresAt) {
             return 0;
         }
         return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
     }
     /**
      * @return ClientId


556) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:116    [M] Minus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4173ea0da2e683eca4b80b93af8caf47.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
+        return $this->expiresAt->getTimestamp() + time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
     }
     /**
      * @return ClientId
      */
     public function getClientId() : ClientId
     {


557) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:116    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2ba767bef8eee49c74ead3de913a68c1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
+        return $this->expiresAt->getTimestamp() - time() < 1 ? 0 : $this->expiresAt->getTimestamp() - time();
     }
     /**
      * @return ClientId
      */
     public function getClientId() : ClientId
     {


558) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:116    [M] LessThan
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b811dacc484d1ce83acdf9a38e4dc396.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
+        return $this->expiresAt->getTimestamp() - time() <= 0 ? 0 : $this->expiresAt->getTimestamp() - time();
     }
     /**
      * @return ClientId
      */
     public function getClientId() : ClientId
     {


559) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:116    [M] LessThanNegotiation
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8efd02bd73acd758ff449536bb00a887.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
+        return $this->expiresAt->getTimestamp() - time() >= 0 ? 0 : $this->expiresAt->getTimestamp() - time();
     }
     /**
      * @return ClientId
      */
     public function getClientId() : ClientId
     {


560) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:116    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d260c8e322fb9147c20a9520e1d96eae.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
+        return $this->expiresAt->getTimestamp() - time() < 0 ? 1 : $this->expiresAt->getTimestamp() - time();
     }
     /**
      * @return ClientId
      */
     public function getClientId() : ClientId
     {


561) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:116    [M] Minus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.84b4426ac0e45a6776ad71d3e6834bd5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
+        return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() + time();
     }
     /**
      * @return ClientId
      */
     public function getClientId() : ClientId
     {


562) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:109    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ebb72dfb67d788e541fcdc6c10a06e04.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresIn() : int
+    protected function getExpiresIn() : int
     {
         $expiresAt = $this->expiresAt;
         if (null === $expiresAt) {
             return 0;
         }
         return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();


563) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:122    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9ac4bb0047d2d9a4330b18e4945d1cf1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @param string $scope
      *


564) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:140    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.539e7863be0a944f01eed02f3e5f4a68.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return DataBag
      */


565) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:148    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2caf0cb4d825a92fba43b1ec95193db6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @param string $key
      *


566) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:158    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e33ee38050bf40463f783299e8a36551.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function hasParameter(string $key) : bool
+    protected function hasParameter(string $key) : bool
     {
         return $this->parameters->has($key);
     }
     /**
      * @return bool
      */


567) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:166    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.61fa7973600900c98a9e018656cb922e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isRevoked() : bool
+    protected function isRevoked() : bool
     {
         return $this->revoked;
     }
     /**
      * @param string $key
      *


568) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:180    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.870c3071e1067a2dc92c4f79db44fc14.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->hasParameter($key)) {
+        if ($this->hasParameter($key)) {
             throw new \InvalidArgumentException(sprintf('The parameter "%s" does not exist.', $key));
         }
         return $this->parameters->get($key);
     }
     /**
      * @return DataBag


569) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:178    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c45b7f84a867487ab257e5f5c3e342eb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameter(string $key)
+    protected function getParameter(string $key)
     {
         if (!$this->hasParameter($key)) {
             throw new \InvalidArgumentException(sprintf('The parameter "%s" does not exist.', $key));
         }
         return $this->parameters->get($key);
     }


570) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:190    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ac43af864bfec64b2540507ca711abad.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getMetadatas() : DataBag
+    protected function getMetadatas() : DataBag
     {
         return $this->metadatas;
     }
     /**
      * @param string $key
      *


571) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:224    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.54df10a4a8eeaa077114f4fd7283baa4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
     /**
      * {@inheritdoc}
      */


572) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:232    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7329f31b788a4ee2eeeede314a9ce0b3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         $data = ['$schema' => $this->getSchema(), 'type' => get_class($this), 'expires_at' => $this->getExpiresAt()->getTimestamp(), 'client_id' => $this->getClientId()->getValue(), 'parameters' => (object) $this->getParameters()->all(), 'metadatas' => (object) $this->getMetadatas()->all(), 'scopes' => $this->getScopes(), 'is_revoked' => $this->isRevoked(), 'resource_owner_id' => $this->getResourceOwnerId()->getValue(), 'resource_owner_class' => get_class($this->getResourceOwnerId()), 'resource_server_id' => $this->getResourceServerId() ? $this->getResourceServerId()->getValue() : null];
         return $data;
     }
 }



573) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/UserAccount/UserAccountId.php:25    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.95278ac8ca8f6fcf835453785f688c85.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



574) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:52    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9bf0df248975944840eeee91bc6e8ce5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAssociatedGrantTypes() : array
+    protected function getAssociatedGrantTypes() : array
     {
         return ['implicit'];
     }
     /**
      * {@inheritdoc}
      */


575) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:60    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e760fea58da18963ccf3e7920c9792b2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResponseType() : string
+    protected function getResponseType() : string
     {
         return 'token';
     }
     /**
      * {@inheritdoc}
      */


576) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:68    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d110ff28d458b28256c71628ef6a0341.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResponseMode() : string
+    protected function getResponseMode() : string
     {
         return self::RESPONSE_TYPE_MODE_FRAGMENT;
     }
     /**
      * {@inheritdoc}
      */


577) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:84    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8f1c68f4d587343f7fb6216ff2f40197.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        $accessToken = $this->accessTokenRepository->create($authorization->getUserAccount()->getPublicId(), $authorization->getClient()->getPublicId(), DataBag::create($authorization->getTokenType()->getInformation()), DataBag::create(['redirect_uri' => $authorization->getRedirectUri()]), $authorization->getScopes(), (new \DateTimeImmutable())->setTimestamp(time() + $this->accessTokenLifetime), null);
+        $accessToken = $this->accessTokenRepository->create($authorization->getUserAccount()->getPublicId(), $authorization->getClient()->getPublicId(), DataBag::create($authorization->getTokenType()->getInformation()), DataBag::create(['redirect_uri' => $authorization->getRedirectUri()]), $authorization->getScopes(), (new \DateTimeImmutable())->setTimestamp(time() - $this->accessTokenLifetime), null);
         $this->accessTokenRepository->save($accessToken);
         foreach ($accessToken->getResponseData() as $k => $v) {
             $authorization = $authorization->withResponseParameter($k, $v);
         }
         return $next($authorization);
     }


578) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:89    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a40fd982a1b3434f9097dda14448468d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->accessTokenRepository->save($accessToken);
-        foreach ($accessToken->getResponseData() as $k => $v) {
+        foreach (array() as $k => $v) {
             $authorization = $authorization->withResponseParameter($k, $v);
         }
         return $next($authorization);
     }
     /**
      * {@inheritdoc}


579) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:76    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.95d32d716d0873b87d6def4e761c7f2b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         $accessToken = $this->accessTokenRepository->create($authorization->getUserAccount()->getPublicId(), $authorization->getClient()->getPublicId(), DataBag::create($authorization->getTokenType()->getInformation()), DataBag::create(['redirect_uri' => $authorization->getRedirectUri()]), $authorization->getScopes(), (new \DateTimeImmutable())->setTimestamp(time() + $this->accessTokenLifetime), null);
         $this->accessTokenRepository->save($accessToken);
         foreach ($accessToken->getResponseData() as $k => $v) {
             $authorization = $authorization->withResponseParameter($k, $v);
         }


580) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:99    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.39ee8d9f75a36929b263e56875da6f2b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAssociatedResponseTypes() : array
+    protected function getAssociatedResponseTypes() : array
     {
         return ['token'];
     }
     /**
      * {@inheritdoc}
      */


581) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:107    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a53a1d0ce2f0d1fee0f00d88dc81c336.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getGrantType() : string
+    protected function getGrantType() : string
     {
         return 'implicit';
     }
     /**
      * {@inheritdoc}
      */


582) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:115    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.50b4aa5207727f04a542f2584ac22c9f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkTokenRequest(ServerRequestInterface $request)
+    protected function checkTokenRequest(ServerRequestInterface $request)
     {
         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The implicit grant type cannot be called from the token endpoint.');
     }
     /**
      * {@inheritdoc}
      */


583) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:123    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6692924be94713b1dcde0175a243c082.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The implicit grant type cannot be called from the token endpoint.');
     }
     /**
      * {@inheritdoc}
      */


584) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ImplicitGrant/ImplicitGrantType.php:131    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9af8dab6e2dcaa7ffb90452bd94c31e6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The implicit grant type cannot be called from the token endpoint.');
     }
 }



585) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:75    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ae1ab3fa92e9479f34f32c090c825472.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $resource = $this->resourceManager->find($resourceName);
-            if (null === $resource) {
+            if (null !== $resource) {
                 throw new \InvalidArgumentException(sprintf('The resource with name "%s" does not exist or is not supported by this server.', $resourceName), 400);
             }
             $data = $this->getResourceData($resourceName, $resource);
             $response = $this->responseFactory->createResponse(200);
             $headers = ['Content-Type' => 'application/jrd+json; charset=UTF-8'];
             $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));


586) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:83    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6b97d1c7bc0c77892e590804fa08741f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $headers = ['Content-Type' => 'application/jrd+json; charset=UTF-8'];
-            $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+            $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
         } catch (\InvalidArgumentException $e) {
             $response = $this->responseFactory->createResponse($e->getCode());
             $headers = ['Content-Type' => 'application/json; charset=UTF-8'];
             $response->getBody()->write(json_encode(['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => $e->getMessage()], JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
         }
         $headers['Cache-Control'] = 'no-cache, no-store, max-age=0, must-revalidate, private';


587) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:89    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.55d7e5a3770f26d9ba8473e850125563.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $headers = ['Content-Type' => 'application/json; charset=UTF-8'];
-            $response->getBody()->write(json_encode(['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => $e->getMessage()], JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+            $response->getBody()->write(json_encode(['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => $e->getMessage()], JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
         }
         $headers['Cache-Control'] = 'no-cache, no-store, max-age=0, must-revalidate, private';
         $headers['Pragma'] = 'no-cache';
         foreach ($headers as $k => $v) {
             $response = $response->withHeader($k, $v);
         }


588) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:93    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.697d86ff3259382bfa884d77d5370d1e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $headers['Pragma'] = 'no-cache';
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
     /**
      * @param ResourceId $resourceName


589) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:69    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.331a1a85ec052355138dd7c8cddc5c0d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         try {
             $this->checkRel($request);
             $resourceName = $this->getResourceName($request);
             $resource = $this->resourceManager->find($resourceName);
             if (null === $resource) {


590) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:127    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3fdadce8b906b25b0cf168022698af4e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $query_params = $request->getQueryParams() ?? [];
-        if (!array_key_exists('rel', $query_params)) {
+        if (array_key_exists('rel', $query_params)) {
             throw new \InvalidArgumentException('The parameter "rel" is mandatory.', 400);
         }
         if (self::REL_NAME !== $query_params['rel']) {
             throw new \InvalidArgumentException('Unsupported "rel" parameter value.', 400);
         }
     }


591) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:130    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3280ecef391b5f7cd94561284661a439.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (self::REL_NAME !== $query_params['rel']) {
+        if (self::REL_NAME === $query_params['rel']) {
             throw new \InvalidArgumentException('Unsupported "rel" parameter value.', 400);
         }
     }
     /**
      * @param ServerRequestInterface $request
      *


592) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:145    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ce3a899104e61cacd70a25a2df91a060.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $query_params = $request->getQueryParams() ?? [];
-        if (!array_key_exists('resource', $query_params)) {
+        if (array_key_exists('resource', $query_params)) {
             throw new \InvalidArgumentException('The parameter "resource" is mandatory.', 400);
         }
         $resourceName = $query_params['resource'];
         $domain = $this->findResourceNameDomain($resourceName);
         if ($domain !== $this->host) {
             throw new \InvalidArgumentException('Unsupported domain.', 400);


593) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:150    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9381c5c802a51e5c6800c355b90dbc00.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $domain = $this->findResourceNameDomain($resourceName);
-        if ($domain !== $this->host) {
+        if ($domain === $this->host) {
             throw new \InvalidArgumentException('Unsupported domain.', 400);
         }
         return ResourceId::create($resourceName);
     }
     /**
      * @param string $resourceName


594) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:166    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.171994aafa7d8e897d11342f049b8243.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ('acct:' === mb_substr($resourceName, 0, 5, 'utf-8')) {
+        if ('acct:' === mb_substr($resourceName, 1, 5, 'utf-8')) {
             $resourceName = mb_substr($resourceName, 5, null, 'utf-8');
         }
         $at = mb_strpos($resourceName, '@', 0, 'utf-8');
         if (false === $at) {
             $uri = $this->uriFactory->createUri($resourceName);
             return $this->getDomain($uri);


595) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:166    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.82de72b6a406463c5af9b67940a63de5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ('acct:' === mb_substr($resourceName, 0, 5, 'utf-8')) {
+        if ('acct:' !== mb_substr($resourceName, 0, 5, 'utf-8')) {
             $resourceName = mb_substr($resourceName, 5, null, 'utf-8');
         }
         $at = mb_strpos($resourceName, '@', 0, 'utf-8');
         if (false === $at) {
             $uri = $this->uriFactory->createUri($resourceName);
             return $this->getDomain($uri);


596) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:170    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5ea1ea49f80014312edb3a26ae12eb3e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        $at = mb_strpos($resourceName, '@', 0, 'utf-8');
+        $at = mb_strpos($resourceName, '@', 1, 'utf-8');
         if (false === $at) {
             $uri = $this->uriFactory->createUri($resourceName);
             return $this->getDomain($uri);
         }
         return $this->getDomainFromEmailResource($resourceName, $at);
     }


597) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:172    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d6410a3ec650cd780cf2de9c1c0819b1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $at = mb_strpos($resourceName, '@', 0, 'utf-8');
-        if (false === $at) {
+        if (true === $at) {
             $uri = $this->uriFactory->createUri($resourceName);
             return $this->getDomain($uri);
         }
         return $this->getDomainFromEmailResource($resourceName, $at);
     }
     /**


598) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:172    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.792c71456b18919acc45378685bab387.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $at = mb_strpos($resourceName, '@', 0, 'utf-8');
-        if (false === $at) {
+        if (false !== $at) {
             $uri = $this->uriFactory->createUri($resourceName);
             return $this->getDomain($uri);
         }
         return $this->getDomainFromEmailResource($resourceName, $at);
     }
     /**


599) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:189    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.97f9eaa5ba16a1ec9565e938d0f1070b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (0 === $at) {
+        if (1 === $at) {
             throw new \InvalidArgumentException('Unsupported Extensible Resource Identifier (XRI) resource value.', 400);
         }
         list(, $domain) = explode('@', $resourceName);
         return $domain;
     }
     /**


600) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:189    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e1713a9f326c62094385c157fc7c7f95.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (0 === $at) {
+        if (0 !== $at) {
             throw new \InvalidArgumentException('Unsupported Extensible Resource Identifier (XRI) resource value.', 400);
         }
         list(, $domain) = explode('@', $resourceName);
         return $domain;
     }
     /**


601) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/IssuerDiscoveryEndpoint.php:207    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.be2da0fe2bd047f1d594ad31893080ea.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $host = $uri->getHost();
-        if (null !== $uri->getPort()) {
+        if (null === $uri->getPort()) {
             $host = sprintf('%s:%d', $host, $uri->getPort());
         }
         return $host;
     }
 }



602) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/IssuerDiscoveryEndpoint/ResourceId.php:25    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bcf9b3c8c130702d3c89024b3d42bd38.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



603) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:108    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5a040eaa00bf4ffa2511095f205a0c4d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAssociatedResponseTypes() : array
+    protected function getAssociatedResponseTypes() : array
     {
         return [];
     }
     /**
      * @param JweCompactSerializer $jweSerializer
      * @param JWEDecrypter         $jweDecrypter


604) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:119    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8c658746d7c6d8c663f0cb24ea6dd2a4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function enableEncryptedAssertions(JweCompactSerializer $jweSerializer, JWEDecrypter $jweDecrypter, JWKSet $keyEncryptionKeySet, bool $encryptionRequired)
+    protected function enableEncryptedAssertions(JweCompactSerializer $jweSerializer, JWEDecrypter $jweDecrypter, JWKSet $keyEncryptionKeySet, bool $encryptionRequired)
     {
         $this->jweSerializer = $jweSerializer;
         $this->jweDecrypter = $jweDecrypter;
         $this->encryptionRequired = $encryptionRequired;
         $this->keyEncryptionKeySet = $keyEncryptionKeySet;
     }


605) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:130    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3059bea250fdf2b525e68154956f57a0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getGrantType() : string
+    protected function getGrantType() : string
     {
         return 'urn:ietf:params:oauth:grant-type:jwt-bearer';
     }
     /**
      * {@inheritdoc}
      */


606) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:144    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a58f16278aa4e3b102522c6a6145deaf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $diff = array_diff($requiredParameters, array_keys($parameters));
-        if (!empty($diff)) {
+        if (empty($diff)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('Missing grant type parameter(s): %s.', implode(', ', $diff)));
         }
     }
     /**
      * {@inheritdoc}
      */


607) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:138    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.88968e586b1f52ef4fa03e8451dd7bb8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkTokenRequest(ServerRequestInterface $request)
+    protected function checkTokenRequest(ServerRequestInterface $request)
     {
         $parameters = $request->getParsedBody() ?? [];
         $requiredParameters = ['assertion'];
         $diff = array_diff($requiredParameters, array_keys($parameters));
         if (!empty($diff)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('Missing grant type parameter(s): %s.', implode(', ', $diff)));


608) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:160    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.91f27613dc3a07450e519ee33dc14911.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $jws = $this->jwsSerializer->unserialize($assertion);
-            if (1 !== $jws->countSignatures()) {
+            if (0 !== $jws->countSignatures()) {
                 throw new \InvalidArgumentException('The assertion must have only one signature.');
             }
             $claims = json_decode($jws->getPayload(), true);
             $claims = $this->claimCheckerManager->check($claims);
             foreach (['iss', 'sub'] as $claim) {
                 if (!array_key_exists($claim, $claims)) {


609) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:160    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.23cb61fb603ded1f3352639b61890376.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $jws = $this->jwsSerializer->unserialize($assertion);
-            if (1 !== $jws->countSignatures()) {
+            if (1 === $jws->countSignatures()) {
                 throw new \InvalidArgumentException('The assertion must have only one signature.');
             }
             $claims = json_decode($jws->getPayload(), true);
             $claims = $this->claimCheckerManager->check($claims);
             foreach (['iss', 'sub'] as $claim) {
                 if (!array_key_exists($claim, $claims)) {


610) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:163    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.41d18846c8b72f33b42362a0f654ff2c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            $claims = json_decode($jws->getPayload(), true);
+            $claims = json_decode($jws->getPayload(), false);
             $claims = $this->claimCheckerManager->check($claims);
             foreach (['iss', 'sub'] as $claim) {
                 if (!array_key_exists($claim, $claims)) {
                     throw new \InvalidArgumentException(sprintf('The assertion must contain the claim member "%s".', $claim));
                 }
             }


611) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:166    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e621145a2f0b738220137e08a5ba7a7d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             foreach (['iss', 'sub'] as $claim) {
-                if (!array_key_exists($claim, $claims)) {
+                if (array_key_exists($claim, $claims)) {
                     throw new \InvalidArgumentException(sprintf('The assertion must contain the claim member "%s".', $claim));
                 }
             }
             $grantTypeData = $this->checkJWTSignature($grantTypeData, $jws, $claims);
         } catch (OAuth2Exception $e) {
             throw $e;


612) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:165    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8cfd758a0fd942caa7098faf849e4124.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $claims = $this->claimCheckerManager->check($claims);
-            foreach (['iss', 'sub'] as $claim) {
+            foreach (array() as $claim) {
                 if (!array_key_exists($claim, $claims)) {
                     throw new \InvalidArgumentException(sprintf('The assertion must contain the claim member "%s".', $claim));
                 }
             }
             $grantTypeData = $this->checkJWTSignature($grantTypeData, $jws, $claims);
         } catch (OAuth2Exception $e) {


613) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:152    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f2d0044546ab933b808ef7c9e5b059f6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         $parameters = $request->getParsedBody() ?? [];
         $assertion = $parameters['assertion'];
         $assertion = $this->tryToDecryptTheAssertion($assertion);
         try {
             $jws = $this->jwsSerializer->unserialize($assertion);


614) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:189    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.110c59c52f3bb09ddcc2338d7c95e24b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->jweDecrypter) {
+        if (null !== $this->jweDecrypter) {
             return $assertion;
         }
         try {
             $jwe = $this->jweSerializer->unserialize($assertion);
             if (1 !== $jwe->countRecipients()) {
                 throw new \InvalidArgumentException('The assertion must have only one recipient.');


615) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:195    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fb0325253f0869e648c9f2381bc35b5e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $jwe = $this->jweSerializer->unserialize($assertion);
-            if (1 !== $jwe->countRecipients()) {
+            if (0 !== $jwe->countRecipients()) {
                 throw new \InvalidArgumentException('The assertion must have only one recipient.');
             }
             if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the assertion.');


616) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:195    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9b131052e32c8a8dbe57cd606094496a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $jwe = $this->jweSerializer->unserialize($assertion);
-            if (1 !== $jwe->countRecipients()) {
+            if (1 === $jwe->countRecipients()) {
                 throw new \InvalidArgumentException('The assertion must have only one recipient.');
             }
             if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the assertion.');


617) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:198    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a8412c21766a0bce748863de23863c18.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
+            if (false === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the assertion.');
         } catch (\Exception $e) {
             if (true === $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);


618) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:198    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5a8f9372a41dc67e1f84a9f1fbf07f7f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
+            if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 1)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the assertion.');
         } catch (\Exception $e) {
             if (true === $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);


619) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:198    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.825ed22e20005be8492e2117716e4e56.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
+            if (true !== $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the assertion.');
         } catch (\Exception $e) {
             if (true === $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);


620) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:204    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.35c71f6c15774d871db359c9681d2553.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         } catch (\Exception $e) {
-            if (true === $this->encryptionRequired) {
+            if (false === $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);
             }
             return $assertion;
         }
     }
     /**


621) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:204    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e4aa0b1049e892032967b72601011367.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         } catch (\Exception $e) {
-            if (true === $this->encryptionRequired) {
+            if (true !== $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);
             }
             return $assertion;
         }
     }
     /**


622) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:215    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a7a19082e12a4caff50eb09878599be1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         //Nothing to do
         return $grantTypeData;
     }
     /**
      * @param GrantTypeData $grantTypeData


623) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:235    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.99435a4d8e2a961465867a5676e3ee6a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $sub = $claims['sub'];
-        if ($iss === $sub) {
+        if ($iss !== $sub) {
             // The issuer is the resource owner
             $client = $this->clientRepository->find(ClientId::create($iss));
             if (null === $client || true === $client->isDeleted()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Unable to find the issuer of the assertion.');
             }
             if (null === $grantTypeData->getClient()) {


624) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:237    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ebc096e2fa34df021e734f33622349a7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $client = $this->clientRepository->find(ClientId::create($iss));
-            if (null === $client || true === $client->isDeleted()) {
+            if (null !== $client || true === $client->isDeleted()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Unable to find the issuer of the assertion.');
             }
             if (null === $grantTypeData->getClient()) {
                 $grantTypeData = $grantTypeData->withClient($client);
             } elseif ($grantTypeData->getClient()->getPublicId()->getValue() !== $client->getPublicId()->getValue()) {
                 throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');


625) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:237    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f71855810d8a5e0522c91649b7d4b8d7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $client = $this->clientRepository->find(ClientId::create($iss));
-            if (null === $client || true === $client->isDeleted()) {
+            if (null === $client || false === $client->isDeleted()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Unable to find the issuer of the assertion.');
             }
             if (null === $grantTypeData->getClient()) {
                 $grantTypeData = $grantTypeData->withClient($client);
             } elseif ($grantTypeData->getClient()->getPublicId()->getValue() !== $client->getPublicId()->getValue()) {
                 throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');


626) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:237    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2a3de15182f7a6ea04b5c19548b20e19.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $client = $this->clientRepository->find(ClientId::create($iss));
-            if (null === $client || true === $client->isDeleted()) {
+            if (null === $client || true !== $client->isDeleted()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Unable to find the issuer of the assertion.');
             }
             if (null === $grantTypeData->getClient()) {
                 $grantTypeData = $grantTypeData->withClient($client);
             } elseif ($grantTypeData->getClient()->getPublicId()->getValue() !== $client->getPublicId()->getValue()) {
                 throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');


627) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:237    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8a6d51e53352fe0c05df33cc11c8d37a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $client = $this->clientRepository->find(ClientId::create($iss));
-            if (null === $client || true === $client->isDeleted()) {
+            if (null === $client && true === $client->isDeleted()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Unable to find the issuer of the assertion.');
             }
             if (null === $grantTypeData->getClient()) {
                 $grantTypeData = $grantTypeData->withClient($client);
             } elseif ($grantTypeData->getClient()->getPublicId()->getValue() !== $client->getPublicId()->getValue()) {
                 throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');


628) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:240    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2bab956618a5fed5a18396321d2254a5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             }
-            if (null === $grantTypeData->getClient()) {
+            if (null !== $grantTypeData->getClient()) {
                 $grantTypeData = $grantTypeData->withClient($client);
             } elseif ($grantTypeData->getClient()->getPublicId()->getValue() !== $client->getPublicId()->getValue()) {
                 throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
             }
             $grantTypeData = $grantTypeData->withResourceOwnerId($client->getPublicId());
             $allowedSignatureAlgorithms = $this->jwsVerifier->getSignatureAlgorithmManager()->list();


629) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:253    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e7ad73eb3f18e9123bd750944e980580.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $resourceOwnerId = $this->findResourceOwner($sub);
-            if (null === $resourceOwnerId) {
+            if (null !== $resourceOwnerId) {
                 throw new \InvalidArgumentException(sprintf('Unknown resource owner with ID "%s"', $sub));
             }
             $grantTypeData = $grantTypeData->withResourceOwnerId($resourceOwnerId);
         } else {
             throw new \InvalidArgumentException('Unable to find the issuer of the assertion.');
         }


630) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:261    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e9dd58f911db8acbc536e9e3273b1328.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
+        if (!$jws->getSignature(1)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The signature algorithm "%s" is not allowed.', $jws->getSignature(0)->getProtectedHeaderParameter('alg')));
         }
         $this->jwsVerifier->verifyWithKeySet($jws, $signatureKeys, 0);
         $grantTypeData = $grantTypeData->withMetadata('jwt', $jws);
         $grantTypeData = $grantTypeData->withMetadata('claims', $claims);
         return $grantTypeData;


631) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:261    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0232c5574cbe8a05c08045d1ab9dc583.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
+        if ($jws->getSignature(0)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The signature algorithm "%s" is not allowed.', $jws->getSignature(0)->getProtectedHeaderParameter('alg')));
         }
         $this->jwsVerifier->verifyWithKeySet($jws, $signatureKeys, 0);
         $grantTypeData = $grantTypeData->withMetadata('jwt', $jws);
         $grantTypeData = $grantTypeData->withMetadata('claims', $claims);
         return $grantTypeData;


632) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:261    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d0785086df7ae5551bba1a966feb9dd8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
+        if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(1)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The signature algorithm "%s" is not allowed.', $jws->getSignature(0)->getProtectedHeaderParameter('alg')));
         }
         $this->jwsVerifier->verifyWithKeySet($jws, $signatureKeys, 0);
         $grantTypeData = $grantTypeData->withMetadata('jwt', $jws);
         $grantTypeData = $grantTypeData->withMetadata('claims', $claims);
         return $grantTypeData;


633) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:261    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.57b13198d40dfdf5344dd59c0742d61b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
+        if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') || in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The signature algorithm "%s" is not allowed.', $jws->getSignature(0)->getProtectedHeaderParameter('alg')));
         }
         $this->jwsVerifier->verifyWithKeySet($jws, $signatureKeys, 0);
         $grantTypeData = $grantTypeData->withMetadata('jwt', $jws);
         $grantTypeData = $grantTypeData->withMetadata('claims', $claims);
         return $grantTypeData;


634) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:261    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.adb799f0f00be8a6b6845fe6c5503464.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
+        if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') && !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The signature algorithm "%s" is not allowed.', $jws->getSignature(0)->getProtectedHeaderParameter('alg')));
         }
         $this->jwsVerifier->verifyWithKeySet($jws, $signatureKeys, 0);
         $grantTypeData = $grantTypeData->withMetadata('jwt', $jws);
         $grantTypeData = $grantTypeData->withMetadata('claims', $claims);
         return $grantTypeData;


635) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:265    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.52a7987988b51c71a4f1139f011fee59.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        $this->jwsVerifier->verifyWithKeySet($jws, $signatureKeys, 0);
+        $this->jwsVerifier->verifyWithKeySet($jws, $signatureKeys, 1);
         $grantTypeData = $grantTypeData->withMetadata('jwt', $jws);
         $grantTypeData = $grantTypeData->withMetadata('claims', $claims);
         return $grantTypeData;
     }
     /**
      * @param string $subject


636) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:280    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1e3cab87364c5cbe1e3824e62452f6e1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $userAccount = $this->userAccountRepository->find(UserAccountId::create($subject));
-        if (null !== $userAccount) {
+        if (null === $userAccount) {
             return $userAccount->getPublicId();
         }
         $client = $this->clientRepository->find(ClientId::create($subject));
         if (null !== $client) {
             return $client->getPublicId();
         }


637) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/TrustedIssuerManager.php:26    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.90d63d4ee1ad4c09f32387d7f661b769.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(TrustedIssuer $trustedIssuer)
+    protected function add(TrustedIssuer $trustedIssuer)
     {
         $this->trustedIssuers[$trustedIssuer->name()] = $trustedIssuer;
     }
     /**
      * @param string $name
      *


638) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/TrustedIssuerManager.php:36    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.12e965d86de48cbb78cf710ea4ab4573.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function has(string $name) : bool
+    protected function has(string $name) : bool
     {
         return array_key_exists($name, $this->trustedIssuers);
     }
     /**
      * @param string $name
      *


639) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/TrustedIssuerManager.php:48    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3a082d0de47fba9949e411fb3f76f72a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->has($name)) {
+        if ($this->has($name)) {
             throw new \InvalidArgumentException(sprintf('The issuer with name "%s" is not known.', $name));
         }
         return $this->trustedIssuers[$name];
     }
     /**
      * @return string[]


640) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/TrustedIssuerManager.php:46    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.16acbd65f25e30c19f6579fb7fe82b48.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function get(string $name) : TrustedIssuer
+    protected function get(string $name) : TrustedIssuer
     {
         if (!$this->has($name)) {
             throw new \InvalidArgumentException(sprintf('The issuer with name "%s" is not known.', $name));
         }
         return $this->trustedIssuers[$name];
     }


641) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/TrustedIssuerManager.php:58    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7d6d7d180cf36feda428f1cdf410f578.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function list() : array
+    protected function list() : array
     {
         return array_keys($this->trustedIssuers);
     }
 }



642) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:34    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9752e6e660cca5a343eccdd8af27464b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!in_array($macAlgorithm, array_keys($this->getAlgorithmMap()))) {
+        if (in_array($macAlgorithm, array_keys($this->getAlgorithmMap()))) {
             throw new \InvalidArgumentException('Unsupported ma algorithm.');
         }
         if ($timestampLifetime <= 0) {
             throw new \InvalidArgumentException('Invalid timestamp lifetime.');
         }
         $this->macAlgorithm = $macAlgorithm;


643) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:37    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a5391c8298695718c360714b8082397f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ($timestampLifetime <= 0) {
+        if ($timestampLifetime <= 1) {
             throw new \InvalidArgumentException('Invalid timestamp lifetime.');
         }
         $this->macAlgorithm = $macAlgorithm;
         $this->timestampLifetime = $timestampLifetime;
     }
     /**


644) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:37    [M] LessThanOrEqualTo
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dac3fe5120cae774d025aaffe89bead9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ($timestampLifetime <= 0) {
+        if ($timestampLifetime < 0) {
             throw new \InvalidArgumentException('Invalid timestamp lifetime.');
         }
         $this->macAlgorithm = $macAlgorithm;
         $this->timestampLifetime = $timestampLifetime;
     }
     /**


645) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:37    [M] LessThanOrEqualToNegotiation
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.aa26738886ece7fa3d3cced1622d96f9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if ($timestampLifetime <= 0) {
+        if ($timestampLifetime > 0) {
             throw new \InvalidArgumentException('Invalid timestamp lifetime.');
         }
         $this->macAlgorithm = $macAlgorithm;
         $this->timestampLifetime = $timestampLifetime;
     }
     /**


646) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:47    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d56af4da577f86234d50ae120756c51f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return 'MAC';
     }
     /**
      * {@inheritdoc}
      */


647) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:55    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6df61c262a9727b9de51170f75ffbdaa.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScheme() : string
+    protected function getScheme() : string
     {
         return $this->name();
     }
     /**
      * {@inheritdoc}
      */


648) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:63    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4284eb7c9fef3152520c7dc6b54df895.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getInformation() : array
+    protected function getInformation() : array
     {
         return ['token_type' => $this->name(), 'mac_key' => $this->generateMacKey(), 'mac_algorithm' => $this->getMacAlgorithm()];
     }
     /**
      * @return int
      */


649) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:75    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b38c220f7b32a07ebbbe0f3a9751c509.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTimestampLifetime() : int
+    protected function getTimestampLifetime() : int
     {
         return $this->timestampLifetime;
     }
     /**
      * @return string
      */


650) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:83    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fa59d49fe33e4d19cd6fe9721e37af96.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getMacAlgorithm()
+    protected function getMacAlgorithm()
     {
         return $this->macAlgorithm;
     }
     /**
      * {@inheritdoc}
      */


651) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:96    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.62910d6a60d0a92ba52106093753a11a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($authorization_headers as $authorization_header) {
-            if ('MAC ' === mb_substr($authorization_header, 0, 4, '8bit')) {
+            if ('MAC ' === mb_substr($authorization_header, 1, 4, '8bit')) {
                 $header = trim(mb_substr($authorization_header, 4, null, '8bit'));
                 if (true === $this->isHeaderValid($header, $additionalCredentialValues, $token)) {
                     return $token;
                 }
             }
         }


652) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:96    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.80a6a4bb3732e49e4e83f8bb3eab6355.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($authorization_headers as $authorization_header) {
-            if ('MAC ' === mb_substr($authorization_header, 0, 4, '8bit')) {
+            if ('MAC ' !== mb_substr($authorization_header, 0, 4, '8bit')) {
                 $header = trim(mb_substr($authorization_header, 4, null, '8bit'));
                 if (true === $this->isHeaderValid($header, $additionalCredentialValues, $token)) {
                     return $token;
                 }
             }
         }


653) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:98    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.14078db6890cb7d3af3b44f445a44f9d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $header = trim(mb_substr($authorization_header, 4, null, '8bit'));
-                if (true === $this->isHeaderValid($header, $additionalCredentialValues, $token)) {
+                if (false === $this->isHeaderValid($header, $additionalCredentialValues, $token)) {
                     return $token;
                 }
             }
         }
         return null;
     }


654) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:98    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7a9e5a639c6340396579ef65accbe9d1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $header = trim(mb_substr($authorization_header, 4, null, '8bit'));
-                if (true === $this->isHeaderValid($header, $additionalCredentialValues, $token)) {
+                if (true !== $this->isHeaderValid($header, $additionalCredentialValues, $token)) {
                     return $token;
                 }
             }
         }
         return null;
     }


655) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:95    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b44d350db0710c1506e120163a2779fb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorization_headers = $request->getHeader('AUTHORIZATION');
-        foreach ($authorization_headers as $authorization_header) {
+        foreach (array() as $authorization_header) {
             if ('MAC ' === mb_substr($authorization_header, 0, 4, '8bit')) {
                 $header = trim(mb_substr($authorization_header, 4, null, '8bit'));
                 if (true === $this->isHeaderValid($header, $additionalCredentialValues, $token)) {
                     return $token;
                 }
             }


656) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:91    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cc794cb2eff0d936f25e3814d9f675b2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function findToken(ServerRequestInterface $request, array &$additionalCredentialValues) : ?string
+    protected function findToken(ServerRequestInterface $request, array &$additionalCredentialValues) : ?string
     {
         $authorization_headers = $request->getHeader('AUTHORIZATION');
         foreach ($authorization_headers as $authorization_header) {
             if ('MAC ' === mb_substr($authorization_header, 0, 4, '8bit')) {
                 $header = trim(mb_substr($authorization_header, 4, null, '8bit'));
                 if (true === $this->isHeaderValid($header, $additionalCredentialValues, $token)) {


657) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:112    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8a93b0fb044afb62ab0d2eb6d2bd9b0e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($accessToken->getParameter('token_type') !== $this->name()) {
+        if ($accessToken->getParameter('token_type') === $this->name()) {
             return false;
         }
         foreach ($this->getParametersToCheck() as $key => $closure) {
             if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
                 return false;
             }


658) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:117    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9edf8b3fa1682cae74a19e00a115912d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($this->getParametersToCheck() as $key => $closure) {
-            if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
+            if (array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
                 return false;
             }
         }
         $mac = $this->generateMac($request, $accessToken, $additionalCredentialValues);
         return hash_equals($mac, $additionalCredentialValues['mac']);
     }


659) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:117    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.eab790da9ce775910b3e4014c3e9daf0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($this->getParametersToCheck() as $key => $closure) {
-            if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
+            if (!array_key_exists($key, $additionalCredentialValues) || true === $closure($additionalCredentialValues[$key], $accessToken)) {
                 return false;
             }
         }
         $mac = $this->generateMac($request, $accessToken, $additionalCredentialValues);
         return hash_equals($mac, $additionalCredentialValues['mac']);
     }


660) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:117    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c7bdcc805e57c318f78351e08ff5937d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($this->getParametersToCheck() as $key => $closure) {
-            if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
+            if (!array_key_exists($key, $additionalCredentialValues) || false !== $closure($additionalCredentialValues[$key], $accessToken)) {
                 return false;
             }
         }
         $mac = $this->generateMac($request, $accessToken, $additionalCredentialValues);
         return hash_equals($mac, $additionalCredentialValues['mac']);
     }


661) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:117    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.05c471fc57c139c7b494ebfd01bfb38c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         foreach ($this->getParametersToCheck() as $key => $closure) {
-            if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
+            if (!array_key_exists($key, $additionalCredentialValues) && false === $closure($additionalCredentialValues[$key], $accessToken)) {
                 return false;
             }
         }
         $mac = $this->generateMac($request, $accessToken, $additionalCredentialValues);
         return hash_equals($mac, $additionalCredentialValues['mac']);
     }


662) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:118    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8647e3c92d4d3db1c771b46f638f3b70.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
-                return false;
+                return true;
             }
         }
         $mac = $this->generateMac($request, $accessToken, $additionalCredentialValues);
         return hash_equals($mac, $additionalCredentialValues['mac']);
     }
     private function getParametersToCheck() : array


663) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:116    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.615fdeaf031425e6194ad0d7317a4230.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        foreach ($this->getParametersToCheck() as $key => $closure) {
+        foreach (array() as $key => $closure) {
             if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
                 return false;
             }
         }
         $mac = $this->generateMac($request, $accessToken, $additionalCredentialValues);
         return hash_equals($mac, $additionalCredentialValues['mac']);


664) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:110    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.69e117df1f9213e5c4d927905415859b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isTokenRequestValid(AccessToken $accessToken, ServerRequestInterface $request, array $additionalCredentialValues) : bool
+    protected function isTokenRequestValid(AccessToken $accessToken, ServerRequestInterface $request, array $additionalCredentialValues) : bool
     {
         if ($accessToken->getParameter('token_type') !== $this->name()) {
             return false;
         }
         foreach ($this->getParametersToCheck() as $key => $closure) {
             if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {


665) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:131    [M] FunctionCall
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.20195b1ed6cb6a1be8c86a72c2586c82.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         return ['id' => function ($value, AccessToken $accessToken) {
-            return hash_equals($accessToken->getTokenId()->getValue(), $value);
+            hash_equals($accessToken->getTokenId()->getValue(), $value);
+            return null;
         }, 'ts' => function ($value) {
             return time() < $this->getTimestampLifetime() + (int) $value;
         }, 'nonce' => function () {
             return true;
         }];


666) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:134    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2fd007403f3a1c0d1e0a470fdcf48950.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }, 'ts' => function ($value) {
-            return time() < $this->getTimestampLifetime() + (int) $value;
+            return time() < $this->getTimestampLifetime() - (int) $value;
         }, 'nonce' => function () {
             return true;
         }];
     }
     /**
      * @param ServerRequestInterface $request


667) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:134    [M] LessThan
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.075fb3879ceb98d04ce9a47b2124a87c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }, 'ts' => function ($value) {
-            return time() < $this->getTimestampLifetime() + (int) $value;
+            return time() <= $this->getTimestampLifetime() + (int) $value;
         }, 'nonce' => function () {
             return true;
         }];
     }
     /**
      * @param ServerRequestInterface $request


668) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:134    [M] LessThanNegotiation
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a294a173df7d4bcaba4d75a70f77ec51.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }, 'ts' => function ($value) {
-            return time() < $this->getTimestampLifetime() + (int) $value;
+            return time() >= $this->getTimestampLifetime() + (int) $value;
         }, 'nonce' => function () {
             return true;
         }];
     }
     /**
      * @param ServerRequestInterface $request


669) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:137    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1f44bae43a9f0d20cf5ab27ca2cdf28f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }, 'nonce' => function () {
-            return true;
+            return false;
         }];
     }
     /**
      * @param ServerRequestInterface $request
      * @param AccessToken            $token
      * @param array                  $values


670) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:169    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.75d25247cbddf92537bcbbecfd9f2064.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $algorithms = $this->getAlgorithmMap();
-        if (!array_key_exists($token->getParameter('mac_algorithm'), $algorithms)) {
+        if (array_key_exists($token->getParameter('mac_algorithm'), $algorithms)) {
             throw new \RuntimeException(sprintf('The MAC algorithm "%s" is not supported.', $token->getParameter('mac_algorithm')));
         }
         return base64_encode(hash_hmac($algorithms[$token->getParameter('mac_algorithm')], $basestr, $token->getParameter('mac_key'), true));
     }
     /**
      * @return array


671) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:177    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.18281abc8a55889881a6ea323dbf2a1f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        return base64_encode(hash_hmac($algorithms[$token->getParameter('mac_algorithm')], $basestr, $token->getParameter('mac_key'), true));
+        return base64_encode(hash_hmac($algorithms[$token->getParameter('mac_algorithm')], $basestr, $token->getParameter('mac_key'), false));
     }
     /**
      * @return array
      */
     protected function getAlgorithmMap() : array
     {


672) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:184    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.39ae966a46ac9e79567d67e00f67a2f6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getAlgorithmMap() : array
+    private function getAlgorithmMap() : array
     {
         return ['hmac-sha-1' => 'sha1', 'hmac-sha-256' => 'sha256'];
     }
     /**
      * @param string      $header
      * @param array       $additionalCredentialValues


673) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:201    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.934487fd153b9a46fc3e60d9c8bd97a8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 === preg_match('/(\\w+)=("((?:[^"\\\\]|\\\\.)+)"|([^\\s,$]+))/', $header, $matches)) {
+        if (0 === preg_match('/(\\w+)=("((?:[^"\\\\]|\\\\.)+)"|([^\\s,$]+))/', $header, $matches)) {
             preg_match_all('/(\\w+)=("((?:[^"\\\\]|\\\\.)+)"|([^\\s,$]+))/', $header, $matches, PREG_SET_ORDER);
             if (!is_array($matches)) {
                 return false;
             }
             $values = [];
             foreach ($matches as $match) {


674) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:201    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e04de0c881542dc418d6c998ea51eddb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (1 === preg_match('/(\\w+)=("((?:[^"\\\\]|\\\\.)+)"|([^\\s,$]+))/', $header, $matches)) {
+        if (1 !== preg_match('/(\\w+)=("((?:[^"\\\\]|\\\\.)+)"|([^\\s,$]+))/', $header, $matches)) {
             preg_match_all('/(\\w+)=("((?:[^"\\\\]|\\\\.)+)"|([^\\s,$]+))/', $header, $matches, PREG_SET_ORDER);
             if (!is_array($matches)) {
                 return false;
             }
             $values = [];
             foreach ($matches as $match) {


675) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:204    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.092522bb00925833bcc0a7797d1a7e89.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             preg_match_all('/(\\w+)=("((?:[^"\\\\]|\\\\.)+)"|([^\\s,$]+))/', $header, $matches, PREG_SET_ORDER);
-            if (!is_array($matches)) {
+            if (is_array($matches)) {
                 return false;
             }
             $values = [];
             foreach ($matches as $match) {
                 $values[$match[1]] = isset($match[4]) ? $match[4] : $match[3];
             }


676) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:210    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4ff4a97b628a09113b9949d46e780edf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             foreach ($matches as $match) {
-                $values[$match[1]] = isset($match[4]) ? $match[4] : $match[3];
+                $values[$match[0]] = isset($match[4]) ? $match[4] : $match[3];
             }
             if (array_key_exists('id', $values)) {
                 $additionalCredentialValues = $values;
                 $token = $values['id'];
                 return true;
             }


677) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:209    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6be21ab1d6248f811ad2fedb92497df6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $values = [];
-            foreach ($matches as $match) {
+            foreach (array() as $match) {
                 $values[$match[1]] = isset($match[4]) ? $match[4] : $match[3];
             }
             if (array_key_exists('id', $values)) {
                 $additionalCredentialValues = $values;
                 $token = $values['id'];
                 return true;


678) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:218    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f6163f41c32c214b4f56ac0fb0045e7b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $token = $values['id'];
-                return true;
+                return false;
             }
         }
         return false;
     }
     /**
      * @return string


679) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/Metadata.php:28    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4245739931400a7ec46f81bfff65d6de.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function has(string $key) : bool
+    protected function has(string $key) : bool
     {
         return array_key_exists($key, $this->values);
     }
     /**
      * @param string $key
      *


680) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/Metadata.php:40    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b7dc33f06b3004266df1b474b2f88ff3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->has($key)) {
+        if ($this->has($key)) {
             throw new \InvalidArgumentException(sprintf('The value with key "%s" does not exist.', $key));
         }
         return $this->values[$key];
     }
     /**
      * @param string $key


681) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/Metadata.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6fd37dca4555c9ec5e21cdb28b15c698.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function get(string $key)
+    protected function get(string $key)
     {
         if (!$this->has($key)) {
             throw new \InvalidArgumentException(sprintf('The value with key "%s" does not exist.', $key));
         }
         return $this->values[$key];
     }


682) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/Metadata.php:51    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ea90a6307b69b41dd375676daf26df89.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function set(string $key, $value)
+    protected function set(string $key, $value)
     {
         $this->values[$key] = $value;
     }
     /**
      * {@inheritdoc}
      */


683) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/Metadata.php:59    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.93d07bc59acac450a764182bcd5fb08c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         return $this->values;
     }
 }



684) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/AddAccessTokenCommand.php:37    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.47d14787dc82a3bc10be036de5179b61.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(RefreshTokenId $refreshTokenId, AccessTokenId $accessTokenId)
+    private function __construct(RefreshTokenId $refreshTokenId, AccessTokenId $accessTokenId)
     {
         $this->refreshTokenId = $refreshTokenId;
         $this->accessTokenId = $accessTokenId;
     }
     /**
      * @param RefreshTokenId $refreshTokenId


685) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/AddAccessTokenCommand.php:49    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6b0e6d69409584cabc8d086955ea2e59.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(RefreshTokenId $refreshTokenId, AccessTokenId $accessTokenId) : self
+    protected static function create(RefreshTokenId $refreshTokenId, AccessTokenId $accessTokenId) : self
     {
         return new self($refreshTokenId, $accessTokenId);
     }
     /**
      * @return RefreshTokenId
      */


686) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/AddAccessTokenCommand.php:57    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8053f71b320523916188149d978476b8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRefreshTokenId() : RefreshTokenId
+    protected function getRefreshTokenId() : RefreshTokenId
     {
         return $this->refreshTokenId;
     }
     /**
      * @return AccessTokenId
      */


687) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/AddAccessTokenCommand.php:65    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.58bcd2234c2c9dd3a12114caf5137663.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAccessTokenId() : AccessTokenId
+    protected function getAccessTokenId() : AccessTokenId
     {
         return $this->accessTokenId;
     }
 }



688) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/AddAccessTokenCommandHandler.php:42    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9014d8dc0178597e8dc42ba6217f59ac.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $refreshToken = $this->refreshTokenRepository->find($refreshTokenId);
-        if (null === $refreshToken) {
+        if (null !== $refreshToken) {
             throw new \InvalidArgumentException(sprintf('Unable to find the refresh token with ID "%s".', $command->getRefreshTokenId()->getValue()));
         }
         $refreshToken = $refreshToken->addAccessToken($command->getAccessTokenId());
         $this->refreshTokenRepository->save($refreshToken);
     }
 }


689) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/AddAccessTokenCommandHandler.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e6c89c630239392dc66759402ba8229b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(AddAccessTokenCommand $command)
+    protected function handle(AddAccessTokenCommand $command)
     {
         $refreshTokenId = $command->getRefreshTokenId();
         $refreshToken = $this->refreshTokenRepository->find($refreshTokenId);
         if (null === $refreshToken) {
             throw new \InvalidArgumentException(sprintf('Unable to find the refresh token with ID "%s".', $command->getRefreshTokenId()->getValue()));
         }


690) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:76    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4490804550232db1de2a9bda47082aee.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(RefreshTokenId $refreshTokenId, ClientId $clientId, ResourceOwnerId $resourceOwnerId, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId)
+    private function __construct(RefreshTokenId $refreshTokenId, ClientId $clientId, ResourceOwnerId $resourceOwnerId, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId)
     {
         $this->refreshTokenId = $refreshTokenId;
         $this->clientId = $clientId;
         $this->resourceOwnerId = $resourceOwnerId;
         $this->expiresAt = $expiresAt;
         $this->parameters = $parameters;


691) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:100    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.db38e57fd37b2eb8a98dbf672d9a881d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(RefreshTokenId $refreshTokenId, ClientId $clientId, ResourceOwnerId $resourceOwnerId, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId) : self
+    protected static function create(RefreshTokenId $refreshTokenId, ClientId $clientId, ResourceOwnerId $resourceOwnerId, \DateTimeImmutable $expiresAt, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId) : self
     {
         return new self($refreshTokenId, $clientId, $resourceOwnerId, $expiresAt, $parameters, $metadatas, $scopes, $resourceServerId);
     }
     /**
      * @return ClientId
      */


692) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:108    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7c377fd6e241c18d0bb3404e107c4178.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return ResourceOwnerId
      */


693) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:116    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dda9574784886ecf6398f409a87631d9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceOwnerId() : ResourceOwnerId
+    protected function getResourceOwnerId() : ResourceOwnerId
     {
         return $this->resourceOwnerId;
     }
     /**
      * @return DataBag
      */


694) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:124    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f9057ee1c002d9d51f82d82febc5e938.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @return DataBag
      */


695) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:132    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.da53d90c8b4e0f369492af2882ad1fcd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getMetadatas() : DataBag
+    protected function getMetadatas() : DataBag
     {
         return $this->metadatas;
     }
     /**
      * @return array
      */


696) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:140    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.37228e9943fae830fc600c423b82e7bd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return null|ResourceServerId
      */


697) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:148    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.080e29d41374247d2d27ebd4aeda7042.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
     /**
      * @return RefreshTokenId
      */


698) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:156    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.23734dd93acfb7deb549ed93d55fddd1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRefreshTokenId() : RefreshTokenId
+    protected function getRefreshTokenId() : RefreshTokenId
     {
         return $this->refreshTokenId;
     }
     /**
      * @return \DateTimeImmutable
      */


699) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommand.php:164    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bf27bf37861f52a1d60b51700b883662.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : \DateTimeImmutable
+    protected function getExpiresAt() : \DateTimeImmutable
     {
         return $this->expiresAt;
     }
 }



700) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommandHandler.php:42    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.686b56c2d5700b331b39467587b65d39.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $refreshToken = $this->refreshTokenRepository->find($command->getRefreshTokenId());
-        if (null !== $refreshToken) {
+        if (null === $refreshToken) {
             throw new \InvalidArgumentException(sprintf('The refresh token with ID "%s" already exists.', $command->getRefreshTokenId()->getValue()));
         }
         $refreshToken = RefreshToken::createEmpty();
         $refreshToken = $refreshToken->create($command->getRefreshTokenId(), $command->getResourceOwnerId(), $command->getClientId(), $command->getParameters(), $command->getMetadatas(), $command->getScopes(), $command->getExpiresAt(), $command->getResourceServerId());
         $this->refreshTokenRepository->save($refreshToken);
     }


701) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/CreateRefreshTokenCommandHandler.php:39    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fc12e935fc6c46abe5d889ed157d476d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(CreateRefreshTokenCommand $command)
+    protected function handle(CreateRefreshTokenCommand $command)
     {
         $refreshToken = $this->refreshTokenRepository->find($command->getRefreshTokenId());
         if (null !== $refreshToken) {
             throw new \InvalidArgumentException(sprintf('The refresh token with ID "%s" already exists.', $command->getRefreshTokenId()->getValue()));
         }
         $refreshToken = RefreshToken::createEmpty();


702) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/RevokeRefreshTokenCommand.php:30    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f1f7195eb5c55966a98c7815de680219.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(RefreshTokenId $refreshTokenId)
+    private function __construct(RefreshTokenId $refreshTokenId)
     {
         $this->refreshTokenId = $refreshTokenId;
     }
     /**
      * @param RefreshTokenId $refreshTokenId
      *


703) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/RevokeRefreshTokenCommand.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4ea6289bc36cd760aba2409746b8bf3d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(RefreshTokenId $refreshTokenId) : self
+    protected static function create(RefreshTokenId $refreshTokenId) : self
     {
         return new self($refreshTokenId);
     }
     /**
      * @return RefreshTokenId
      */


704) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/RevokeRefreshTokenCommand.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cd77a5c90a0bebe43c2fc36465f2997d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRefreshTokenId() : RefreshTokenId
+    protected function getRefreshTokenId() : RefreshTokenId
     {
         return $this->refreshTokenId;
     }
 }



705) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/RevokeRefreshTokenCommandHandler.php:42    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.84fca6bcfca23f591df93e9080af9249.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $refreshToken = $this->refreshTokenRepository->find($refreshTokenId);
-        if (null === $refreshToken) {
+        if (null !== $refreshToken) {
             throw new \InvalidArgumentException(sprintf('Unable to find the refresh token with ID "%s".', $command->getRefreshTokenId()->getValue()));
         }
         $refreshToken = $refreshToken->markAsRevoked();
         $this->refreshTokenRepository->save($refreshToken);
     }
 }


706) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Command/RevokeRefreshTokenCommandHandler.php:38    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.86c020aab29f95a90f9c28265da6e70a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function handle(RevokeRefreshTokenCommand $command)
+    protected function handle(RevokeRefreshTokenCommand $command)
     {
         $refreshTokenId = $command->getRefreshTokenId();
         $refreshToken = $this->refreshTokenRepository->find($refreshTokenId);
         if (null === $refreshToken) {
             throw new \InvalidArgumentException(sprintf('Unable to find the refresh token with ID "%s".', $command->getRefreshTokenId()->getValue()));
         }


707) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/AccessTokenAddedToRefreshTokenEvent.php:43    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5d63936604966d5c53a651e6b90dc1e7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(RefreshTokenId $refreshTokenId, AccessTokenId $accessTokenId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(RefreshTokenId $refreshTokenId, AccessTokenId $accessTokenId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->refreshTokenId = $refreshTokenId;
         $this->accessTokenId = $accessTokenId;
     }
     /**


708) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/AccessTokenAddedToRefreshTokenEvent.php:64    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.08142df04decb8e364aab01d010cf68a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(RefreshTokenId $refreshTokenId, AccessTokenId $accessTokenId) : self
+    protected static function create(RefreshTokenId $refreshTokenId, AccessTokenId $accessTokenId) : self
     {
         return new self($refreshTokenId, $accessTokenId, null, null);
     }
     /**
      * @return RefreshTokenId
      */


709) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/AccessTokenAddedToRefreshTokenEvent.php:72    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b23ea57bcc178297e08d4ec9b94e882e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRefreshTokenId() : RefreshTokenId
+    protected function getRefreshTokenId() : RefreshTokenId
     {
         return $this->refreshTokenId;
     }
     /**
      * @return AccessTokenId
      */


710) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/AccessTokenAddedToRefreshTokenEvent.php:80    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ed5db8b09162e4d8bf820a31e5861982.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAccessTokenId() : AccessTokenId
+    protected function getAccessTokenId() : AccessTokenId
     {
         return $this->accessTokenId;
     }
     /**
      * {@inheritdoc}
      */


711) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/AccessTokenAddedToRefreshTokenEvent.php:88    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ffcffe968b625c23c505d91f4fa8d931.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getRefreshTokenId();
     }
     /**
      * {@inheritdoc}
      */


712) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/AccessTokenAddedToRefreshTokenEvent.php:106    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d70cd6a7463c75a19760bb2983a34bc7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $refreshTokenId = RefreshTokenId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $accessTokenId = AccessTokenId::create($json->payload->access_token_id);
         return new self($refreshTokenId, $accessTokenId, $recordedOn, $eventId);


713) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:82    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6b38a1904bff19119343c3a220b3eab0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(RefreshTokenId $refreshTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, \DateTimeImmutable $expiresAt, array $scopes, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(RefreshTokenId $refreshTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, \DateTimeImmutable $expiresAt, array $scopes, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->refreshTokenId = $refreshTokenId;
         $this->resourceOwnerId = $resourceOwnerId;
         $this->clientId = $clientId;
         $this->parameters = $parameters;


714) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:115    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.983cc07a50646e2650c401429f4d012a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(RefreshTokenId $refreshTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, \DateTimeImmutable $expiresAt, array $scopes, ?ResourceServerId $resourceServerId) : self
+    protected static function create(RefreshTokenId $refreshTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, \DateTimeImmutable $expiresAt, array $scopes, ?ResourceServerId $resourceServerId) : self
     {
         return new self($refreshTokenId, $resourceOwnerId, $clientId, $parameters, $metadatas, $expiresAt, $scopes, $resourceServerId, null, null);
     }
     /**
      * @return RefreshTokenId
      */


715) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:123    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5117ea2124855a0992f7595df7726188.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRefreshTokenId() : RefreshTokenId
+    protected function getRefreshTokenId() : RefreshTokenId
     {
         return $this->refreshTokenId;
     }
     /**
      * @return ResourceOwnerId
      */


716) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:131    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5347a2adf8f316eadc9fbc9fe7ded218.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceOwnerId() : ResourceOwnerId
+    protected function getResourceOwnerId() : ResourceOwnerId
     {
         return $this->resourceOwnerId;
     }
     /**
      * @return ClientId
      */


717) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:139    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5d4258751fb72b8d66e99d883e758785.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return DataBag
      */


718) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:147    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f8ef298a2e853743e7db7f22d5cd23a7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @return \DateTimeImmutable
      */


719) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:155    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.44a048945411e8395b50a06088745c98.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : \DateTimeImmutable
+    protected function getExpiresAt() : \DateTimeImmutable
     {
         return $this->expiresAt;
     }
     /**
      * @return array
      */


720) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:163    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d80d8844eb1d345c40d071a029eecd02.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return DataBag
      */


721) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:171    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.920762bd93b6d5f9d08e0656f9bf9cae.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getMetadatas() : DataBag
+    protected function getMetadatas() : DataBag
     {
         return $this->metadatas;
     }
     /**
      * @return ResourceServerId
      */


722) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:179    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dfb3a742d8dc40d6e048321b3cac4a9f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
     /**
      * {@inheritdoc}
      */


723) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:224    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.546f717e29e09c01a788e2743381a906.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $expiresAt = \DateTimeImmutable::createFromFormat('U', (string) $json->payload->expires_at);
-        $resourceServerId = null !== $json->payload->resource_server_id ? ResourceServerId::create($json->payload->resource_server_id) : null;
+        $resourceServerId = null === $json->payload->resource_server_id ? ResourceServerId::create($json->payload->resource_server_id) : null;
         return new self($refreshTokenId, $resourceOwnerId, $clientId, $parameters, $metadatas, $expiresAt, $scopes, $resourceServerId, $recordedOn, $eventId);
     }
 }



724) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:212    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.73d99015523ed6e507bf477e591ebe78.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $refreshTokenId = RefreshTokenId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $resourceOwnerClass = $json->payload->resource_owner_class;
         $resourceOwnerId = $resourceOwnerClass::create($json->payload->resource_owner_id);


725) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenRevokedEvent.php:36    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e25a56f4b0d70f4308166e4e56297077.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function __construct(RefreshTokenId $refreshTokenId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(RefreshTokenId $refreshTokenId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->refreshTokenId = $refreshTokenId;
     }
     /**
      * {@inheritdoc}


726) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenRevokedEvent.php:55    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1eeeab27a21c7bbe6bc15c888f32619e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(RefreshTokenId $refreshTokenId) : self
+    protected static function create(RefreshTokenId $refreshTokenId) : self
     {
         return new self($refreshTokenId, null, null);
     }
     /**
      * @return RefreshTokenId
      */


727) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenRevokedEvent.php:63    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.df8629ea9188569344921b13f370c00a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getRefreshTokenId() : RefreshTokenId
+    protected function getRefreshTokenId() : RefreshTokenId
     {
         return $this->refreshTokenId;
     }
     /**
      * {@inheritdoc}
      */


728) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenRevokedEvent.php:71    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7bd90addfc176b42580da7567f726cc8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getRefreshTokenId();
     }
     /**
      * {@inheritdoc}
      */


729) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenRevokedEvent.php:86    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b7324f9d759060d7588efd2faeb717de.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $refreshTokenId = RefreshTokenId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         return new self($refreshTokenId, $recordedOn, $eventId);
     }


730) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:42    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bf8a3f78563f5340b1434a236b7bc72b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createEmpty() : self
+    protected static function createEmpty() : self
     {
         return new self();
     }
     /**
      * {@inheritdoc}
      */


731) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:50    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e9445ff63b612fdbb80395cd97821dff.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/model/refresh-token/1.0/schema';
     }
     /**
      * @param RefreshTokenId        $refreshTokenId
      * @param ResourceOwnerId       $resourceOwnerId


732) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:67    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.67baf594f630945d4a9ffc92a9e8c879.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function create(RefreshTokenId $refreshTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, \DateTimeImmutable $expiresAt, ?ResourceServerId $resourceServerId) : self
+    protected function create(RefreshTokenId $refreshTokenId, ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, \DateTimeImmutable $expiresAt, ?ResourceServerId $resourceServerId) : self
     {
         $clone = clone $this;
         $clone->refreshTokenId = $refreshTokenId;
         $clone->resourceOwnerId = $resourceOwnerId;
         $clone->clientId = $clientId;
         $clone->parameters = $parameters;


733) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:90    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9840fa604e31a870da2bd1944f63c3ea.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null === $this->refreshTokenId) {
+        if (null !== $this->refreshTokenId) {
             throw new \LogicException('Refresh token not initialized.');
         }
         return $this->refreshTokenId;
     }
     /**
      * @param AccessTokenId $accessTokenId


734) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:88    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d641d110af65eab36f1772a33a5ce97d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTokenId() : TokenId
+    protected function getTokenId() : TokenId
     {
         if (null === $this->refreshTokenId) {
             throw new \LogicException('Refresh token not initialized.');
         }
         return $this->refreshTokenId;
     }


735) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:102    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.608cc05d96eeb298c3905b66740d6a3c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function addAccessToken(AccessTokenId $accessTokenId) : self
+    protected function addAccessToken(AccessTokenId $accessTokenId) : self
     {
         $id = $accessTokenId->getValue();
         if (array_key_exists($id, $this->accessTokenIds)) {
             return $this;
         }
         $clone = clone $this;


736) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:120    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0989b17988d82501ea1a6b7aee486932.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAccessTokenIds() : array
+    protected function getAccessTokenIds() : array
     {
         return $this->accessTokenIds;
     }
     /**
      * @return array
      */


737) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:149    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9909d29b20aef6a09c84d88ff3e7ee7c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $refreshTokenId = RefreshTokenId::create($json->refresh_token_id);
-        $resourceServerId = null !== $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
+        $resourceServerId = null === $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
         $accessTokenIds = [];
         foreach ($json->access_token_ids as $access_token_id) {
             $accessTokenIds[$access_token_id] = AccessTokenId::create($access_token_id);
         }
         $expiresAt = \DateTimeImmutable::createFromFormat('U', (string) $json->expires_at);
         $clientId = ClientId::create($json->client_id);


738) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:151    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1d6ee4c4e1bb252527561fe3d6243243.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $accessTokenIds = [];
-        foreach ($json->access_token_ids as $access_token_id) {
+        foreach (array() as $access_token_id) {
             $accessTokenIds[$access_token_id] = AccessTokenId::create($access_token_id);
         }
         $expiresAt = \DateTimeImmutable::createFromFormat('U', (string) $json->expires_at);
         $clientId = ClientId::create($json->client_id);
         $parameters = DataBag::create((array) $json->parameters);
         $metadatas = DataBag::create((array) $json->metadatas);


739) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:146    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e6713a087b1f2efe43496ce401114193.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $refreshTokenId = RefreshTokenId::create($json->refresh_token_id);
         $resourceServerId = null !== $json->resource_server_id ? ResourceServerId::create($json->resource_server_id) : null;
         $accessTokenIds = [];
         foreach ($json->access_token_ids as $access_token_id) {
             $accessTokenIds[$access_token_id] = AccessTokenId::create($access_token_id);


740) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:185    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.352df48113cf890c1c16081dc61362cb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        $data = parent::jsonSerialize() + ['refresh_token_id' => $this->getTokenId()->getValue(), 'access_token_ids' => array_keys($this->getAccessTokenIds()), 'resource_server_id' => $this->getResourceServerId() ? $this->getResourceServerId()->getValue() : null];
+        $data = parent::jsonSerialize() - ['refresh_token_id' => $this->getTokenId()->getValue(), 'access_token_ids' => array_keys($this->getAccessTokenIds()), 'resource_server_id' => $this->getResourceServerId() ? $this->getResourceServerId()->getValue() : null];
         return $data;
     }
     /**
      * @return bool
      */
     public function isRevoked() : bool


741) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:183    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.22cb1f07c6f787f2b19ad8619d09cf4e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         $data = parent::jsonSerialize() + ['refresh_token_id' => $this->getTokenId()->getValue(), 'access_token_ids' => array_keys($this->getAccessTokenIds()), 'resource_server_id' => $this->getResourceServerId() ? $this->getResourceServerId()->getValue() : null];
         return $data;
     }
     /**
      * @return bool


742) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:197    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5cfe7376dc6e221960fc9711c03f7108.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isRevoked() : bool
+    protected function isRevoked() : bool
     {
         return $this->revoked;
     }
     /**
      * @return RefreshToken
      */


743) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:208    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.29328c9e2198b0b54cde7c6698de855d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         $event = RefreshTokenEvent\RefreshTokenRevokedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;
     }
     /**
      * @param Event $event


744) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:205    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f267bd57fcaa58c7b5ffea547a99a392.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function markAsRevoked() : self
+    protected function markAsRevoked() : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         $event = RefreshTokenEvent\RefreshTokenRevokedEvent::create($clone->getTokenId());
         $clone->record($event);
         return $clone;


745) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:223    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c5768a7908f65bf9deb49b542e249ea6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $map = $this->getEventMap();
-        if (!array_key_exists($event->getType(), $map)) {
+        if (array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->refreshTokenId && $this->refreshTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \RuntimeException('Event not applicable for this refresh token.');
         }
         $method = $map[$event->getType()];


746) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:226    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5d621c83e84687c99fd546f09abeb95e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->refreshTokenId && $this->refreshTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null === $this->refreshTokenId && $this->refreshTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \RuntimeException('Event not applicable for this refresh token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


747) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:226    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a42bfd8ace0f6faabe23442d9983622b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->refreshTokenId && $this->refreshTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->refreshTokenId && $this->refreshTokenId->getValue() === $event->getDomainId()->getValue()) {
             throw new \RuntimeException('Event not applicable for this refresh token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


748) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:226    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5c3140c92c153fa99e166fa2fc465245.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        if (null !== $this->refreshTokenId && $this->refreshTokenId->getValue() !== $event->getDomainId()->getValue()) {
+        if (null !== $this->refreshTokenId || $this->refreshTokenId->getValue() !== $event->getDomainId()->getValue()) {
             throw new \RuntimeException('Event not applicable for this refresh token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**


749) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:220    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6b9f0c05df07e58ed309406d698b5dcc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function apply(Event $event) : self
+    protected function apply(Event $event) : self
     {
         $map = $this->getEventMap();
         if (!array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->refreshTokenId && $this->refreshTokenId->getValue() !== $event->getDomainId()->getValue()) {


750) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:251    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c6287ec228b064b1866057a748cb225c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyRefreshTokenCreatedEvent(RefreshTokenEvent\RefreshTokenCreatedEvent $event) : self
+    private function applyRefreshTokenCreatedEvent(RefreshTokenEvent\RefreshTokenCreatedEvent $event) : self
     {
         $clone = clone $this;
         $clone->refreshTokenId = $event->getRefreshTokenId();
         $clone->resourceOwnerId = $event->getResourceOwnerId();
         $clone->clientId = $event->getClientId();
         $clone->parameters = $event->getParameters();


751) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:271    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6664ede9817dafeb15efd297d24de21e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyAccessTokenAddedToRefreshTokenEvent(RefreshTokenEvent\AccessTokenAddedToRefreshTokenEvent $event) : self
+    private function applyAccessTokenAddedToRefreshTokenEvent(RefreshTokenEvent\AccessTokenAddedToRefreshTokenEvent $event) : self
     {
         $clone = clone $this;
         $clone->accessTokenIds[$event->getAccessTokenId()->getValue()] = $event->getAccessTokenId();
         return $clone;
     }
     /**


752) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:287    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a1461c6d0eb132b0b229614f8b7f2fb5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         return $clone;
     }
 }



753) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:284    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.62fc4ddb665cb534b0a5b0bb2e305c14.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function applyRefreshTokenRevokedEvent(RefreshTokenEvent\RefreshTokenRevokedEvent $event) : self
+    private function applyRefreshTokenRevokedEvent(RefreshTokenEvent\RefreshTokenRevokedEvent $event) : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         return $clone;
     }
 }


754) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:42    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f4f15dbee495fd9fc5bd539073e54559.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAssociatedResponseTypes() : array
+    protected function getAssociatedResponseTypes() : array
     {
         return [];
     }
     /**
      * {@inheritdoc}
      */


755) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:50    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d4be2c1e4d20d0ec862185ce18d10524.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getGrantType() : string
+    protected function getGrantType() : string
     {
         return 'refresh_token';
     }
     /**
      * {@inheritdoc}
      */


756) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:64    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.181b57913187494f0a4e5d12458374e9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $diff = array_diff($requiredParameters, array_keys($parameters));
-        if (!empty($diff)) {
+        if (empty($diff)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('Missing grant type parameter(s): %s.', implode(', ', $diff)));
         }
     }
     /**
      * {@inheritdoc}
      */


757) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:58    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a0721d20c2f80fd47b9763494ccf7cc6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkTokenRequest(ServerRequestInterface $request)
+    protected function checkTokenRequest(ServerRequestInterface $request)
     {
         $parameters = $request->getParsedBody() ?? [];
         $requiredParameters = ['refresh_token'];
         $diff = array_diff($requiredParameters, array_keys($parameters));
         if (!empty($diff)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('Missing grant type parameter(s): %s.', implode(', ', $diff)));


758) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:78    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fabd73255c6a1c5c7a018458dde32b34.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $token = $this->refreshTokenRepository->find(RefreshTokenId::create($refreshToken));
-        if (null === $token) {
+        if (null !== $token) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "refresh_token" is invalid.');
         }
         $grantTypeData = $grantTypeData->withAvailableScopes($token->getScopes());
         return $grantTypeData;
     }
     /**


759) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:72    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.31325441eee860cc8b37d5a533bf7840.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         $parameters = $request->getParsedBody() ?? [];
         $refreshToken = $parameters['refresh_token'];
         $token = $this->refreshTokenRepository->find(RefreshTokenId::create($refreshToken));
         if (null === $token) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "refresh_token" is invalid.');


760) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:99    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e2778b5aac6b6684677a646b4a08fa0c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $grantTypeData = $grantTypeData->withResourceOwnerId($token->getResourceOwnerId());
-        foreach ($token->getMetadatas()->all() as $k => $v) {
+        foreach (array() as $k => $v) {
             $grantTypeData = $grantTypeData->withMetadata($k, $v);
         }
         foreach ($token->getParameters()->all() as $k => $v) {
             $grantTypeData = $grantTypeData->withParameter($k, $v);
         }
         return $grantTypeData;


761) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:102    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ae4da6d911361326c9eac5386a809e77.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        foreach ($token->getParameters()->all() as $k => $v) {
+        foreach (array() as $k => $v) {
             $grantTypeData = $grantTypeData->withParameter($k, $v);
         }
         return $grantTypeData;
     }
     /**
      * {@inheritdoc}


762) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:89    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.41ca54708b3124ce9934cdb0842308a0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         $parameters = $request->getParsedBody() ?? [];
         $refreshToken = $parameters['refresh_token'];
         $token = $this->refreshTokenRepository->find(RefreshTokenId::create($refreshToken));
         $client = $request->getAttribute('client');
         $this->checkRefreshToken($token, $client);


763) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:114    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9c176403921a1e266c1d7af5384dddae.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (true === $token->isRevoked() || $client->getPublicId()->getValue() !== $token->getClientId()->getValue()) {
+        if (false === $token->isRevoked() || $client->getPublicId()->getValue() !== $token->getClientId()->getValue()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "refresh_token" is invalid.');
         }
         if ($token->hasExpired()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Refresh token has expired.');
         }
     }


764) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:114    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.163369839a0fb3d344d7c5996fa0494e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (true === $token->isRevoked() || $client->getPublicId()->getValue() !== $token->getClientId()->getValue()) {
+        if (true !== $token->isRevoked() || $client->getPublicId()->getValue() !== $token->getClientId()->getValue()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "refresh_token" is invalid.');
         }
         if ($token->hasExpired()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Refresh token has expired.');
         }
     }


765) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:114    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ec88da21110afbbcb8c2e48f373d25db.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (true === $token->isRevoked() || $client->getPublicId()->getValue() !== $token->getClientId()->getValue()) {
+        if (true === $token->isRevoked() || $client->getPublicId()->getValue() === $token->getClientId()->getValue()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "refresh_token" is invalid.');
         }
         if ($token->hasExpired()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Refresh token has expired.');
         }
     }


766) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenGrantType.php:114    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.97c2adfd4a28ff6db2936a40bc371b48.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (true === $token->isRevoked() || $client->getPublicId()->getValue() !== $token->getClientId()->getValue()) {
+        if (true === $token->isRevoked() && $client->getPublicId()->getValue() !== $token->getClientId()->getValue()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'The parameter "refresh_token" is invalid.');
         }
         if ($token->hasExpired()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Refresh token has expired.');
         }
     }


767) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenId.php:25    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f950e2c89eb14ccb2705f47621dec2c9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }



768) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9f6d7bb68a4fd067e407834d0fb2c583.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function hint() : string
+    protected function hint() : string
     {
         return 'refresh_token';
     }
     /**
      * {@inheritdoc}
      */


769) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:48    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f52ddaead5ae0aaba9b6b5bbcf47cc6e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function find(string $token) : ?Token
+    protected function find(string $token) : ?Token
     {
         $id = RefreshTokenId::create($token);
         return $this->refreshTokenRepository->find($id);
     }
     /**
      * {@inheritdoc}


770) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:60    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4239b806ac7ee413f34d993d2b3b77c6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof RefreshToken || true === $token->isRevoked()) {
+        if ($token instanceof RefreshToken || true === $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->refreshTokenRepository->save($token);
     }
     /**


771) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:60    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cb9729a0fe9aa8f60cbdc9f0fbaa1dd8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof RefreshToken || true === $token->isRevoked()) {
+        if (!$token instanceof RefreshToken || false === $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->refreshTokenRepository->save($token);
     }
     /**


772) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:60    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a6017cc8162c92f2ebc101895ad18116.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof RefreshToken || true === $token->isRevoked()) {
+        if (!$token instanceof RefreshToken || true !== $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->refreshTokenRepository->save($token);
     }
     /**


773) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:60    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.eed68468c947fc529edf9f5cc1a484a7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof RefreshToken || true === $token->isRevoked()) {
+        if (!$token instanceof RefreshToken && true === $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->refreshTokenRepository->save($token);
     }
     /**


774) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:58    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.370556b2d597a2f0e88b829ca5d9e13c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function revoke(Token $token)
+    protected function revoke(Token $token)
     {
         if (!$token instanceof RefreshToken || true === $token->isRevoked()) {
             return;
         }
         $token = $token->markAsRevoked();
         $this->refreshTokenRepository->save($token);


775) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:73    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6b9a25722b3a8d3d88c12fbe5d290457.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof RefreshToken || $token->isRevoked() || $token->hasExpired()) {
+        if ($token instanceof RefreshToken || $token->isRevoked() || $token->hasExpired()) {
             return ['active' => false];
         }
         $result = ['active' => true, 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
         if (!empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }


776) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:73    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a0289819d43a0aefb38958ef2c6f0f7c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof RefreshToken || $token->isRevoked() || $token->hasExpired()) {
+        if (!$token instanceof RefreshToken && $token->isRevoked() || $token->hasExpired()) {
             return ['active' => false];
         }
         $result = ['active' => true, 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
         if (!empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }


777) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:73    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6a710dcc97f0a8f36afe75fdb836cd93.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$token instanceof RefreshToken || $token->isRevoked() || $token->hasExpired()) {
+        if ((!$token instanceof RefreshToken || $token->isRevoked()) && $token->hasExpired()) {
             return ['active' => false];
         }
         $result = ['active' => true, 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
         if (!empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }


778) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:75    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.23a87640054d2f48182f0726bef7b4eb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         if (!$token instanceof RefreshToken || $token->isRevoked() || $token->hasExpired()) {
-            return ['active' => false];
+            return ['active' => true];
         }
         $result = ['active' => true, 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
         if (!empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }
         return $result;


779) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:80    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.87734221d183de3ad98f1afa9712329c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        $result = ['active' => true, 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
+        $result = ['active' => false, 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
         if (!empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }
         return $result;
     }
 }


780) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:85    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0a1ef24d6268ff858021f3b8026cea1e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $result = ['active' => true, 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
-        if (!empty($token->getScopes())) {
+        if (empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }
         return $result;
     }
 }



781) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshTokenTypeHint.php:71    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.07103ab33dfb4bc3cc300f469e8e9bbf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function introspect(Token $token) : array
+    protected function introspect(Token $token) : array
     {
         if (!$token instanceof RefreshToken || $token->isRevoked() || $token->hasExpired()) {
             return ['active' => false];
         }
         $result = ['active' => true, 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
         if (!empty($token->getScopes())) {


782) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:50    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e4c0148613845297d3049ef0ae070641.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAssociatedResponseTypes() : array
+    protected function getAssociatedResponseTypes() : array
     {
         return [];
     }
     /**
      * {@inheritdoc}
      */


783) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:58    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.64a63d9bd6f31132eb4a60d1bee25e27.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getGrantType() : string
+    protected function getGrantType() : string
     {
         return 'password';
     }
     /**
      * {@inheritdoc}
      */


784) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:72    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d63f39cfe637797297b3b8016da217c1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $diff = array_diff($requiredParameters, array_keys($parameters));
-        if (!empty($diff)) {
+        if (empty($diff)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('Missing grant type parameter(s): %s.', implode(', ', $diff)));
         }
     }
     /**
      * {@inheritdoc}
      */


785) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:66    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.800d79fa5405c9397a054d77e9bd163b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkTokenRequest(ServerRequestInterface $request)
+    protected function checkTokenRequest(ServerRequestInterface $request)
     {
         $parameters = $request->getParsedBody() ?? [];
         $requiredParameters = ['username', 'password'];
         $diff = array_diff($requiredParameters, array_keys($parameters));
         if (!empty($diff)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('Missing grant type parameter(s): %s.', implode(', ', $diff)));


786) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:80    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c01114f83fd1eb42dbbf877b1f300151.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function prepareTokenResponse(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         // Nothing to do
         return $grantTypeData;
     }
     /**
      * {@inheritdoc}


787) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:96    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.609de27d4f1f38946bdb526f1362948e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $userAccount = $this->userAccountRepository->findOneByUsername($username);
-        if (null === $userAccount || !$this->userAccountManager->isPasswordCredentialValid($userAccount, $password)) {
+        if (null !== $userAccount || !$this->userAccountManager->isPasswordCredentialValid($userAccount, $password)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Invalid username and password combination.');
         }
         $grantTypeData = $grantTypeData->withResourceOwnerId($userAccount->getPublicId());
         return $grantTypeData;
     }
 }


788) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:96    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2f5a800331d1ab69c8a6ec9127759426.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $userAccount = $this->userAccountRepository->findOneByUsername($username);
-        if (null === $userAccount || !$this->userAccountManager->isPasswordCredentialValid($userAccount, $password)) {
+        if (null === $userAccount || $this->userAccountManager->isPasswordCredentialValid($userAccount, $password)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Invalid username and password combination.');
         }
         $grantTypeData = $grantTypeData->withResourceOwnerId($userAccount->getPublicId());
         return $grantTypeData;
     }
 }


789) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:96    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5fba497df43e64d03c530dee68002136.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $userAccount = $this->userAccountRepository->findOneByUsername($username);
-        if (null === $userAccount || !$this->userAccountManager->isPasswordCredentialValid($userAccount, $password)) {
+        if (null === $userAccount && !$this->userAccountManager->isPasswordCredentialValid($userAccount, $password)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_GRANT, 'Invalid username and password combination.');
         }
         $grantTypeData = $grantTypeData->withResourceOwnerId($userAccount->getPublicId());
         return $grantTypeData;
     }
 }


790) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ResourceOwnerPasswordCredentialsGrant/ResourceOwnerPasswordCredentialsGrantType.php:89    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8f5550d7a0e3961528b050706f56f30d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
+    protected function grant(ServerRequestInterface $request, GrantTypeData $grantTypeData) : GrantTypeData
     {
         $parsedBody = $request->getParsedBody() ?? [];
         $username = $parsedBody['username'];
         $password = $parsedBody['password'];
         $userAccount = $this->userAccountRepository->findOneByUsername($username);
         if (null === $userAccount || !$this->userAccountManager->isPasswordCredentialValid($userAccount, $password)) {


791) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:41    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.18a9fe9106a459ff86054ed68e29e014.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime < 1) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->realm = $realm;
         $this->secretLifetime = $secretLifetime;
     }
     /**


792) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:41    [M] LessThan
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9837181704e3e1db63ead34aceaa4439.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime <= 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->realm = $realm;
         $this->secretLifetime = $secretLifetime;
     }
     /**


793) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:41    [M] LessThanNegotiation
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.595e7e802071b5475c9cbaabb0cc2409.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime >= 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->realm = $realm;
         $this->secretLifetime = $secretLifetime;
     }
     /**


794) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:52    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.23f2558b7d55813110b07b8616281d9c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getSchemesParameters() : array
+    protected function getSchemesParameters() : array
     {
         return [sprintf('Basic realm="%s",charset="UTF-8"', $this->realm)];
     }
     /**
      * {@inheritdoc}
      */


795) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:65    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.6c627fd01e731f3b5cb80b1838eeeb52.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorization_headers = $request->getHeader('Authorization');
-        if (0 < count($authorization_headers)) {
+        if (1 < count($authorization_headers)) {
             foreach ($authorization_headers as $authorization_header) {
                 $clientId = $this->findClientIdAndCredentialsInAuthorizationHeader($authorization_header, $client_credentials);
                 if (null !== $clientId) {
                     return $clientId;
                 }
             }


796) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:65    [M] LessThan
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8cd3663cf6382f9b69d4144090a76c0d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorization_headers = $request->getHeader('Authorization');
-        if (0 < count($authorization_headers)) {
+        if (0 <= count($authorization_headers)) {
             foreach ($authorization_headers as $authorization_header) {
                 $clientId = $this->findClientIdAndCredentialsInAuthorizationHeader($authorization_header, $client_credentials);
                 if (null !== $clientId) {
                     return $clientId;
                 }
             }


797) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:65    [M] LessThanNegotiation
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cf471fcd2d77687829f9fe9304a7fdb6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $authorization_headers = $request->getHeader('Authorization');
-        if (0 < count($authorization_headers)) {
+        if (0 >= count($authorization_headers)) {
             foreach ($authorization_headers as $authorization_header) {
                 $clientId = $this->findClientIdAndCredentialsInAuthorizationHeader($authorization_header, $client_credentials);
                 if (null !== $clientId) {
                     return $clientId;
                 }
             }


798) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:68    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9b25adb9255ccac33fef9ef9f6b1241b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $clientId = $this->findClientIdAndCredentialsInAuthorizationHeader($authorization_header, $client_credentials);
-                if (null !== $clientId) {
+                if (null === $clientId) {
                     return $clientId;
                 }
             }
         }
         return null;
     }


799) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:66    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cdde143ee0af2fa74c12ffa1a9a82237.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         if (0 < count($authorization_headers)) {
-            foreach ($authorization_headers as $authorization_header) {
+            foreach (array() as $authorization_header) {
                 $clientId = $this->findClientIdAndCredentialsInAuthorizationHeader($authorization_header, $client_credentials);
                 if (null !== $clientId) {
                     return $clientId;
                 }
             }
         }


800) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:62    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a112e3eb4e47ef7b8617e9c0275269e6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function findClientId(ServerRequestInterface $request, &$client_credentials = null) : ?ClientId
+    protected function findClientId(ServerRequestInterface $request, &$client_credentials = null) : ?ClientId
     {
         $authorization_headers = $request->getHeader('Authorization');
         if (0 < count($authorization_headers)) {
             foreach ($authorization_headers as $authorization_header) {
                 $clientId = $this->findClientIdAndCredentialsInAuthorizationHeader($authorization_header, $client_credentials);
                 if (null !== $clientId) {


801) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:85    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cb47726cab8daddbfc8d62e14bf4b153.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ('basic ' === mb_strtolower(mb_substr($authorization_header, 0, 6, '8bit'), '8bit')) {
+        if ('basic ' === mb_strtolower(mb_substr($authorization_header, 1, 6, '8bit'), '8bit')) {
             list($client_id, $client_secret) = explode(':', base64_decode(mb_substr($authorization_header, 6, mb_strlen($authorization_header, '8bit') - 6, '8bit')));
             if (!empty($client_id) && !empty($client_secret)) {
                 $client_credentials = $client_secret;
                 return ClientId::create($client_id);
             }
         }


802) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:85    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0935ebb9f3658e1883ad5fe00338d1a9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ('basic ' === mb_strtolower(mb_substr($authorization_header, 0, 6, '8bit'), '8bit')) {
+        if ('basic ' !== mb_strtolower(mb_substr($authorization_header, 0, 6, '8bit'), '8bit')) {
             list($client_id, $client_secret) = explode(':', base64_decode(mb_substr($authorization_header, 6, mb_strlen($authorization_header, '8bit') - 6, '8bit')));
             if (!empty($client_id) && !empty($client_secret)) {
                 $client_credentials = $client_secret;
                 return ClientId::create($client_id);
             }
         }


803) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:86    [M] Minus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f4944de38a3689ebaf11251fe5f095a5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         if ('basic ' === mb_strtolower(mb_substr($authorization_header, 0, 6, '8bit'), '8bit')) {
-            list($client_id, $client_secret) = explode(':', base64_decode(mb_substr($authorization_header, 6, mb_strlen($authorization_header, '8bit') - 6, '8bit')));
+            list($client_id, $client_secret) = explode(':', base64_decode(mb_substr($authorization_header, 6, mb_strlen($authorization_header, '8bit') + 6, '8bit')));
             if (!empty($client_id) && !empty($client_secret)) {
                 $client_credentials = $client_secret;
                 return ClientId::create($client_id);
             }
         }
         return null;


804) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:87    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8632eb9a3b62534f3f798c5e06d9b842.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             list($client_id, $client_secret) = explode(':', base64_decode(mb_substr($authorization_header, 6, mb_strlen($authorization_header, '8bit') - 6, '8bit')));
-            if (!empty($client_id) && !empty($client_secret)) {
+            if (empty($client_id) && !empty($client_secret)) {
                 $client_credentials = $client_secret;
                 return ClientId::create($client_id);
             }
         }
         return null;
     }


805) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:87    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c038b0e48843c962f89d0ad5a4105e63.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             list($client_id, $client_secret) = explode(':', base64_decode(mb_substr($authorization_header, 6, mb_strlen($authorization_header, '8bit') - 6, '8bit')));
-            if (!empty($client_id) && !empty($client_secret)) {
+            if (!empty($client_id) && empty($client_secret)) {
                 $client_credentials = $client_secret;
                 return ClientId::create($client_id);
             }
         }
         return null;
     }


806) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:87    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.15a5ea8a6bd705a58d1dfb37501a5c47.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             list($client_id, $client_secret) = explode(':', base64_decode(mb_substr($authorization_header, 6, mb_strlen($authorization_header, '8bit') - 6, '8bit')));
-            if (!empty($client_id) && !empty($client_secret)) {
+            if (!empty($client_id) || !empty($client_secret)) {
                 $client_credentials = $client_secret;
                 return ClientId::create($client_id);
             }
         }
         return null;
     }


807) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:103    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.75cad2117629cda33d14a21501183ffd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
-        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 1 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */
     public function isClientAuthenticated(Client $client, $client_credentials, ServerRequestInterface $request) : bool


808) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:103    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.01627931d9e79558be013c76aeb798d9.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
-        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 !== $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */
     public function isClientAuthenticated(Client $client, $client_credentials, ServerRequestInterface $request) : bool


809) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:103    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a6f9535a27c67e541075a11585cafa96.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
-        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 1 : time() + $this->secretLifetime);
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */
     public function isClientAuthenticated(Client $client, $client_credentials, ServerRequestInterface $request) : bool


810) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:103    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.332c7bff4697b3a7ea057a1f70366506.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
-        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() - $this->secretLifetime);
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */
     public function isClientAuthenticated(Client $client, $client_credentials, ServerRequestInterface $request) : bool


811) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:100    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.132bb281da8cd9a855c766478c910e16.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkClientConfiguration(DataBag $command_parameters, DataBag $validated_parameters) : DataBag
+    protected function checkClientConfiguration(DataBag $command_parameters, DataBag $validated_parameters) : DataBag
     {
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
         $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         return $validated_parameters;
     }
     /**


812) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:111    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1254edc47026f5908adbd53a1b8ec3c5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isClientAuthenticated(Client $client, $client_credentials, ServerRequestInterface $request) : bool
+    protected function isClientAuthenticated(Client $client, $client_credentials, ServerRequestInterface $request) : bool
     {
         return hash_equals($client->get('client_secret'), $client_credentials);
     }
     /**
      * {@inheritdoc}
      */


813) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:119    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.86a2060784bf309cbb1ee6f6d9f08ba0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getSupportedAuthenticationMethods() : array
+    protected function getSupportedAuthenticationMethods() : array
     {
         return ['client_secret_basic'];
     }
     /**
      * @return string
      */


814) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:35    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e174fd2105c83750d39abd364b811321.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime < 1) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->secretLifetime = $secretLifetime;
     }
     /**
      * {@inheritdoc}


815) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:35    [M] LessThan
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a9cec6d785d5276089214b22a82c2744.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime <= 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->secretLifetime = $secretLifetime;
     }
     /**
      * {@inheritdoc}


816) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:35    [M] LessThanNegotiation
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e961bfdf50b85ffac897ab45fa1fdaa7.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime >= 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->secretLifetime = $secretLifetime;
     }
     /**
      * {@inheritdoc}


817) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:45    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.53ec298e8d526c5819ab5a7a102a922e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getSchemesParameters() : array
+    protected function getSchemesParameters() : array
     {
         return [];
     }
     /**
      * {@inheritdoc}
      */


818) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:56    [M] LogicalAnd
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a56430c45785cd9d0888962210818d61.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $parameters = $request->getParsedBody() ?? [];
-        if (array_key_exists('client_id', $parameters) && array_key_exists('client_secret', $parameters)) {
+        if (array_key_exists('client_id', $parameters) || array_key_exists('client_secret', $parameters)) {
             $clientCredentials = $parameters['client_secret'];
             return ClientId::create($parameters['client_id']);
         }
         return null;
     }
     /**


819) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:53    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.36dbc17a80d996413b7b3c5caa5027eb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function findClientId(ServerRequestInterface $request, &$clientCredentials = null) : ?ClientId
+    protected function findClientId(ServerRequestInterface $request, &$clientCredentials = null) : ?ClientId
     {
         $parameters = $request->getParsedBody() ?? [];
         if (array_key_exists('client_id', $parameters) && array_key_exists('client_secret', $parameters)) {
             $clientCredentials = $parameters['client_secret'];
             return ClientId::create($parameters['client_id']);
         }


820) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:71    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e1cd704d36f090cdfc3e4d9f4598ab82.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
-        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 1 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */
     public function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool


821) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:71    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.84e5e95530aba22d118a60fd6b663f61.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
-        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 !== $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */
     public function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool


822) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:71    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d934cf14db6c64c5cc6c5e6bd954adc1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
-        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 1 : time() + $this->secretLifetime);
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */
     public function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool


823) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:71    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dc45d460f6362d7b46d04a67bcc92e6d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
-        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+        $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() - $this->secretLifetime);
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */
     public function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool


824) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:68    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.16c2a116715f0ea736aa7348b00bb7e0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkClientConfiguration(DataBag $command_parameters, DataBag $validated_parameters) : DataBag
+    protected function checkClientConfiguration(DataBag $command_parameters, DataBag $validated_parameters) : DataBag
     {
         $validated_parameters = $validated_parameters->with('client_secret', $this->createClientSecret());
         $validated_parameters = $validated_parameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         return $validated_parameters;
     }
     /**


825) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:79    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8e606937220b597475675ff6cf09eaea.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool
+    protected function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool
     {
         return hash_equals($client->get('client_secret'), $clientCredentials);
     }
     /**
      * {@inheritdoc}
      */


826) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:87    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ce137ff6d1852ddf23c35307c2ebfa1d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getSupportedAuthenticationMethods() : array
+    protected function getSupportedAuthenticationMethods() : array
     {
         return ['client_secret_post'];
     }
     /**
      * @return string
      */


827) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/None.php:26    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7fcb9920e68c5fe23132d260db290259.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getSchemesParameters() : array
+    protected function getSchemesParameters() : array
     {
         return [];
     }
     /**
      * {@inheritdoc}
      */


828) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/None.php:34    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8001e00811db422da4a8b372c55ba9dc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function findClientId(ServerRequestInterface $request, &$clientCredentials = null) : ?ClientId
+    protected function findClientId(ServerRequestInterface $request, &$clientCredentials = null) : ?ClientId
     {
         $parameters = $request->getParsedBody() ?? [];
         if (array_key_exists('client_id', $parameters)) {
             return ClientId::create($parameters['client_id']);
         }
         return null;


829) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/None.php:47    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e858e593304ceb1f0d612295b60aac80.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function checkClientConfiguration(DataBag $command_parameters, DataBag $validated_parameters) : DataBag
+    protected function checkClientConfiguration(DataBag $command_parameters, DataBag $validated_parameters) : DataBag
     {
         return $validated_parameters;
     }
     /**
      * {@inheritdoc}
      */


830) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/None.php:57    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.826601804341a389aaeb370313bc9ec6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        return true;
+        return false;
     }
     /**
      * {@inheritdoc}
      */
     public function getSupportedAuthenticationMethods() : array
     {


831) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/None.php:55    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.be7c93b5f1693db5d603c1784c9e3102.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool
+    protected function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool
     {
         return true;
     }
     /**
      * {@inheritdoc}
      */


832) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/None.php:63    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c418f0b9655d9c19887772447e143038.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getSupportedAuthenticationMethods() : array
+    protected function getSupportedAuthenticationMethods() : array
     {
         return ['none'];
     }
 }



833) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:69    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8bae3a8cd1f7e6fe0abc34cd81e8b760.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public static function create(?Client $client) : self
+    protected static function create(?Client $client) : self
     {
         return new self($client);
     }
     /**
      * @param string $key
      * @param mixed  $metadata


834) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:80    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b45b5bfc89f960147ac8c0b2f8637f4b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withMetadata(string $key, $metadata) : self
+    protected function withMetadata(string $key, $metadata) : self
     {
         $clone = clone $this;
         $clone->metadatas = $this->metadatas->with($key, $metadata);
         return $clone;
     }
     /**


835) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:115    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9d21d00086553303611cdfe0040d7d7e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function hasMetadata(string $key) : bool
+    protected function hasMetadata(string $key) : bool
     {
         return $this->metadatas->has($key);
     }
     /**
      * @param string $key
      * @param $parameter


836) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:126    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.644ee4fe83d8754ef72acfc96e3f5ecb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withParameter(string $key, $parameter) : self
+    protected function withParameter(string $key, $parameter) : self
     {
         $clone = clone $this;
         $clone->parameters = $this->parameters->with($key, $parameter);
         return $clone;
     }
     /**


837) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:171    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bf185b5ae1f86a6560f5dfad29c9282e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withClient(Client $client) : self
+    protected function withClient(Client $client) : self
     {
         $clone = clone $this;
         $clone->client = $client;
         return $clone;
     }
     /**


838) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:182    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7171296ffb57db1ebbd3e91ab2c0c8d5.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getClient() : ?Client
+    protected function getClient() : ?Client
     {
         return $this->client;
     }
     /**
      * @param ResourceOwnerId $resourceOwnerId
      *


839) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:192    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.636e90b49ff1246950fa2e7ffd837711.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withResourceOwnerId(ResourceOwnerId $resourceOwnerId) : self
+    protected function withResourceOwnerId(ResourceOwnerId $resourceOwnerId) : self
     {
         $clone = clone $this;
         $clone->resourceOwnerId = $resourceOwnerId;
         return $clone;
     }
     /**


840) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:203    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1b3c193d72b25a2242fc539adaa5ccdd.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getResourceOwnerId() : ResourceOwnerId
+    protected function getResourceOwnerId() : ResourceOwnerId
     {
         return $this->resourceOwnerId;
     }
     /**
      * @param string[] $scopes
      *


841) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:275    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9d8935ba1503c51d153360a5bafded91.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getAvailableScopes() : ?array
+    protected function getAvailableScopes() : ?array
     {
         return $this->availableScopes;
     }
     /**
      * @param string[] $scopes
      *


842) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:285    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.aad4afd4aeda72c9db3bcc11149979df.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function withAvailableScopes(array $scopes) : self
+    protected function withAvailableScopes(array $scopes) : self
     {
         $clone = clone $this;
         $clone->availableScopes = $scopes;
         return $clone;
     }
 }


843) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeManager.php:28    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ca1eaef2959fe071ad31ab30b8bd659a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(GrantType $grantType) : self
+    protected function add(GrantType $grantType) : self
     {
         $this->grantTypes[$grantType->getGrantType()] = $grantType;
         return $this;
     }
     /**
      * @param string $name


844) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeManager.php:40    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ad16c522e4708dcf7f72bbd33423420d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function has(string $name) : bool
+    protected function has(string $name) : bool
     {
         return array_key_exists($name, $this->grantTypes);
     }
     /**
      * @param string $names
      *


845) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeManager.php:52    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.832017333460458c16e48fb464c4b1f2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->has($names)) {
+        if ($this->has($names)) {
             throw new \InvalidArgumentException(sprintf('The grant type "%s" is not supported.', $names));
         }
         return $this->grantTypes[$names];
     }
     /**
      * @return string[]


846) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeManager.php:50    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.db18fa58c75a4f2dc752c6a190e788b3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function get(string $names) : GrantType
+    protected function get(string $names) : GrantType
     {
         if (!$this->has($names)) {
             throw new \InvalidArgumentException(sprintf('The grant type "%s" is not supported.', $names));
         }
         return $this->grantTypes[$names];
     }


847) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:60    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a20943b307b0e21f4cb074ef99b98e66.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $result = $hint->find($token);
-                if (null !== $result) {
+                if (null === $result) {
                     if (null === $result->getResourceServerId() || $result->getResourceServerId()->getValue() === $resourceServer->getResourceServerId()->getValue()) {
                         $data = $hint->introspect($result);
                         $response = $this->responseFactory->createResponse();
                         $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
                         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
                         foreach ($headers as $k => $v) {


848) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:61    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2d4edde260ded81e57e7592c78eedd99.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 if (null !== $result) {
-                    if (null === $result->getResourceServerId() || $result->getResourceServerId()->getValue() === $resourceServer->getResourceServerId()->getValue()) {
+                    if (null !== $result->getResourceServerId() || $result->getResourceServerId()->getValue() === $resourceServer->getResourceServerId()->getValue()) {
                         $data = $hint->introspect($result);
                         $response = $this->responseFactory->createResponse();
                         $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
                         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
                         foreach ($headers as $k => $v) {
                             $response = $response->withHeader($k, $v);


849) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:61    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.37feb8d576c89598bb3e0ced6b1e11d4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 if (null !== $result) {
-                    if (null === $result->getResourceServerId() || $result->getResourceServerId()->getValue() === $resourceServer->getResourceServerId()->getValue()) {
+                    if (null === $result->getResourceServerId() || $result->getResourceServerId()->getValue() !== $resourceServer->getResourceServerId()->getValue()) {
                         $data = $hint->introspect($result);
                         $response = $this->responseFactory->createResponse();
                         $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
                         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
                         foreach ($headers as $k => $v) {
                             $response = $response->withHeader($k, $v);


850) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:61    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.65d8b0aa35b1bb5e76aafd2252d8b819.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 if (null !== $result) {
-                    if (null === $result->getResourceServerId() || $result->getResourceServerId()->getValue() === $resourceServer->getResourceServerId()->getValue()) {
+                    if (null === $result->getResourceServerId() && $result->getResourceServerId()->getValue() === $resourceServer->getResourceServerId()->getValue()) {
                         $data = $hint->introspect($result);
                         $response = $this->responseFactory->createResponse();
                         $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
                         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
                         foreach ($headers as $k => $v) {
                             $response = $response->withHeader($k, $v);


851) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:64    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.228e333c0bf1839332455da2256ad347.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                         $response = $this->responseFactory->createResponse();
-                        $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+                        $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
                         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
                         foreach ($headers as $k => $v) {
                             $response = $response->withHeader($k, $v);
                         }
                         return $response;
                     }


852) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:66    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.cb993f395e23b9a3c35167db67d3dcf2.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-                        foreach ($headers as $k => $v) {
+                        foreach (array() as $k => $v) {
                             $response = $response->withHeader($k, $v);
                         }
                         return $response;
                     }
                 }
             }


853) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:58    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fff1641d09be21329b730694e2f7b8d4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $hints = $this->getTokenTypeHints($request);
-            foreach ($hints as $hint) {
+            foreach (array() as $hint) {
                 $result = $hint->find($token);
                 if (null !== $result) {
                     if (null === $result->getResourceServerId() || $result->getResourceServerId()->getValue() === $resourceServer->getResourceServerId()->getValue()) {
                         $data = $hint->introspect($result);
                         $response = $this->responseFactory->createResponse();
                         $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));


854) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:82    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ff9465c2fae62d16fbf253f1b6822fbc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $response = $this->responseFactory->createResponse($responseStatucCode);
-        $response->getBody()->write(json_encode($responseContent, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+        $response->getBody()->write(json_encode($responseContent, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
         foreach ($headers as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }


855) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:84    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0c861ce762bdf03c1e9f8791c230f968.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
     /**
      * @param ServerRequestInterface $request


856) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:51    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b29d6f504a5247d4ad8c240c628f1ddb.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         try {
             $resourceServer = $this->getResourceServer($request);
             $token = $this->getToken($request);
             $hints = $this->getTokenTypeHints($request);
             foreach ($hints as $hint) {


857) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:101    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.88e42d21a807fb3c0dac94cb891f775c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $resourceServer = $request->getAttribute('resource_server');
-        if (null === $resourceServer) {
+        if (null !== $resourceServer) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_RESOURCE_SERVER, 'Resource Server authentication failed.');
         }
         return $resourceServer;
     }
     /**
      * @param ServerRequestInterface $request


858) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:118    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.81ef600996ffd259ae03b28029a8b3b6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $params = $this->getRequestParameters($request);
-        if (!array_key_exists('token', $params)) {
+        if (array_key_exists('token', $params)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "token" is missing.');
         }
         return $params['token'];
     }
     /**
      * @param ServerRequestInterface $request


859) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:115    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.aec71cb78cd599d84dbcb23db96454bc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getToken(ServerRequestInterface $request) : string
+    private function getToken(ServerRequestInterface $request) : string
     {
         $params = $this->getRequestParameters($request);
         if (!array_key_exists('token', $params)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "token" is missing.');
         }
         return $params['token'];


860) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:139    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.73eb3c14bacb617d2213aa944465439f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $tokenTypeHint = $params['token_type_hint'];
-            if (!array_key_exists($params['token_type_hint'], $tokenTypeHints)) {
+            if (array_key_exists($params['token_type_hint'], $tokenTypeHints)) {
                 throw new OAuth2Exception(400, 'unsupported_token_type', sprintf('The token type hint "%s" is not supported. Please use one of the following values: %s.', $params['token_type_hint'], implode(', ', array_keys($tokenTypeHints))));
             }
             $hint = $tokenTypeHints[$tokenTypeHint];
             unset($tokenTypeHints[$tokenTypeHint]);
             $tokenTypeHints = [$tokenTypeHint => $hint] + $tokenTypeHints;
         }


861) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:145    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.91af00956e9a944e96d303df1a6ff5bc.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             unset($tokenTypeHints[$tokenTypeHint]);
-            $tokenTypeHints = [$tokenTypeHint => $hint] + $tokenTypeHints;
+            $tokenTypeHints = [$tokenTypeHint => $hint] - $tokenTypeHints;
         }
         return $tokenTypeHints;
     }
     /**
      * @param ServerRequestInterface $request
      *


862) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:132    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.4f96e3e768c7fca60b6856348f49850b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getTokenTypeHints(ServerRequestInterface $request) : array
+    private function getTokenTypeHints(ServerRequestInterface $request) : array
     {
         $params = $this->getRequestParameters($request);
         $tokenTypeHints = $this->tokenTypeHintManager->getTokenTypeHints();
         if (array_key_exists('token_type_hint', $params)) {
             $tokenTypeHint = $params['token_type_hint'];
             if (!array_key_exists($params['token_type_hint'], $tokenTypeHints)) {


863) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:156    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.7d082132d762c1ff051f8be141140298.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getRequestParameters(ServerRequestInterface $request) : array
+    private function getRequestParameters(ServerRequestInterface $request) : array
     {
         $parameters = $request->getParsedBody() ?? [];
         return array_intersect_key($parameters, array_flip(['token', 'token_type_hint']));
     }
 }



864) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenTypeHintManager.php:26    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9e0a8c3b988d7cee39f44c06461f2497.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTokenTypeHints() : array
+    protected function getTokenTypeHints() : array
     {
         return $this->tokenTypeHints;
     }
     /**
      * @param TokenTypeHint $tokenTypeHint
      *


865) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenTypeHintManager.php:36    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.df370fe2a47cf69f219315852a9ed542.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(TokenTypeHint $tokenTypeHint) : self
+    protected function add(TokenTypeHint $tokenTypeHint) : self
     {
         $this->tokenTypeHints[$tokenTypeHint->hint()] = $tokenTypeHint;
         return $this;
     }
 }



866) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:62    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.dd9637db3ad597750c777b4ff585d15d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 $result = $hint->find($token);
-                if (null !== $result) {
+                if (null === $result) {
                     if ($client->getPublicId()->getValue() === $result->getClientId()->getValue()) {
                         $hint->revoke($result);
                         return $this->getResponse(200, '', $callback);
                     } else {
                         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "token" is invalid.');
                     }


867) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:63    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.5e34691d5fa89d95b855fe7f8c65cb38.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
                 if (null !== $result) {
-                    if ($client->getPublicId()->getValue() === $result->getClientId()->getValue()) {
+                    if ($client->getPublicId()->getValue() !== $result->getClientId()->getValue()) {
                         $hint->revoke($result);
                         return $this->getResponse(200, '', $callback);
                     } else {
                         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "token" is invalid.');
                     }
                 }


868) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:60    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.1d859cd8ccf7e6a3ace3e8ff928c027b.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $hints = $this->getTokenTypeHints($request);
-            foreach ($hints as $hint) {
+            foreach (array() as $hint) {
                 $result = $hint->find($token);
                 if (null !== $result) {
                     if ($client->getPublicId()->getValue() === $result->getClientId()->getValue()) {
                         $hint->revoke($result);
                         return $this->getResponse(200, '', $callback);
                     } else {


869) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:75    [M] BitwiseOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fd43c54e009ad1fd96f9746ce2690795.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         } catch (OAuth2Exception $e) {
-            return $this->getResponse($e->getCode(), json_encode($e->getData(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES), $callback);
+            return $this->getResponse($e->getCode(), json_encode($e->getData(), JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES), $callback);
         }
     }
     /**
      * @param int         $code
      * @param string      $data
      * @param null|string $callback


870) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:51    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.731aa3df30a98afd475750e58917c010.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $callback = $this->getCallback($request);
         try {
             $client = $this->getClient($request);
             $token = $this->getToken($request);
             $hints = $this->getTokenTypeHints($request);


871) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:88    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0434aeee6d10191333df5e83965b2b65.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (null !== $callback) {
+        if (null === $callback) {
             $data = sprintf('%s(%s)', $callback, $data);
         }
         $response = $this->responseFactory->createResponse($code);
         $response->getBody()->write($data);
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
         foreach ($headers as $k => $v) {


872) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:95    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.819417b2c94ebc4aac13577a4adbf047.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
     /**
      * @param ServerRequestInterface $request


873) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:112    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3226d0492bf71b9a0c4945dbc3cffd5e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $client = $request->getAttribute('client');
-        if (null === $client) {
+        if (null !== $client) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         return $client;
     }
     /**
      * @param ServerRequestInterface $request


874) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:129    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8c01d6a39568d1f7d2199a0f3a306bbf.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $params = $this->getRequestParameters($request);
-        if (!array_key_exists('token', $params)) {
+        if (array_key_exists('token', $params)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "token" is missing.');
         }
         return $params['token'];
     }
     /**
      * @param ServerRequestInterface $request


875) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:126    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.c437663f20b0ad71cbb5a247454284d1.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getToken(ServerRequestInterface $request) : string
+    private function getToken(ServerRequestInterface $request) : string
     {
         $params = $this->getRequestParameters($request);
         if (!array_key_exists('token', $params)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "token" is missing.');
         }
         return $params['token'];


876) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:150    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fa8618606739ab381c246be1003c25ac.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $tokenTypeHint = $params['token_type_hint'];
-            if (!array_key_exists($params['token_type_hint'], $tokenTypeHints)) {
+            if (array_key_exists($params['token_type_hint'], $tokenTypeHints)) {
                 throw new OAuth2Exception(400, 'unsupported_token_type', sprintf('The token type hint "%s" is not supported. Please use one of the following values: %s.', $params['token_type_hint'], implode(', ', array_keys($tokenTypeHints))));
             }
             $hint = $tokenTypeHints[$tokenTypeHint];
             unset($tokenTypeHints[$tokenTypeHint]);
             $tokenTypeHints = [$tokenTypeHint => $hint] + $tokenTypeHints;
         }


877) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:156    [M] Plus
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.377b3f570268d7e8f330c10d9b0be703.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             unset($tokenTypeHints[$tokenTypeHint]);
-            $tokenTypeHints = [$tokenTypeHint => $hint] + $tokenTypeHints;
+            $tokenTypeHints = [$tokenTypeHint => $hint] - $tokenTypeHints;
         }
         return $tokenTypeHints;
     }
     /**
      * @param ServerRequestInterface $request
      *


878) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:143    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ce9e816570f6e7ac49e8096eaea3e030.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getTokenTypeHints(ServerRequestInterface $request) : array
+    private function getTokenTypeHints(ServerRequestInterface $request) : array
     {
         $params = $this->getRequestParameters($request);
         $tokenTypeHints = $this->tokenTypeHintManager->getTokenTypeHints();
         if (array_key_exists('token_type_hint', $params)) {
             $tokenTypeHint = $params['token_type_hint'];
             if (!array_key_exists($params['token_type_hint'], $tokenTypeHints)) {


879) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationEndpoint.php:167    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f6bb5ea4cc5dceb79bcbda96ea384128.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getCallback(ServerRequestInterface $request) : ?string
+    private function getCallback(ServerRequestInterface $request) : ?string
     {
         $params = $this->getRequestParameters($request);
         if (array_key_exists('callback', $params)) {
             return $params['callback'];
         }
         return null;


880) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationGetEndpoint.php:46    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.9ba15e7491ac645722458fad3af80b57.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $supported_parameters = ['token', 'token_type_hint'];
-        if (true === $this->allowJson) {
+        if (false === $this->allowJson) {
             $supported_parameters[] = 'callback';
         }
         return array_intersect_key($parameters, array_flip($supported_parameters));
     }
 }



881) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationGetEndpoint.php:46    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.008cfed79fa6dd6e24a5e93be0c5fd84.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $supported_parameters = ['token', 'token_type_hint'];
-        if (true === $this->allowJson) {
+        if (true !== $this->allowJson) {
             $supported_parameters[] = 'callback';
         }
         return array_intersect_key($parameters, array_flip($supported_parameters));
     }
 }



882) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationGetEndpoint.php:42    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.71842d6901cd6332e08fe0534b27c20f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getRequestParameters(ServerRequestInterface $request) : array
+    private function getRequestParameters(ServerRequestInterface $request) : array
     {
         $parameters = $request->getQueryParams();
         $supported_parameters = ['token', 'token_type_hint'];
         if (true === $this->allowJson) {
             $supported_parameters[] = 'callback';
         }


883) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenRevocationPostEndpoint.php:23    [M] ProtectedVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.26591b15e4681bd9c497505b63c06112.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    protected function getRequestParameters(ServerRequestInterface $request) : array
+    private function getRequestParameters(ServerRequestInterface $request) : array
     {
         $parameters = $request->getParsedBody() ?? [];
         return array_intersect_key($parameters, array_flip(['token', 'token_type_hint']));
     }
 }



884) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenTypeHintManager.php:26    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.bfcc18ecd393320cdb863b03899a5b75.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getTokenTypeHints() : array
+    protected function getTokenTypeHints() : array
     {
         return $this->tokenTypeHints;
     }
     /**
      * @param TokenTypeHint $tokenTypeHint
      *


885) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenRevocationEndpoint/TokenTypeHintManager.php:36    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e411797743a3f8f36050dbb2b34a9ad0.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(TokenTypeHint $tokenTypeHint) : self
+    protected function add(TokenTypeHint $tokenTypeHint) : self
     {
         $this->tokenTypeHints[$tokenTypeHint->hint()] = $tokenTypeHint;
         return $this;
     }
 }



886) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:39    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d8ee50b93405a49900e49a45b351469c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->tokenTypes[$tokenType->name()] = $tokenType;
-        if (null === $this->defaultTokenType || true === $default) {
+        if (null !== $this->defaultTokenType || true === $default) {
             $this->defaultTokenType = $tokenType->name();
         }
         return $this;
     }
     /**
      * @param string $tokenTypeName


887) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:39    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.14fedc933c47abb59eb91f7ec5736b9a.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->tokenTypes[$tokenType->name()] = $tokenType;
-        if (null === $this->defaultTokenType || true === $default) {
+        if (null === $this->defaultTokenType || false === $default) {
             $this->defaultTokenType = $tokenType->name();
         }
         return $this;
     }
     /**
      * @param string $tokenTypeName


888) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:39    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d2a7d1951c442b08c241ef671e80f7e4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->tokenTypes[$tokenType->name()] = $tokenType;
-        if (null === $this->defaultTokenType || true === $default) {
+        if (null === $this->defaultTokenType || true !== $default) {
             $this->defaultTokenType = $tokenType->name();
         }
         return $this;
     }
     /**
      * @param string $tokenTypeName


889) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:39    [M] LogicalOr
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.b60382459ec5f6c272c5f710e871542d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $this->tokenTypes[$tokenType->name()] = $tokenType;
-        if (null === $this->defaultTokenType || true === $default) {
+        if (null === $this->defaultTokenType && true === $default) {
             $this->defaultTokenType = $tokenType->name();
         }
         return $this;
     }
     /**
      * @param string $tokenTypeName


890) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:36    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2641ac93289c1317ae6fcc42f9348b5e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function add(TokenType $tokenType, bool $default = false) : self
+    protected function add(TokenType $tokenType, bool $default = false) : self
     {
         $this->tokenTypes[$tokenType->name()] = $tokenType;
         if (null === $this->defaultTokenType || true === $default) {
             $this->defaultTokenType = $tokenType->name();
         }
         return $this;


891) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:51    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ec610980bcc1323c64f7abc1b7ee25e3.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function has(string $tokenTypeName) : bool
+    protected function has(string $tokenTypeName) : bool
     {
         return array_key_exists($tokenTypeName, $this->tokenTypes);
     }
     /**
      * @param string $tokenTypeName
      *


892) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:63    [M] LogicalNot
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fc6e67cacfde88fd36a005ac0e941b36.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        if (!$this->has($tokenTypeName)) {
+        if ($this->has($tokenTypeName)) {
             throw new \InvalidArgumentException(sprintf('Unsupported token type "%s".', $tokenTypeName));
         }
         return $this->tokenTypes[$tokenTypeName];
     }
     /**
      * @return TokenType[]


893) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:61    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.475764f60bbd64617e1bdd078382e7fa.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function get(string $tokenTypeName) : TokenType
+    protected function get(string $tokenTypeName) : TokenType
     {
         if (!$this->has($tokenTypeName)) {
             throw new \InvalidArgumentException(sprintf('Unsupported token type "%s".', $tokenTypeName));
         }
         return $this->tokenTypes[$tokenTypeName];
     }


894) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:73    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ec75014507146dca4fe09db9093a8796.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         return $this->tokenTypes;
     }
     /**
      * @return TokenType
      */


895) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:81    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.87b36d6eb80c1832f929a69c84ec1945.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getDefault() : TokenType
+    protected function getDefault() : TokenType
     {
         return $this->get($this->defaultTokenType);
     }
     /**
      * @param ServerRequestInterface $request
      * @param array                  $additionalCredentialValues


896) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:99    [M] NotIdentical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.ed47ca3ca30ca04ff65315704ac40c82.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $token = $tmp_type->findToken($request, $tmpAdditionalCredentialValues);
-            if (null !== $token) {
+            if (null === $token) {
                 $additionalCredentialValues = $tmpAdditionalCredentialValues;
                 $type = $tmp_type;
                 return $token;
             }
         }
         return null;


897) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:95    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.21385449bcd5aee3345b25e5c520904d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        foreach ($this->all() as $tmp_type) {
+        foreach (array() as $tmp_type) {
             $tmpAdditionalCredentialValues = [];
             $token = $tmp_type->findToken($request, $tmpAdditionalCredentialValues);
             if (null !== $token) {
                 $additionalCredentialValues = $tmpAdditionalCredentialValues;
                 $type = $tmp_type;
                 return $token;


898) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:93    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.099d30b02856163fb38c3086d16aa445.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function findToken(ServerRequestInterface $request, array &$additionalCredentialValues, ?TokenType &$type = null) : ?string
+    protected function findToken(ServerRequestInterface $request, array &$additionalCredentialValues, ?TokenType &$type = null) : ?string
     {
         foreach ($this->all() as $tmp_type) {
             $tmpAdditionalCredentialValues = [];
             $token = $tmp_type->findToken($request, $tmpAdditionalCredentialValues);
             if (null !== $token) {
                 $additionalCredentialValues = $tmpAdditionalCredentialValues;


899) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:118    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a363b2da59ac9e4069c028d56aa9d727.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $schemes = [];
-        foreach ($this->all() as $type) {
+        foreach (array() as $type) {
             $schemes[] = $this->computeScheme($type, $additionalAuthenticationParameters);
         }
         return $schemes;
     }
     /**
      * @param TokenType $type


900) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:115    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.2bee072b70d503a0f5c721b8a6b85e5c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function getSchemes(array $additionalAuthenticationParameters = []) : array
+    protected function getSchemes(array $additionalAuthenticationParameters = []) : array
     {
         $schemes = [];
         foreach ($this->all() as $type) {
             $schemes[] = $this->computeScheme($type, $additionalAuthenticationParameters);
         }
         return $schemes;


901) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:134    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.3ad709849ef848e9c8391d45dd50c37f.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $scheme = trim($type->getScheme());
-        if (0 === count($additionalAuthenticationParameters)) {
+        if (1 === count($additionalAuthenticationParameters)) {
             return $scheme;
         }
         foreach (['all', $type->name()] as $key) {
             if (array_key_exists($key, $additionalAuthenticationParameters)) {
                 $scheme = $this->appendParameters($scheme, $additionalAuthenticationParameters[$key]);
             }


902) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:134    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a4e980ad513ff8b25627a2ae5d1a671d.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $scheme = trim($type->getScheme());
-        if (0 === count($additionalAuthenticationParameters)) {
+        if (0 !== count($additionalAuthenticationParameters)) {
             return $scheme;
         }
         foreach (['all', $type->name()] as $key) {
             if (array_key_exists($key, $additionalAuthenticationParameters)) {
                 $scheme = $this->appendParameters($scheme, $additionalAuthenticationParameters[$key]);
             }


903) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:138    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.8601f872447347c630f4dadcb59baf46.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         }
-        foreach (['all', $type->name()] as $key) {
+        foreach (array() as $key) {
             if (array_key_exists($key, $additionalAuthenticationParameters)) {
                 $scheme = $this->appendParameters($scheme, $additionalAuthenticationParameters[$key]);
             }
         }
         return $scheme;
     }


904) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:155    [M] OneZeroInteger
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.365942ca1fdabcff2ced8b7515b6489c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
     {
-        $position = mb_strpos($scheme, ' ', 0, 'utf-8');
+        $position = mb_strpos($scheme, ' ', 1, 'utf-8');
         $add_comma = false === $position ? false : true;
         foreach ($parameters as $key => $value) {
             $value = is_string($value) ? sprintf('"%s"', $value) : $value;
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);


905) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:156    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.0b76556029b9ddccc22a1dafb8fb701c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $position = mb_strpos($scheme, ' ', 0, 'utf-8');
-        $add_comma = false === $position ? false : true;
+        $add_comma = true === $position ? false : true;
         foreach ($parameters as $key => $value) {
             $value = is_string($value) ? sprintf('"%s"', $value) : $value;
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);
             } else {


906) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:156    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.701622e36f16ea05940c92f8a35f29b4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $position = mb_strpos($scheme, ' ', 0, 'utf-8');
-        $add_comma = false === $position ? false : true;
+        $add_comma = false !== $position ? false : true;
         foreach ($parameters as $key => $value) {
             $value = is_string($value) ? sprintf('"%s"', $value) : $value;
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);
             } else {


907) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:156    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.f7a60679ab803c6a11852d9c8aaeec7e.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $position = mb_strpos($scheme, ' ', 0, 'utf-8');
-        $add_comma = false === $position ? false : true;
+        $add_comma = false === $position ? true : true;
         foreach ($parameters as $key => $value) {
             $value = is_string($value) ? sprintf('"%s"', $value) : $value;
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);
             } else {


908) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:156    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d949a247263b856412b3a1e8d76ae13c.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $position = mb_strpos($scheme, ' ', 0, 'utf-8');
-        $add_comma = false === $position ? false : true;
+        $add_comma = false === $position ? false : false;
         foreach ($parameters as $key => $value) {
             $value = is_string($value) ? sprintf('"%s"', $value) : $value;
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);
             } else {


909) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:160    [M] FalseValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.a56197e210596c3b85347aa1f34426d6.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $value = is_string($value) ? sprintf('"%s"', $value) : $value;
-            if (false === $add_comma) {
+            if (true === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $value);
             }
         }


910) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:160    [M] Identical
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.087b2dc745a9e2319fcc4e36c5fe2151.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             $value = is_string($value) ? sprintf('"%s"', $value) : $value;
-            if (false === $add_comma) {
+            if (false !== $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $value);
             }
         }


911) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:161    [M] TrueValue
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.e1959eede7ca7f0e6adfcd15fb853eb4.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
             if (false === $add_comma) {
-                $add_comma = true;
+                $add_comma = false;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $value);
             }
         }
         return $scheme;


912) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:158    [M] Foreach_
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.d759e41eb77d781fe54751082e3fc255.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
         $add_comma = false === $position ? false : true;
-        foreach ($parameters as $key => $value) {
+        foreach (array() as $key => $value) {
             $value = is_string($value) ? sprintf('"%s"', $value) : $value;
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $value);
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $value);

Not covered mutants:
====================


1) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:74    [M] PublicVisibility
exec /usr/bin/php7.1 -c /tmp/infectionHsy0o1 /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/vendor/phpunit/phpunit/phpunit --configuration /tmp/infection/phpunitConfiguration.fbdbe16fbdc3cdd768c4269cff6d53c8.infection.xml --stop-on-failure 
--- Original
+++ New
@@ @@
      */
-    public function addChecker(CheckerInterface $checker) : self
+    protected function addChecker(CheckerInterface $checker) : self
     {
         $this->checkers[] = $checker;
         return $this;
     }
     /**
      * @return CheckerInterface[]


2) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:84    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getCheckers() : array
+    protected function getCheckers() : array
     {
         return $this->checkers;
     }
     public function onKernelController(FilterControllerEvent $event)
     {
         if (!is_array($controller = $event->getController())) {

3) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:91    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!is_array($controller = $event->getController())) {
+        if (is_array($controller = $event->getController())) {
             return;
         }
         $object = new \ReflectionObject($controller[0]);
         $method = $object->getMethod($controller[1]);
         $classConfigurations = $this->reader->getClassAnnotations($object);
         $methodConfigurations = $this->reader->getMethodAnnotations($method);

4) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:95    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         }
-        $object = new \ReflectionObject($controller[0]);
+        $object = new \ReflectionObject($controller[1]);
         $method = $object->getMethod($controller[1]);
         $classConfigurations = $this->reader->getClassAnnotations($object);
         $methodConfigurations = $this->reader->getMethodAnnotations($method);
         foreach (array_merge($classConfigurations, $methodConfigurations) as $configuration) {
             if ($configuration instanceof OAuth2) {
                 $token = $this->tokenStorage->getToken();

5) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:96    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $object = new \ReflectionObject($controller[0]);
-        $method = $object->getMethod($controller[1]);
+        $method = $object->getMethod($controller[0]);
         $classConfigurations = $this->reader->getClassAnnotations($object);
         $methodConfigurations = $this->reader->getMethodAnnotations($method);
         foreach (array_merge($classConfigurations, $methodConfigurations) as $configuration) {
             if ($configuration instanceof OAuth2) {
                 $token = $this->tokenStorage->getToken();
                 if (!$token instanceof OAuth2Token) {

6) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:104    [M] LogicalNot

--- Original
+++ New
@@ @@
                 $token = $this->tokenStorage->getToken();
-                if (!$token instanceof OAuth2Token) {
+                if ($token instanceof OAuth2Token) {
                     $this->createAuthenticationException($event, 'OAuth2 authentication required');
                     return;
                 }
                 foreach ($this->getCheckers() as $checker) {
                     $message = $checker->check($token, $configuration);
                     if (null !== $message) {

7) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:112    [M] NotIdentical

--- Original
+++ New
@@ @@
                     $message = $checker->check($token, $configuration);
-                    if (null !== $message) {
+                    if (null === $message) {
                         $this->createAccessDeniedException($event, $message);
                         return;
                     }
                 }
             }
         }

8) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:110    [M] Foreach_

--- Original
+++ New
@@ @@
                 }
-                foreach ($this->getCheckers() as $checker) {
+                foreach (array() as $checker) {
                     $message = $checker->check($token, $configuration);
                     if (null !== $message) {
                         $this->createAccessDeniedException($event, $message);
                         return;
                     }
                 }

9) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:100    [M] Foreach_

--- Original
+++ New
@@ @@
         $methodConfigurations = $this->reader->getMethodAnnotations($method);
-        foreach (array_merge($classConfigurations, $methodConfigurations) as $configuration) {
+        foreach (array() as $configuration) {
             if ($configuration instanceof OAuth2) {
                 $token = $this->tokenStorage->getToken();
                 if (!$token instanceof OAuth2Token) {
                     $this->createAuthenticationException($event, 'OAuth2 authentication required');
                     return;
                 }

10) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/AnnotationDriver.php:89    [M] PublicVisibility

--- Original
+++ New
@@ @@
     }
-    public function onKernelController(FilterControllerEvent $event)
+    protected function onKernelController(FilterControllerEvent $event)
     {
         if (!is_array($controller = $event->getController())) {
             return;
         }
         $object = new \ReflectionObject($controller[0]);
         $method = $object->getMethod($controller[1]);

11) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ClientIdChecker.php:26    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $configuration->getClientId()) {
+        if (null !== $configuration->getClientId()) {
             return null;
         }
         if ($configuration->getClientId() !== $token->getClientId()) {
             return 'Client not authorized.';
         }
         return null;

12) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ClientIdChecker.php:30    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if ($configuration->getClientId() !== $token->getClientId()) {
+        if ($configuration->getClientId() === $token->getClientId()) {
             return 'Client not authorized.';
         }
         return null;
     }
 }


13) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ClientIdChecker.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function check(OAuth2Token $token, OAuth2 $configuration) : ?string
+    protected function check(OAuth2Token $token, OAuth2 $configuration) : ?string
     {
         if (null === $configuration->getClientId()) {
             return null;
         }
         if ($configuration->getClientId() !== $token->getClientId()) {
             return 'Client not authorized.';

14) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ResourceOwnerIdChecker.php:26    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $configuration->getResourceOwnerId()) {
+        if (null !== $configuration->getResourceOwnerId()) {
             return null;
         }
         if ($configuration->getResourceOwnerId() !== $token->getResourceOwnerId()) {
             return 'Resource owner not authorized.';
         }
         return null;

15) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ResourceOwnerIdChecker.php:30    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if ($configuration->getResourceOwnerId() !== $token->getResourceOwnerId()) {
+        if ($configuration->getResourceOwnerId() === $token->getResourceOwnerId()) {
             return 'Resource owner not authorized.';
         }
         return null;
     }
 }


16) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ResourceOwnerIdChecker.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function check(OAuth2Token $token, OAuth2 $configuration) : ?string
+    protected function check(OAuth2Token $token, OAuth2 $configuration) : ?string
     {
         if (null === $configuration->getResourceOwnerId()) {
             return null;
         }
         if ($configuration->getResourceOwnerId() !== $token->getResourceOwnerId()) {
             return 'Resource owner not authorized.';

17) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ScopeChecker.php:27    [M] Identical

--- Original
+++ New
@@ @@
         $scope = $configuration->getScope();
-        if (null === $scope) {
+        if (null !== $scope) {
             return null;
         }
         $scopes = explode(' ', $scope);
         $diff = array_diff($scopes, $token->getAccessToken()->getScopes());
         if (!empty($diff)) {
             return sprintf('Insufficient scope. The scope rule is: %s', $configuration->getScope());

18) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ScopeChecker.php:34    [M] LogicalNot

--- Original
+++ New
@@ @@
         $diff = array_diff($scopes, $token->getAccessToken()->getScopes());
-        if (!empty($diff)) {
+        if (empty($diff)) {
             return sprintf('Insufficient scope. The scope rule is: %s', $configuration->getScope());
         }
         return null;
     }
 }


19) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ScopeChecker.php:35    [M] FunctionCall

--- Original
+++ New
@@ @@
         if (!empty($diff)) {
-            return sprintf('Insufficient scope. The scope rule is: %s', $configuration->getScope());
+            sprintf('Insufficient scope. The scope rule is: %s', $configuration->getScope());
+            return null;
         }
         return null;
     }
 }


20) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/Checker/ScopeChecker.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function check(OAuth2Token $token, OAuth2 $configuration) : ?string
+    protected function check(OAuth2Token $token, OAuth2 $configuration) : ?string
     {
         $scope = $configuration->getScope();
         if (null === $scope) {
             return null;
         }
         $scopes = explode(' ', $scope);

21) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/OAuth2.php:53    [M] LogicalNot

--- Original
+++ New
@@ @@
             $method = 'set' . str_replace('_', '', ucwords($key, '_'));
-            if (!method_exists($this, $method)) {
+            if (method_exists($this, $method)) {
                 throw new \BadMethodCallException(sprintf("Unknown property '%s' on annotation '%s'.", $key, get_class($this)));
             }
             $this->{$method}($value);
         }
     }
     /**

22) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/OAuth2.php:51    [M] Foreach_

--- Original
+++ New
@@ @@
         }
-        foreach ($data as $key => $value) {
+        foreach (array() as $key => $value) {
             $method = 'set' . str_replace('_', '', ucwords($key, '_'));
             if (!method_exists($this, $method)) {
                 throw new \BadMethodCallException(sprintf("Unknown property '%s' on annotation '%s'.", $key, get_class($this)));
             }
             $this->{$method}($value);
         }

23) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/OAuth2.php:63    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function setClientId(string $clientId)
+    private function setClientId(string $clientId)
     {
         Assertion::string($clientId, 'The client public ID should be a string.');
         $this->clientId = $clientId;
     }
     /**
      * @return null|string

24) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/OAuth2.php:72    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ?string
+    protected function getClientId() : ?string
     {
         return $this->clientId;
     }
     /**
      * @param string $resourceOwnerId
      */

25) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/OAuth2.php:80    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function setResourceOwnerId(string $resourceOwnerId)
+    private function setResourceOwnerId(string $resourceOwnerId)
     {
         Assertion::string($resourceOwnerId, 'The resource owner public ID should be a string.');
         $this->resourceOwnerId = $resourceOwnerId;
     }
     /**
      * @return null|string

26) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/OAuth2.php:89    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResourceOwnerId() : ?string
+    protected function getResourceOwnerId() : ?string
     {
         return $this->resourceOwnerId;
     }
     /**
      * @param string $scope
      */

27) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/OAuth2.php:97    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function setScope(string $scope)
+    private function setScope(string $scope)
     {
         $this->scope = $scope;
     }
     /**
      * @return null|string
      */

28) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Annotation/OAuth2.php:105    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScope() : ?string
+    protected function getScope() : ?string
     {
         return $this->scope;
     }
 }


29) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function checkClaim($value)
+    protected function checkClaim($value)
     {
         return $this->checkValue($value);
     }
     /**
      * {@inheritdoc}
      */

30) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:57    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function checkHeader($value)
+    protected function checkHeader($value)
     {
         return $this->checkValue($value);
     }
     /**
      * @param $value
      *

31) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:69    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (is_string($value) && $value !== $this->audience) {
+        if (is_string($value) && $value === $this->audience) {
             throw new \InvalidArgumentException('Bad audience.');
         } elseif (!is_array($value) || !in_array($this->audience, $value)) {
             throw new \InvalidArgumentException('Bad audience.');
         }
     }
     /**

32) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:69    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
-        if (is_string($value) && $value !== $this->audience) {
+        if (is_string($value) || $value !== $this->audience) {
             throw new \InvalidArgumentException('Bad audience.');
         } elseif (!is_array($value) || !in_array($this->audience, $value)) {
             throw new \InvalidArgumentException('Bad audience.');
         }
     }
     /**

33) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:71    [M] LogicalNot

--- Original
+++ New
@@ @@
             throw new \InvalidArgumentException('Bad audience.');
-        } elseif (!is_array($value) || !in_array($this->audience, $value)) {
+        } elseif (is_array($value) || !in_array($this->audience, $value)) {
             throw new \InvalidArgumentException('Bad audience.');
         }
     }
     /**
      * {@inheritdoc}
      */

34) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:71    [M] LogicalNot

--- Original
+++ New
@@ @@
             throw new \InvalidArgumentException('Bad audience.');
-        } elseif (!is_array($value) || !in_array($this->audience, $value)) {
+        } elseif (!is_array($value) || in_array($this->audience, $value)) {
             throw new \InvalidArgumentException('Bad audience.');
         }
     }
     /**
      * {@inheritdoc}
      */

35) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:71    [M] LogicalOr

--- Original
+++ New
@@ @@
             throw new \InvalidArgumentException('Bad audience.');
-        } elseif (!is_array($value) || !in_array($this->audience, $value)) {
+        } elseif (!is_array($value) && !in_array($this->audience, $value)) {
             throw new \InvalidArgumentException('Bad audience.');
         }
     }
     /**
      * {@inheritdoc}
      */

36) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function supportedClaim() : string
+    protected function supportedClaim() : string
     {
         return self::CLAIM_NAME;
     }
     /**
      * {@inheritdoc}
      */

37) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:87    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function supportedHeader() : string
+    protected function supportedHeader() : string
     {
         return self::CLAIM_NAME;
     }
     /**
      * {@inheritdoc}
      */

38) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Checker/AudienceChecker.php:95    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function protectedHeaderOnly() : bool
+    protected function protectedHeaderOnly() : bool
     {
         return $this->protectedHeader;
     }
 }


39) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:29    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function configure()
+    private function configure()
     {
         $this->setName('spomky-labs:oauth2-server:client:create')->setDescription('Create a new client')->setHelp(<<<'EOT'
 The <info>%command.name%</info> command will create a new client.
 
   <info>php %command.full_name%</info>
 EOT

40) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:63    [M] BitwiseOr

--- Original
+++ New
@@ @@
         $output->writeln('A client has been created');
-        $output->writeln(sprintf('Its configuration is "%s"', json_encode($client, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));
+        $output->writeln(sprintf('Its configuration is "%s"', json_encode($client, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES)));
     }
     /**
      * @param InputInterface  $input
      * @param OutputInterface $output
      * @param Client          $client
      */

41) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:45    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function execute(InputInterface $input, OutputInterface $output)
+    private function execute(InputInterface $input, OutputInterface $output)
     {
         /**
          * @var ClientRepository
          */
         $service = $this->getContainer()->get(ClientRepository::class);
         $client = Client::createEmpty();

42) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:79    [M] FalseValue

--- Original
+++ New
@@ @@
         $question = new ChoiceQuestion('Please select the token endpoint authentication method.', $token_endpoint_auth_method_manager->getSupportedTokenEndpointAuthMethods());
-        $question->setMultiselect(false);
+        $question->setMultiselect(true);
         $question->setErrorMessage('The token endpoint authentication method "%s" is invalid.');
         $token_endpoint_auth_method = $helper->ask($input, $output, $question);
         $client->set('token_endpoint_auth_method', $token_endpoint_auth_method);
     }
     /**
      * @param InputInterface  $input

43) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:106    [M] LogicalNot

--- Original
+++ New
@@ @@
             }
-        } while (!empty($uri));
+        } while (empty($uri));
         if (!empty($redirect_uris)) {
             $client->set('redirect_uris', $redirect_uris);
         }
     }
     /**
      * @param InputInterface  $input

44) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:99    [M] LogicalNot

--- Original
+++ New
@@ @@
             $uri = $helper->ask($input, $output, $question);
-            if (!empty($uri)) {
+            if (empty($uri)) {
                 if (false === $this->isAnUrlOrUrn($uri, false)) {
                     $output->writeln('Invalid input.');
                 } else {
                     $redirect_uris[] = $uri;
                 }
             }

45) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:100    [M] FalseValue

--- Original
+++ New
@@ @@
             if (!empty($uri)) {
-                if (false === $this->isAnUrlOrUrn($uri, false)) {
+                if (true === $this->isAnUrlOrUrn($uri, false)) {
                     $output->writeln('Invalid input.');
                 } else {
                     $redirect_uris[] = $uri;
                 }
             }
         } while (!empty($uri));

46) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:100    [M] FalseValue

--- Original
+++ New
@@ @@
             if (!empty($uri)) {
-                if (false === $this->isAnUrlOrUrn($uri, false)) {
+                if (false === $this->isAnUrlOrUrn($uri, true)) {
                     $output->writeln('Invalid input.');
                 } else {
                     $redirect_uris[] = $uri;
                 }
             }
         } while (!empty($uri));

47) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:100    [M] Identical

--- Original
+++ New
@@ @@
             if (!empty($uri)) {
-                if (false === $this->isAnUrlOrUrn($uri, false)) {
+                if (false !== $this->isAnUrlOrUrn($uri, false)) {
                     $output->writeln('Invalid input.');
                 } else {
                     $redirect_uris[] = $uri;
                 }
             }
         } while (!empty($uri));

48) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:108    [M] LogicalNot

--- Original
+++ New
@@ @@
         } while (!empty($uri));
-        if (!empty($redirect_uris)) {
+        if (empty($redirect_uris)) {
             $client->set('redirect_uris', $redirect_uris);
         }
     }
     /**
      * @param InputInterface  $input
      * @param OutputInterface $output

49) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:127    [M] TrueValue

--- Original
+++ New
@@ @@
         $question = new ChoiceQuestion('Please select allowed response types.', $authorization_factory->getSupportedResponseTypes());
-        $question->setMultiselect(true);
+        $question->setMultiselect(false);
         $question->setErrorMessage('The response type "%s" is invalid.');
         $grant_types = $helper->ask($input, $output, $question);
         $client->set('response_types', $grant_types);
     }
     /**
      * @param InputInterface  $input

50) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:148    [M] TrueValue

--- Original
+++ New
@@ @@
         $question = new ChoiceQuestion('Please select allowed grant types.', $token_endpoint->getSupportedGrantTypes());
-        $question->setMultiselect(true);
+        $question->setMultiselect(false);
         $question->setErrorMessage('The grant type "%s" is invalid.');
         $grant_types = $helper->ask($input, $output, $question);
         $client->set('grant_types', $grant_types);
     }
     /**
      * {@inheritdoc}

51) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:158    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isEnabled()
+    protected function isEnabled()
     {
         return $this->getContainer()->has('oauth2_server.client_manager');
     }
     /**
      * @param string $uri
      * @param bool   $path_traversal_allowed

52) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:171    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        if ('urn:' === mb_substr($uri, 0, 4, '8bit')) {
+        if ('urn:' === mb_substr($uri, 1, 4, '8bit')) {
             if (false === self::checkUrn($uri)) {
                 return false;
             }
         } else {
             if (false === self::checkUrl($uri, $path_traversal_allowed)) {
                 return false;

53) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:171    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if ('urn:' === mb_substr($uri, 0, 4, '8bit')) {
+        if ('urn:' !== mb_substr($uri, 0, 4, '8bit')) {
             if (false === self::checkUrn($uri)) {
                 return false;
             }
         } else {
             if (false === self::checkUrl($uri, $path_traversal_allowed)) {
                 return false;

54) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:172    [M] FalseValue

--- Original
+++ New
@@ @@
         if ('urn:' === mb_substr($uri, 0, 4, '8bit')) {
-            if (false === self::checkUrn($uri)) {
+            if (true === self::checkUrn($uri)) {
                 return false;
             }
         } else {
             if (false === self::checkUrl($uri, $path_traversal_allowed)) {
                 return false;
             }

55) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:172    [M] Identical

--- Original
+++ New
@@ @@
         if ('urn:' === mb_substr($uri, 0, 4, '8bit')) {
-            if (false === self::checkUrn($uri)) {
+            if (false !== self::checkUrn($uri)) {
                 return false;
             }
         } else {
             if (false === self::checkUrl($uri, $path_traversal_allowed)) {
                 return false;
             }

56) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:173    [M] FalseValue

--- Original
+++ New
@@ @@
             if (false === self::checkUrn($uri)) {
-                return false;
+                return true;
             }
         } else {
             if (false === self::checkUrl($uri, $path_traversal_allowed)) {
                 return false;
             }
         }

57) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:176    [M] FalseValue

--- Original
+++ New
@@ @@
         } else {
-            if (false === self::checkUrl($uri, $path_traversal_allowed)) {
+            if (true === self::checkUrl($uri, $path_traversal_allowed)) {
                 return false;
             }
         }
         return true;
     }
     /**

58) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:176    [M] Identical

--- Original
+++ New
@@ @@
         } else {
-            if (false === self::checkUrl($uri, $path_traversal_allowed)) {
+            if (false !== self::checkUrl($uri, $path_traversal_allowed)) {
                 return false;
             }
         }
         return true;
     }
     /**

59) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:177    [M] FalseValue

--- Original
+++ New
@@ @@
             if (false === self::checkUrl($uri, $path_traversal_allowed)) {
-                return false;
+                return true;
             }
         }
         return true;
     }
     /**
      * @param string $url

60) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:181    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        return true;
+        return false;
     }
     /**
      * @param string $url
      * @param bool   $path_traversal_allowed
      *
      * @return bool

61) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:193    [M] LogicalNot

--- Original
+++ New
@@ @@
         // If URI is not a valid URI, return false
-        if (!filter_var($url, FILTER_VALIDATE_URL)) {
+        if (filter_var($url, FILTER_VALIDATE_URL)) {
             return false;
         }
         $parsed = parse_url($url);
         // Checks for path traversal (e.g. http://foo.bar/redirect/../bad/url)
         if (isset($parsed['path']) && !$path_traversal_allowed) {
             $path = urldecode($parsed['path']);

62) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:194    [M] FalseValue

--- Original
+++ New
@@ @@
         if (!filter_var($url, FILTER_VALIDATE_URL)) {
-            return false;
+            return true;
         }
         $parsed = parse_url($url);
         // Checks for path traversal (e.g. http://foo.bar/redirect/../bad/url)
         if (isset($parsed['path']) && !$path_traversal_allowed) {
             $path = urldecode($parsed['path']);
             // check for 'path traversal'

63) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:200    [M] LogicalNot

--- Original
+++ New
@@ @@
         // Checks for path traversal (e.g. http://foo.bar/redirect/../bad/url)
-        if (isset($parsed['path']) && !$path_traversal_allowed) {
+        if (isset($parsed['path']) && $path_traversal_allowed) {
             $path = urldecode($parsed['path']);
             // check for 'path traversal'
             if (preg_match('#/\\.\\.?(/|$)#', $path)) {
                 return false;
             }
         }

64) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:200    [M] LogicalAnd

--- Original
+++ New
@@ @@
         // Checks for path traversal (e.g. http://foo.bar/redirect/../bad/url)
-        if (isset($parsed['path']) && !$path_traversal_allowed) {
+        if (isset($parsed['path']) || !$path_traversal_allowed) {
             $path = urldecode($parsed['path']);
             // check for 'path traversal'
             if (preg_match('#/\\.\\.?(/|$)#', $path)) {
                 return false;
             }
         }

65) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:204    [M] FalseValue

--- Original
+++ New
@@ @@
             if (preg_match('#/\\.\\.?(/|$)#', $path)) {
-                return false;
+                return true;
             }
         }
         return true;
     }
     /**
      * @param string $urn

66) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:208    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        return true;
+        return false;
     }
     /**
      * @param string $urn
      *
      * @return bool
      */

67) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:190    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function checkUrl($url, $path_traversal_allowed)
+    protected static function checkUrl($url, $path_traversal_allowed)
     {
         // If URI is not a valid URI, return false
         if (!filter_var($url, FILTER_VALIDATE_URL)) {
             return false;
         }
         $parsed = parse_url($url);

68) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:218    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        return 1 === preg_match('/^urn:[a-z0-9][a-z0-9-]{0,31}:[a-z0-9()+,\\-.:=@;$_!*\'%\\/?#]+$/', $urn);
+        return 0 === preg_match('/^urn:[a-z0-9][a-z0-9-]{0,31}:[a-z0-9()+,\\-.:=@;$_!*\'%\\/?#]+$/', $urn);
     }
 }


69) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Command/ClientCommand.php:218    [M] Identical

--- Original
+++ New
@@ @@
     {
-        return 1 === preg_match('/^urn:[a-z0-9][a-z0-9-]{0,31}:[a-z0-9()+,\\-.:=@;$_!*\'%\\/?#]+$/', $urn);
+        return 1 !== preg_match('/^urn:[a-z0-9][a-z0-9-]{0,31}:[a-z0-9()+,\\-.:=@;$_!*\'%\\/?#]+$/', $urn);
     }
 }


70) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/AuthorizationEndpointController.php:132    [M] Foreach_

--- Original
+++ New
@@ @@
         $session_data = ['uri' => $request->getUri()->__toString(), 'ui_locale' => $this->getUiLocale($authorization)];
-        foreach (['display', 'id_token_hint', 'login_hint', 'acr_values'] as $key) {
+        foreach (array() as $key) {
             $session_data[$key] = $authorization->hasQueryParam($key) ? $authorization->getQueryParam($key) : null;
         }
         $this->session->set('oauth2_authorization_request_data', $session_data);
         $response = $this->messageFactory->createResponse(302);
         $response = $response->withHeader('Location', $this->router->generate($this->loginRoute, $this->loginRouteParams, UrlGeneratorInterface::ABSOLUTE_URL));
         return $response;

71) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/AuthorizationEndpointController.php:126    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function redirectToLoginPage(Authorization $authorization, ServerRequestInterface $request) : ResponseInterface
+    private function redirectToLoginPage(Authorization $authorization, ServerRequestInterface $request) : ResponseInterface
     {
         $session_data = ['uri' => $request->getUri()->__toString(), 'ui_locale' => $this->getUiLocale($authorization)];
         foreach (['display', 'id_token_hint', 'login_hint', 'acr_values'] as $key) {
             $session_data[$key] = $authorization->hasQueryParam($key) ? $authorization->getQueryParam($key) : null;
         }
         $this->session->set('oauth2_authorization_request_data', $session_data);

72) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/AuthorizationEndpointController.php:168    [M] Identical

--- Original
+++ New
@@ @@
         $this->session->remove('oauth2_authorization_request_data');
-        if ('POST' === $request->getMethod()) {
+        if ('POST' !== $request->getMethod()) {
             $authorization = $this->formHandler->handle($form, $request, $authorization, $authorization_model);
             if (is_bool($authorization->isAuthorized())) {
                 throw new ProcessAuthorizationException($authorization);
                 //FIXME
                 /*return [
                       'save_authorization' => $authorization_model->isSaveConfiguration(),

73) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/AuthorizationEndpointController.php:151    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function processConsentScreen(ServerRequestInterface $request, Authorization $authorization) : ResponseInterface
+    private function processConsentScreen(ServerRequestInterface $request, Authorization $authorization) : ResponseInterface
     {
         //FIXME: $options = $this->processConsentScreenOptions($authorization);
         $ui_locale = $this->getUiLocale($authorization);
         $options = array_merge(['locale' => $ui_locale, 'scopes' => $authorization->getScopes()]);
         $authorization_model = new AuthorizationModel();
         $authorization_model->setScopes($authorization->getScopes());

74) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/AuthorizationEndpointController.php:215    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!method_exists($this->translator, 'getCatalogue') || !$authorization->hasQueryParam('ui_locales')) {
+        if (method_exists($this->translator, 'getCatalogue') || !$authorization->hasQueryParam('ui_locales')) {
             return null;
         }
         foreach ($authorization->getUiLocales() as $locale) {
             $catalogue = $this->translator->getCatalogue($locale);
             if (in_array('OAuth2FrameworkServer', $catalogue->getDomains())) {
                 return $locale;

75) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/AuthorizationEndpointController.php:215    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!method_exists($this->translator, 'getCatalogue') || !$authorization->hasQueryParam('ui_locales')) {
+        if (!method_exists($this->translator, 'getCatalogue') || $authorization->hasQueryParam('ui_locales')) {
             return null;
         }
         foreach ($authorization->getUiLocales() as $locale) {
             $catalogue = $this->translator->getCatalogue($locale);
             if (in_array('OAuth2FrameworkServer', $catalogue->getDomains())) {
                 return $locale;

76) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/AuthorizationEndpointController.php:215    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!method_exists($this->translator, 'getCatalogue') || !$authorization->hasQueryParam('ui_locales')) {
+        if (!method_exists($this->translator, 'getCatalogue') && !$authorization->hasQueryParam('ui_locales')) {
             return null;
         }
         foreach ($authorization->getUiLocales() as $locale) {
             $catalogue = $this->translator->getCatalogue($locale);
             if (in_array('OAuth2FrameworkServer', $catalogue->getDomains())) {
                 return $locale;

77) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/AuthorizationEndpointController.php:219    [M] Foreach_

--- Original
+++ New
@@ @@
         }
-        foreach ($authorization->getUiLocales() as $locale) {
+        foreach (array() as $locale) {
             $catalogue = $this->translator->getCatalogue($locale);
             if (in_array('OAuth2FrameworkServer', $catalogue->getDomains())) {
                 return $locale;
             }
         }
     }

78) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/ClientConfigurationMiddleware.php:47    [M] LogicalNot

--- Original
+++ New
@@ @@
         $routeParameters = $request->getAttribute('_route_params');
-        if (!is_array($routeParameters) || !array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
+        if (is_array($routeParameters) || !array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
             throw new OAuth2Exception(400, ['error' => OAuth2ResponseFactoryManager::ERROR_INVALID_REQUEST, 'error_description' => 'Invalid client or invalid registration access token.']);
         }
         $request = $request->withAttribute('client', $client);
         return $handler->handle($request);
     }
 }

79) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/ClientConfigurationMiddleware.php:47    [M] LogicalNot

--- Original
+++ New
@@ @@
         $routeParameters = $request->getAttribute('_route_params');
-        if (!is_array($routeParameters) || !array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
+        if (!is_array($routeParameters) || array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
             throw new OAuth2Exception(400, ['error' => OAuth2ResponseFactoryManager::ERROR_INVALID_REQUEST, 'error_description' => 'Invalid client or invalid registration access token.']);
         }
         $request = $request->withAttribute('client', $client);
         return $handler->handle($request);
     }
 }

80) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/ClientConfigurationMiddleware.php:47    [M] LogicalOr

--- Original
+++ New
@@ @@
         $routeParameters = $request->getAttribute('_route_params');
-        if (!is_array($routeParameters) || !array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
+        if (!is_array($routeParameters) && !array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
             throw new OAuth2Exception(400, ['error' => OAuth2ResponseFactoryManager::ERROR_INVALID_REQUEST, 'error_description' => 'Invalid client or invalid registration access token.']);
         }
         $request = $request->withAttribute('client', $client);
         return $handler->handle($request);
     }
 }

81) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/ClientConfigurationMiddleware.php:47    [M] Identical

--- Original
+++ New
@@ @@
         $routeParameters = $request->getAttribute('_route_params');
-        if (!is_array($routeParameters) || !array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
+        if (!is_array($routeParameters) || !array_key_exists('client_id', $routeParameters) || null !== ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
             throw new OAuth2Exception(400, ['error' => OAuth2ResponseFactoryManager::ERROR_INVALID_REQUEST, 'error_description' => 'Invalid client or invalid registration access token.']);
         }
         $request = $request->withAttribute('client', $client);
         return $handler->handle($request);
     }
 }

82) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/ClientConfigurationMiddleware.php:47    [M] LogicalOr

--- Original
+++ New
@@ @@
         $routeParameters = $request->getAttribute('_route_params');
-        if (!is_array($routeParameters) || !array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
+        if ((!is_array($routeParameters) || !array_key_exists('client_id', $routeParameters)) && null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
             throw new OAuth2Exception(400, ['error' => OAuth2ResponseFactoryManager::ERROR_INVALID_REQUEST, 'error_description' => 'Invalid client or invalid registration access token.']);
         }
         $request = $request->withAttribute('client', $client);
         return $handler->handle($request);
     }
 }

83) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/ClientConfigurationMiddleware.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $routeParameters = $request->getAttribute('_route_params');
         if (!is_array($routeParameters) || !array_key_exists('client_id', $routeParameters) || null === ($client = $this->clientRepository->find(ClientId::create($routeParameters['client_id'])))) {
             throw new OAuth2Exception(400, ['error' => OAuth2ResponseFactoryManager::ERROR_INVALID_REQUEST, 'error_description' => 'Invalid client or invalid registration access token.']);
         }
         $request = $request->withAttribute('client', $client);

84) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/MetadataController.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enableSignedMetadata(JWSBuilder $jwsBuilder, string $signatureAlgorithm, JWKSet $signatureKeySet)
+    protected function enableSignedMetadata(JWSBuilder $jwsBuilder, string $signatureAlgorithm, JWKSet $signatureKeySet)
     {
         $this->metadataEndpoint->enableSignedMetadata($jwsBuilder, $signatureAlgorithm, $signatureKeySet);
     }
     /**
      * {@inheritdoc}
      */

85) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Controller/MetadataController.php:57    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         return $this->metadataEndpoint->process($request, $handler);
     }
 }


86) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AccessTokenHandlerCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(AccessTokenHandlerManager::class)) {
+        if ($container->hasDefinition(AccessTokenHandlerManager::class)) {
             return;
         }
         $definition = $container->getDefinition(AccessTokenHandlerManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_access_token_handler');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

87) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AccessTokenHandlerCompilerPass.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_access_token_handler');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


88) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AccessTokenHandlerCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(AccessTokenHandlerManager::class)) {
             return;
         }
         $definition = $container->getDefinition(AccessTokenHandlerManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_access_token_handler');

89) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AfterConsentScreenCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(AfterConsentScreenManager::class)) {
+        if ($container->hasDefinition(AfterConsentScreenManager::class)) {
             return;
         }
         $definition = $container->getDefinition(AfterConsentScreenManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_after_consent_screen');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

90) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AfterConsentScreenCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_after_consent_screen');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


91) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AfterConsentScreenCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(AfterConsentScreenManager::class)) {
             return;
         }
         $definition = $container->getDefinition(AfterConsentScreenManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_after_consent_screen');

92) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AuthorizationEndpointRouteCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->has('authorization_endpoint_pipe')) {
+        if ($container->has('authorization_endpoint_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.authorization.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['authorization_endpoint', 'authorization_endpoint_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET', 'POST'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

93) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AuthorizationEndpointRouteCompilerPass.php:48    [M] LogicalNot

--- Original
+++ New
@@ @@
         $route_loader->addMethodCall('addRoute', ['authorization_endpoint', 'authorization_endpoint_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET', 'POST'], '']);
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['authorization_endpoint', 'oauth2_server_authorization_endpoint']);
     }
 }

94) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AuthorizationEndpointRouteCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->has('authorization_endpoint_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.authorization.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

95) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AuthorizationRequestMetadataCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class) || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setAuthorizationRequestLoader', [new Reference(AuthorizationRequestLoader::class)]);
     }
 }

96) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AuthorizationRequestMetadataCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
+        if (!$container->hasDefinition(MetadataBuilder::class) || $container->hasDefinition(AuthorizationRequestLoader::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setAuthorizationRequestLoader', [new Reference(AuthorizationRequestLoader::class)]);
     }
 }

97) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AuthorizationRequestMetadataCompilerPass.php:29    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
+        if (!$container->hasDefinition(MetadataBuilder::class) && !$container->hasDefinition(AuthorizationRequestLoader::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setAuthorizationRequestLoader', [new Reference(AuthorizationRequestLoader::class)]);
     }
 }

98) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/AuthorizationRequestMetadataCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(MetadataBuilder::class) || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setAuthorizationRequestLoader', [new Reference(AuthorizationRequestLoader::class)]);

99) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/BeforeConsentScreenCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(BeforeConsentScreenManager::class)) {
+        if ($container->hasDefinition(BeforeConsentScreenManager::class)) {
             return;
         }
         $definition = $container->getDefinition(BeforeConsentScreenManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_before_consent_screen');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

100) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/BeforeConsentScreenCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_before_consent_screen');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


101) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/BeforeConsentScreenCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(BeforeConsentScreenManager::class)) {
             return;
         }
         $definition = $container->getDefinition(BeforeConsentScreenManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_before_consent_screen');

102) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClaimSourceCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ClaimSourceManager::class)) {
+        if ($container->hasDefinition(ClaimSourceManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ClaimSourceManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_claim_source');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

103) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClaimSourceCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_claim_source');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


104) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClaimSourceCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(ClaimSourceManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ClaimSourceManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_claim_source');

105) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientAssertionJWTEncryptionSupportConfigurationCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ClientAssertionJwt::class) || !$container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.enabled')) {
+        if ($container->hasDefinition(ClientAssertionJwt::class) || !$container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.enabled')) {
             return;
         }
         $definition = $container->getDefinition(ClientAssertionJwt::class);
         $is_encryption_required = $container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.required');
         $definition->addMethodCall('enableEncryptedAssertions', [new Reference('jose.jwe_loader.client_assertion_jwt'), $is_encryption_required, new Reference('jose.key_set.oauth2_server.key_set.encryption')]);
     }

106) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientAssertionJWTEncryptionSupportConfigurationCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ClientAssertionJwt::class) || !$container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.enabled')) {
+        if (!$container->hasDefinition(ClientAssertionJwt::class) || $container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.enabled')) {
             return;
         }
         $definition = $container->getDefinition(ClientAssertionJwt::class);
         $is_encryption_required = $container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.required');
         $definition->addMethodCall('enableEncryptedAssertions', [new Reference('jose.jwe_loader.client_assertion_jwt'), $is_encryption_required, new Reference('jose.key_set.oauth2_server.key_set.encryption')]);
     }

107) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientAssertionJWTEncryptionSupportConfigurationCompilerPass.php:28    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ClientAssertionJwt::class) || !$container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.enabled')) {
+        if (!$container->hasDefinition(ClientAssertionJwt::class) && !$container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.enabled')) {
             return;
         }
         $definition = $container->getDefinition(ClientAssertionJwt::class);
         $is_encryption_required = $container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.required');
         $definition->addMethodCall('enableEncryptedAssertions', [new Reference('jose.jwe_loader.client_assertion_jwt'), $is_encryption_required, new Reference('jose.key_set.oauth2_server.key_set.encryption')]);
     }

108) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientAssertionJWTEncryptionSupportConfigurationCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(ClientAssertionJwt::class) || !$container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.enabled')) {
             return;
         }
         $definition = $container->getDefinition(ClientAssertionJwt::class);
         $is_encryption_required = $container->getParameter('oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.required');

109) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientConfigurationEndpointRouteCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ClientConfigurationEndpoint::class)) {
+        if ($container->hasDefinition(ClientConfigurationEndpoint::class)) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.client_configuration.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['client_configuration', 'client_configuration_endpoint_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET', 'PUT', 'DELETE'], '']);
     }

110) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientConfigurationEndpointRouteCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(ClientConfigurationEndpoint::class)) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.client_configuration.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

111) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientJwtAssertionMetadataCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         if ($container->hasDefinition(ClientAssertionJwt::class)) {
             $metadata->addMethodCall('setClientAssertionJwt', [new Reference(ClientAssertionJwt::class)]);
         }

112) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientJwtAssertionMetadataCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         if ($container->hasDefinition(ClientAssertionJwt::class)) {

113) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientRegistrationEndpointRouteCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ClientRegistrationEndpoint::class)) {
+        if ($container->hasDefinition(ClientRegistrationEndpoint::class)) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.client_registration.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['client_registration', 'client_registration_endpoint_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['POST'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

114) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientRegistrationEndpointRouteCompilerPass.php:49    [M] LogicalNot

--- Original
+++ New
@@ @@
         $route_loader->addMethodCall('addRoute', ['client_registration', 'client_registration_endpoint_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['POST'], '']);
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['registration_endpoint', 'oauth2_server_client_registration']);
     }
 }

115) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientRegistrationEndpointRouteCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(ClientRegistrationEndpoint::class)) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.client_registration.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

116) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientRuleCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(RuleManager::class)) {
+        if ($container->hasDefinition(RuleManager::class)) {
             return;
         }
         $client_manager = $container->getDefinition(RuleManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_client_rule');
         foreach ($taggedServices as $id => $attributes) {
             $client_manager->addMethodCall('add', [new Reference($id)]);

117) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientRuleCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_client_rule');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $client_manager->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


118) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ClientRuleCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(RuleManager::class)) {
             return;
         }
         $client_manager = $container->getDefinition(RuleManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_client_rule');

119) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/CommonMetadataCompilerPass.php:27    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $issuer = $container->getParameter('oauth2_server.server_uri');
         $metadata->addMethodCall('addKeyValuePair', ['issuer', $issuer]);
     }

120) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/CommonMetadataCompilerPass.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $issuer = $container->getParameter('oauth2_server.server_uri');

121) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/CustomMetadataCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $customRoutes = $container->getParameter('oauth2_server.endpoint.metadata.custom_routes');
         foreach ($customRoutes as $key => $parameters) {
             $this->addMethodCall($definition, 'setRoute', [$key, $parameters['route_name'], $parameters['route_parameters']]);

122) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/CustomMetadataCompilerPass.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
         $customRoutes = $container->getParameter('oauth2_server.endpoint.metadata.custom_routes');
-        foreach ($customRoutes as $key => $parameters) {
+        foreach (array() as $key => $parameters) {
             $this->addMethodCall($definition, 'setRoute', [$key, $parameters['route_name'], $parameters['route_parameters']]);
         }
         $customValues = $container->getParameter('oauth2_server.endpoint.metadata.custom_values');
         foreach ($customValues as $key => $parameters) {
             $this->addMethodCall($definition, 'addKeyValuePair', [$key, $parameters]);
         }

123) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/CustomMetadataCompilerPass.php:39    [M] Foreach_

--- Original
+++ New
@@ @@
         $customValues = $container->getParameter('oauth2_server.endpoint.metadata.custom_values');
-        foreach ($customValues as $key => $parameters) {
+        foreach (array() as $key => $parameters) {
             $this->addMethodCall($definition, 'addKeyValuePair', [$key, $parameters]);
         }
     }
     /**
      * @param Definition $definition
      * @param string     $method

124) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/CustomMetadataCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $customRoutes = $container->getParameter('oauth2_server.endpoint.metadata.custom_routes');

125) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/GrantTypeCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(GrantTypeManager::class)) {
+        if ($container->hasDefinition(GrantTypeManager::class)) {
             return;
         }
         $definition = $container->getDefinition(GrantTypeManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_grant_type');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

126) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/GrantTypeCompilerPass.php:36    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_grant_type');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
         if (!$container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);

127) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/GrantTypeCompilerPass.php:40    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setGrantTypeManager', [new Reference(GrantTypeManager::class)]);
     }
 }

128) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/GrantTypeCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(GrantTypeManager::class)) {
             return;
         }
         $definition = $container->getDefinition(GrantTypeManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_grant_type');

129) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/IdTokenMetadataCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         if ($container->hasDefinition(UserInfo::class)) {
             $metadata->addMethodCall('setUserinfo', [new Reference(UserInfo::class)]);
             $metadata->addMethodCall('addKeyValuePair', ['claim_types_supported', ['normal', 'aggregated', 'distributed']]);

130) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/IdTokenMetadataCompilerPass.php:37    [M] TrueValue

--- Original
+++ New
@@ @@
             $metadata->addMethodCall('addKeyValuePair', ['claim_types_supported', ['normal', 'aggregated', 'distributed']]);
-            $metadata->addMethodCall('addKeyValuePair', ['claims_parameter_supported', true]);
+            $metadata->addMethodCall('addKeyValuePair', ['claims_parameter_supported', false]);
             $metadata->addMethodCall('addKeyValuePair', ['id_token_signing_alg_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.signature_algorithms')]);
             if (true === $container->getParameter('oauth2_server.openid_connect.id_token.encryption.enabled')) {
                 $metadata->addMethodCall('addKeyValuePair', ['id_token_encryption_alg_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.encryption.key_encryption_algorithms')]);
                 $metadata->addMethodCall('addKeyValuePair', ['id_token_encryption_enc_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.encryption.content_encryption_algorithms')]);
             }
         }

131) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/IdTokenMetadataCompilerPass.php:39    [M] TrueValue

--- Original
+++ New
@@ @@
             $metadata->addMethodCall('addKeyValuePair', ['id_token_signing_alg_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.signature_algorithms')]);
-            if (true === $container->getParameter('oauth2_server.openid_connect.id_token.encryption.enabled')) {
+            if (false === $container->getParameter('oauth2_server.openid_connect.id_token.encryption.enabled')) {
                 $metadata->addMethodCall('addKeyValuePair', ['id_token_encryption_alg_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.encryption.key_encryption_algorithms')]);
                 $metadata->addMethodCall('addKeyValuePair', ['id_token_encryption_enc_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.encryption.content_encryption_algorithms')]);
             }
         }
     }
 }

132) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/IdTokenMetadataCompilerPass.php:39    [M] Identical

--- Original
+++ New
@@ @@
             $metadata->addMethodCall('addKeyValuePair', ['id_token_signing_alg_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.signature_algorithms')]);
-            if (true === $container->getParameter('oauth2_server.openid_connect.id_token.encryption.enabled')) {
+            if (true !== $container->getParameter('oauth2_server.openid_connect.id_token.encryption.enabled')) {
                 $metadata->addMethodCall('addKeyValuePair', ['id_token_encryption_alg_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.encryption.key_encryption_algorithms')]);
                 $metadata->addMethodCall('addKeyValuePair', ['id_token_encryption_enc_values_supported', $container->getParameter('oauth2_server.openid_connect.id_token.encryption.content_encryption_algorithms')]);
             }
         }
     }
 }

133) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/IdTokenMetadataCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         if ($container->hasDefinition(UserInfo::class)) {

134) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/InitialAccessTokenCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(InitialAccessTokenMiddleware::class) || !$container->hasDefinition('client_registration_endpoint_pipe')) {
+        if ($container->hasDefinition(InitialAccessTokenMiddleware::class) || !$container->hasDefinition('client_registration_endpoint_pipe')) {
             return;
         }
         $client_manager = $container->getDefinition('client_registration_endpoint_pipe');
         $client_manager->addMethodCall('addMiddlewareBeforeLastOne', [new Reference(InitialAccessTokenMiddleware::class)]);
     }
 }

135) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/InitialAccessTokenCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(InitialAccessTokenMiddleware::class) || !$container->hasDefinition('client_registration_endpoint_pipe')) {
+        if (!$container->hasDefinition(InitialAccessTokenMiddleware::class) || $container->hasDefinition('client_registration_endpoint_pipe')) {
             return;
         }
         $client_manager = $container->getDefinition('client_registration_endpoint_pipe');
         $client_manager->addMethodCall('addMiddlewareBeforeLastOne', [new Reference(InitialAccessTokenMiddleware::class)]);
     }
 }

136) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/InitialAccessTokenCompilerPass.php:28    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(InitialAccessTokenMiddleware::class) || !$container->hasDefinition('client_registration_endpoint_pipe')) {
+        if (!$container->hasDefinition(InitialAccessTokenMiddleware::class) && !$container->hasDefinition('client_registration_endpoint_pipe')) {
             return;
         }
         $client_manager = $container->getDefinition('client_registration_endpoint_pipe');
         $client_manager->addMethodCall('addMiddlewareBeforeLastOne', [new Reference(InitialAccessTokenMiddleware::class)]);
     }
 }

137) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/InitialAccessTokenCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(InitialAccessTokenMiddleware::class) || !$container->hasDefinition('client_registration_endpoint_pipe')) {
             return;
         }
         $client_manager = $container->getDefinition('client_registration_endpoint_pipe');
         $client_manager->addMethodCall('addMiddlewareBeforeLastOne', [new Reference(InitialAccessTokenMiddleware::class)]);

138) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/IssuerDiscoveryCompilerPass.php:32    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(IssuerDiscoveryFactory::class)) {
+        if ($container->hasDefinition(IssuerDiscoveryFactory::class)) {
             return;
         }
         $issuerDiscoveries = $container->getParameter('oauth2_server.endpoint.issuer_discovery');
         foreach ($issuerDiscoveries as $id => $issuerDiscovery) {
             $issuerDiscovery_id = sprintf('oauth2_server_issuer_discovery_%s', $id);
             $issuerDiscoveryDefinition = $container->register($issuerDiscovery_id);

139) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/IssuerDiscoveryCompilerPass.php:38    [M] Foreach_

--- Original
+++ New
@@ @@
         $issuerDiscoveries = $container->getParameter('oauth2_server.endpoint.issuer_discovery');
-        foreach ($issuerDiscoveries as $id => $issuerDiscovery) {
+        foreach (array() as $id => $issuerDiscovery) {
             $issuerDiscovery_id = sprintf('oauth2_server_issuer_discovery_%s', $id);
             $issuerDiscoveryDefinition = $container->register($issuerDiscovery_id);
             $issuerDiscoveryDefinition->setFactory([new Reference(IssuerDiscoveryFactory::class), 'create']);
             $issuerDiscoveryDefinition->setClass(IssuerDiscoveryEndpoint::class);
             $issuerDiscoveryDefinition->setArguments([new Reference($issuerDiscovery['resource_repository']), $issuerDiscovery['server']]);
             $issuerDiscoveryPipeId = sprintf('oauth2_server_issuer_discovery_pipe_%s', $id);

140) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/IssuerDiscoveryCompilerPass.php:30    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(IssuerDiscoveryFactory::class)) {
             return;
         }
         $issuerDiscoveries = $container->getParameter('oauth2_server.endpoint.issuer_discovery');
         foreach ($issuerDiscoveries as $id => $issuerDiscovery) {

141) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/JwksUriEndpointRouteCompilerPass.php:27    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->has('jose.key_set.oauth2_server.endpoint.jwks_uri')) {
+        if ($container->hasDefinition(MetadataBuilder::class) || !$container->has('jose.key_set.oauth2_server.endpoint.jwks_uri')) {
             return;
         }
         $routeName = 'jwkset_oauth2_server.endpoint.jwks_uri';
         //$container->getParameter('oauth2_server.endpoint.jwks_uri.route_name');
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['jwks_uri', $routeName]);

142) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/JwksUriEndpointRouteCompilerPass.php:27    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->has('jose.key_set.oauth2_server.endpoint.jwks_uri')) {
+        if (!$container->hasDefinition(MetadataBuilder::class) || $container->has('jose.key_set.oauth2_server.endpoint.jwks_uri')) {
             return;
         }
         $routeName = 'jwkset_oauth2_server.endpoint.jwks_uri';
         //$container->getParameter('oauth2_server.endpoint.jwks_uri.route_name');
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['jwks_uri', $routeName]);

143) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/JwksUriEndpointRouteCompilerPass.php:27    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->has('jose.key_set.oauth2_server.endpoint.jwks_uri')) {
+        if (!$container->hasDefinition(MetadataBuilder::class) && !$container->has('jose.key_set.oauth2_server.endpoint.jwks_uri')) {
             return;
         }
         $routeName = 'jwkset_oauth2_server.endpoint.jwks_uri';
         //$container->getParameter('oauth2_server.endpoint.jwks_uri.route_name');
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['jwks_uri', $routeName]);

144) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/JwksUriEndpointRouteCompilerPass.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(MetadataBuilder::class) || !$container->has('jose.key_set.oauth2_server.endpoint.jwks_uri')) {
             return;
         }
         $routeName = 'jwkset_oauth2_server.endpoint.jwks_uri';
         //$container->getParameter('oauth2_server.endpoint.jwks_uri.route_name');

145) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/MetadataRouteCompilerPass.php:27    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('metadata_endpoint_pipe')) {
+        if ($container->hasDefinition('metadata_endpoint_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.metadata.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['metadata_endpoint', 'metadata_endpoint_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET'], '']);
     }

146) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/MetadataRouteCompilerPass.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition('metadata_endpoint_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.metadata.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

147) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ParameterCheckerCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ParameterCheckerManager::class)) {
+        if ($container->hasDefinition(ParameterCheckerManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ParameterCheckerManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_authorization_parameter_checker');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

148) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ParameterCheckerCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_authorization_parameter_checker');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


149) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ParameterCheckerCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(ParameterCheckerManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ParameterCheckerManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_authorization_parameter_checker');

150) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/PKCEMethodCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(PKCEMethodManager::class)) {
+        if ($container->hasDefinition(PKCEMethodManager::class)) {
             return;
         }
         $definition = $container->getDefinition(PKCEMethodManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_pkce_method');
         $loaded = [];
         foreach ($taggedServices as $id => $tags) {

151) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/PKCEMethodCompilerPass.php:38    [M] Foreach_

--- Original
+++ New
@@ @@
         foreach ($taggedServices as $id => $tags) {
-            foreach ($tags as $attributes) {
+            foreach (array() as $attributes) {
                 Assertion::keyExists($attributes, 'alias', sprintf('The PKCE method  "%s" does not have any "alias" attribute.', $id));
                 $loaded[] = $attributes['alias'];
                 $definition->addMethodCall('add', [new Reference($id)]);
             }
         }
         if (!$container->hasDefinition(MetadataBuilder::class)) {

152) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/PKCEMethodCompilerPass.php:37    [M] Foreach_

--- Original
+++ New
@@ @@
         $loaded = [];
-        foreach ($taggedServices as $id => $tags) {
+        foreach (array() as $id => $tags) {
             foreach ($tags as $attributes) {
                 Assertion::keyExists($attributes, 'alias', sprintf('The PKCE method  "%s" does not have any "alias" attribute.', $id));
                 $loaded[] = $attributes['alias'];
                 $definition->addMethodCall('add', [new Reference($id)]);
             }
         }

153) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/PKCEMethodCompilerPass.php:45    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setCodeChallengeMethodsSupported', [new Reference(PKCEMethodManager::class)]);
     }
 }

154) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/PKCEMethodCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(PKCEMethodManager::class)) {
             return;
         }
         $definition = $container->getDefinition(PKCEMethodManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_pkce_method');

155) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/RequestObjectCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('jose.jws_loader.request_object') || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
+        if ($container->hasDefinition('jose.jws_loader.request_object') || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
             return;
         }
         $metadata = $container->getDefinition(AuthorizationRequestLoader::class);
         $metadata->addMethodCall('enableRequestObjectSupport', [new Reference('jose.jws_loader.request_object'), new Reference('jose.claim_checker.request_object'), []]);
         //FIXME
         if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.enabled')) {

156) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/RequestObjectCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('jose.jws_loader.request_object') || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
+        if (!$container->hasDefinition('jose.jws_loader.request_object') || $container->hasDefinition(AuthorizationRequestLoader::class)) {
             return;
         }
         $metadata = $container->getDefinition(AuthorizationRequestLoader::class);
         $metadata->addMethodCall('enableRequestObjectSupport', [new Reference('jose.jws_loader.request_object'), new Reference('jose.claim_checker.request_object'), []]);
         //FIXME
         if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.enabled')) {

157) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/RequestObjectCompilerPass.php:28    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('jose.jws_loader.request_object') || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
+        if (!$container->hasDefinition('jose.jws_loader.request_object') && !$container->hasDefinition(AuthorizationRequestLoader::class)) {
             return;
         }
         $metadata = $container->getDefinition(AuthorizationRequestLoader::class);
         $metadata->addMethodCall('enableRequestObjectSupport', [new Reference('jose.jws_loader.request_object'), new Reference('jose.claim_checker.request_object'), []]);
         //FIXME
         if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.enabled')) {

158) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/RequestObjectCompilerPass.php:34    [M] TrueValue

--- Original
+++ New
@@ @@
         //FIXME
-        if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.enabled')) {
+        if (false === $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.enabled')) {
             $required = $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.required');
             $metadata->addMethodCall('enableEncryptedRequestObjectSupport', [new Reference('jose.jwe_loader.request_object'), new Reference('jose.key_set.oauth2_server.key_set.encryption'), $required]);
         }
         if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.enabled')) {
             $uriRegistration = $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.uris_registration_required');
             $metadata->addMethodCall('enableRequestObjectReferenceSupport', [new Reference('oauth2_server.http.client'), $uriRegistration]);

159) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/RequestObjectCompilerPass.php:34    [M] Identical

--- Original
+++ New
@@ @@
         //FIXME
-        if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.enabled')) {
+        if (true !== $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.enabled')) {
             $required = $container->getParameter('oauth2_server.endpoint.authorization.request_object.encryption.required');
             $metadata->addMethodCall('enableEncryptedRequestObjectSupport', [new Reference('jose.jwe_loader.request_object'), new Reference('jose.key_set.oauth2_server.key_set.encryption'), $required]);
         }
         if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.enabled')) {
             $uriRegistration = $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.uris_registration_required');
             $metadata->addMethodCall('enableRequestObjectReferenceSupport', [new Reference('oauth2_server.http.client'), $uriRegistration]);

160) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/RequestObjectCompilerPass.php:39    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.enabled')) {
+        if (false === $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.enabled')) {
             $uriRegistration = $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.uris_registration_required');
             $metadata->addMethodCall('enableRequestObjectReferenceSupport', [new Reference('oauth2_server.http.client'), $uriRegistration]);
         }
     }
 }


161) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/RequestObjectCompilerPass.php:39    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if (true === $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.enabled')) {
+        if (true !== $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.enabled')) {
             $uriRegistration = $container->getParameter('oauth2_server.endpoint.authorization.request_object.reference.uris_registration_required');
             $metadata->addMethodCall('enableRequestObjectReferenceSupport', [new Reference('oauth2_server.http.client'), $uriRegistration]);
         }
     }
 }


162) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/RequestObjectCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition('jose.jws_loader.request_object') || !$container->hasDefinition(AuthorizationRequestLoader::class)) {
             return;
         }
         $metadata = $container->getDefinition(AuthorizationRequestLoader::class);
         $metadata->addMethodCall('enableRequestObjectSupport', [new Reference('jose.jws_loader.request_object'), new Reference('jose.claim_checker.request_object'), []]);

163) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseFactoryCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(OAuth2ResponseFactoryManager::class)) {
+        if ($container->hasDefinition(OAuth2ResponseFactoryManager::class)) {
             return;
         }
         $definition = $container->getDefinition(OAuth2ResponseFactoryManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_factory');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('addResponseFactory', [new Reference($id)]);

164) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseFactoryCompilerPass.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_factory');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('addResponseFactory', [new Reference($id)]);
         }
     }
 }


165) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseFactoryCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(OAuth2ResponseFactoryManager::class)) {
             return;
         }
         $definition = $container->getDefinition(OAuth2ResponseFactoryManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_factory');

166) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseModeCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ResponseModeManager::class)) {
+        if ($container->hasDefinition(ResponseModeManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ResponseModeManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_mode');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

167) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseModeCompilerPass.php:36    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_mode');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
         if (!$container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);

168) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseModeCompilerPass.php:40    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setResponseModeManager', [new Reference(ResponseModeManager::class)]);
     }
 }

169) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseModeCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(ResponseModeManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ResponseModeManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_mode');

170) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseTypeCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ResponseTypeManager::class)) {
+        if ($container->hasDefinition(ResponseTypeManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ResponseTypeManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_type');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

171) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseTypeCompilerPass.php:36    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_type');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
         if (!$container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);

172) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseTypeCompilerPass.php:40    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setResponseTypeManager', [new Reference(ResponseTypeManager::class)]);
     }
 }

173) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ResponseTypeCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(ResponseTypeManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ResponseTypeManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_response_type');

174) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopeMetadataCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->hasAlias(ScopeRepositoryInterface::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class) || !$container->hasAlias(ScopeRepositoryInterface::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setScopeRepository', [new Reference(ScopeRepositoryInterface::class)]);
     }
 }

175) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopeMetadataCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->hasAlias(ScopeRepositoryInterface::class)) {
+        if (!$container->hasDefinition(MetadataBuilder::class) || $container->hasAlias(ScopeRepositoryInterface::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setScopeRepository', [new Reference(ScopeRepositoryInterface::class)]);
     }
 }

176) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopeMetadataCompilerPass.php:29    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataBuilder::class) || !$container->hasAlias(ScopeRepositoryInterface::class)) {
+        if (!$container->hasDefinition(MetadataBuilder::class) && !$container->hasAlias(ScopeRepositoryInterface::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setScopeRepository', [new Reference(ScopeRepositoryInterface::class)]);
     }
 }

177) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopeMetadataCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(MetadataBuilder::class) || !$container->hasAlias(ScopeRepositoryInterface::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setScopeRepository', [new Reference(ScopeRepositoryInterface::class)]);

178) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(ScopePolicyManager::class)) {
+        if ($container->hasDefinition(ScopePolicyManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ScopePolicyManager::class);
         $default = $container->getParameter('oauth2_server.scope.policy.by_default');
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_scope_policy');
         $default_found = false;

179) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:36    [M] FalseValue

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_scope_policy');
-        $default_found = false;
+        $default_found = true;
         $policy_names = [];
         foreach ($taggedServices as $id => $tags) {
             foreach ($tags as $attributes) {
                 Assertion::keyExists($attributes, 'policy_name', sprintf("The scope policy '%s' does not have any 'policy_name' attribute.", $id));
                 $is_default = $default === $attributes['policy_name'];
                 $policy_names[] = $attributes['policy_name'];

180) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:41    [M] Identical

--- Original
+++ New
@@ @@
                 Assertion::keyExists($attributes, 'policy_name', sprintf("The scope policy '%s' does not have any 'policy_name' attribute.", $id));
-                $is_default = $default === $attributes['policy_name'];
+                $is_default = $default !== $attributes['policy_name'];
                 $policy_names[] = $attributes['policy_name'];
                 if (true === $is_default) {
                     $default_found = true;
                 }
                 $definition->addMethodCall('add', [new Reference($id), $is_default]);
             }

181) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:43    [M] TrueValue

--- Original
+++ New
@@ @@
                 $policy_names[] = $attributes['policy_name'];
-                if (true === $is_default) {
+                if (false === $is_default) {
                     $default_found = true;
                 }
                 $definition->addMethodCall('add', [new Reference($id), $is_default]);
             }
         }
         Assertion::true($default_found, sprintf('Unable to find the scope policy "%s". Available policies are: %s.', $default, json_encode($policy_names, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));

182) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:43    [M] Identical

--- Original
+++ New
@@ @@
                 $policy_names[] = $attributes['policy_name'];
-                if (true === $is_default) {
+                if (true !== $is_default) {
                     $default_found = true;
                 }
                 $definition->addMethodCall('add', [new Reference($id), $is_default]);
             }
         }
         Assertion::true($default_found, sprintf('Unable to find the scope policy "%s". Available policies are: %s.', $default, json_encode($policy_names, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));

183) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:44    [M] TrueValue

--- Original
+++ New
@@ @@
                 if (true === $is_default) {
-                    $default_found = true;
+                    $default_found = false;
                 }
                 $definition->addMethodCall('add', [new Reference($id), $is_default]);
             }
         }
         Assertion::true($default_found, sprintf('Unable to find the scope policy "%s". Available policies are: %s.', $default, json_encode($policy_names, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));
     }

184) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:39    [M] Foreach_

--- Original
+++ New
@@ @@
         foreach ($taggedServices as $id => $tags) {
-            foreach ($tags as $attributes) {
+            foreach (array() as $attributes) {
                 Assertion::keyExists($attributes, 'policy_name', sprintf("The scope policy '%s' does not have any 'policy_name' attribute.", $id));
                 $is_default = $default === $attributes['policy_name'];
                 $policy_names[] = $attributes['policy_name'];
                 if (true === $is_default) {
                     $default_found = true;
                 }

185) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:38    [M] Foreach_

--- Original
+++ New
@@ @@
         $policy_names = [];
-        foreach ($taggedServices as $id => $tags) {
+        foreach (array() as $id => $tags) {
             foreach ($tags as $attributes) {
                 Assertion::keyExists($attributes, 'policy_name', sprintf("The scope policy '%s' does not have any 'policy_name' attribute.", $id));
                 $is_default = $default === $attributes['policy_name'];
                 $policy_names[] = $attributes['policy_name'];
                 if (true === $is_default) {
                     $default_found = true;

186) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:50    [M] BitwiseOr

--- Original
+++ New
@@ @@
         }
-        Assertion::true($default_found, sprintf('Unable to find the scope policy "%s". Available policies are: %s.', $default, json_encode($policy_names, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));
+        Assertion::true($default_found, sprintf('Unable to find the scope policy "%s". Available policies are: %s.', $default, json_encode($policy_names, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES)));
     }
 }


187) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/ScopePolicyCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(ScopePolicyManager::class)) {
             return;
         }
         $definition = $container->getDefinition(ScopePolicyManager::class);
         $default = $container->getParameter('oauth2_server.scope.policy.by_default');

188) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SecurityAnnotationCheckerCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(AnnotationDriver::class)) {
+        if ($container->hasDefinition(AnnotationDriver::class)) {
             return;
         }
         $definition = $container->getDefinition(AnnotationDriver::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server.security.annotation_checker');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('addChecker', [new Reference($id)]);

189) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SecurityAnnotationCheckerCompilerPass.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server.security.annotation_checker');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('addChecker', [new Reference($id)]);
         }
     }
 }


190) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SecurityAnnotationCheckerCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(AnnotationDriver::class)) {
             return;
         }
         $definition = $container->getDefinition(AnnotationDriver::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server.security.annotation_checker');

191) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SessionManagementRouteCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('session_management_pipe') || !$container->getParameter('oauth2_server.endpoint.session_management.enabled')) {
+        if ($container->hasDefinition('session_management_pipe') || !$container->getParameter('oauth2_server.endpoint.session_management.enabled')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.session_management.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['openid_connect_iframe_endpoint', 'session_management_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

192) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SessionManagementRouteCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('session_management_pipe') || !$container->getParameter('oauth2_server.endpoint.session_management.enabled')) {
+        if (!$container->hasDefinition('session_management_pipe') || $container->getParameter('oauth2_server.endpoint.session_management.enabled')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.session_management.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['openid_connect_iframe_endpoint', 'session_management_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

193) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SessionManagementRouteCompilerPass.php:28    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('session_management_pipe') || !$container->getParameter('oauth2_server.endpoint.session_management.enabled')) {
+        if (!$container->hasDefinition('session_management_pipe') && !$container->getParameter('oauth2_server.endpoint.session_management.enabled')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.session_management.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['openid_connect_iframe_endpoint', 'session_management_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

194) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SessionManagementRouteCompilerPass.php:48    [M] LogicalNot

--- Original
+++ New
@@ @@
         $route_loader->addMethodCall('addRoute', ['openid_connect_iframe_endpoint', 'session_management_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET'], '']);
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $medata = $container->getDefinition(MetadataBuilder::class);
         $medata->addMethodCall('setRoute', ['check_session_iframe', 'oauth2_server_openid_connect_iframe_endpoint']);
     }
 }

195) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SessionManagementRouteCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition('session_management_pipe') || !$container->getParameter('oauth2_server.endpoint.session_management.enabled')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.session_management.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

196) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SignedMetadataCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataController::class) || false === $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
+        if ($container->hasDefinition(MetadataController::class) || false === $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
             return;
         }
         $signatureAlgorithm = $container->getParameter('oauth2_server.endpoint.metadata.signature.algorithm');
         //$keySey = $container->getAlias('oauth2_server.endpoint.metadata.signature.key_set');
         $metadata = $container->getDefinition(MetadataController::class);
         $metadata->addMethodCall('enableSignedMetadata', [new Reference('jose.jws_builder.metadata_signature'), $signatureAlgorithm, new Reference('jose.key_set.oauth2_server.key_set.signature')]);

197) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SignedMetadataCompilerPass.php:28    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataController::class) || false === $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
+        if (!$container->hasDefinition(MetadataController::class) || true === $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
             return;
         }
         $signatureAlgorithm = $container->getParameter('oauth2_server.endpoint.metadata.signature.algorithm');
         //$keySey = $container->getAlias('oauth2_server.endpoint.metadata.signature.key_set');
         $metadata = $container->getDefinition(MetadataController::class);
         $metadata->addMethodCall('enableSignedMetadata', [new Reference('jose.jws_builder.metadata_signature'), $signatureAlgorithm, new Reference('jose.key_set.oauth2_server.key_set.signature')]);

198) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SignedMetadataCompilerPass.php:28    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataController::class) || false === $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
+        if (!$container->hasDefinition(MetadataController::class) || false !== $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
             return;
         }
         $signatureAlgorithm = $container->getParameter('oauth2_server.endpoint.metadata.signature.algorithm');
         //$keySey = $container->getAlias('oauth2_server.endpoint.metadata.signature.key_set');
         $metadata = $container->getDefinition(MetadataController::class);
         $metadata->addMethodCall('enableSignedMetadata', [new Reference('jose.jws_builder.metadata_signature'), $signatureAlgorithm, new Reference('jose.key_set.oauth2_server.key_set.signature')]);

199) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SignedMetadataCompilerPass.php:28    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(MetadataController::class) || false === $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
+        if (!$container->hasDefinition(MetadataController::class) && false === $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
             return;
         }
         $signatureAlgorithm = $container->getParameter('oauth2_server.endpoint.metadata.signature.algorithm');
         //$keySey = $container->getAlias('oauth2_server.endpoint.metadata.signature.key_set');
         $metadata = $container->getDefinition(MetadataController::class);
         $metadata->addMethodCall('enableSignedMetadata', [new Reference('jose.jws_builder.metadata_signature'), $signatureAlgorithm, new Reference('jose.key_set.oauth2_server.key_set.signature')]);

200) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/SignedMetadataCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(MetadataController::class) || false === $container->getParameter('oauth2_server.endpoint.metadata.signature.enabled')) {
             return;
         }
         $signatureAlgorithm = $container->getParameter('oauth2_server.endpoint.metadata.signature.algorithm');
         //$keySey = $container->getAlias('oauth2_server.endpoint.metadata.signature.key_set');

201) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenEndpointAuthMethodCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(TokenEndpointAuthMethodManager::class)) {
+        if ($container->hasDefinition(TokenEndpointAuthMethodManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenEndpointAuthMethodManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_endpoint_auth_method');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

202) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenEndpointAuthMethodCompilerPass.php:36    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_endpoint_auth_method');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
         if (!$container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);

203) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenEndpointAuthMethodCompilerPass.php:40    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $metadata = $container->getDefinition(MetadataBuilder::class);
         $metadata->addMethodCall('setTokenEndpointAuthMethodManager', [new Reference(TokenEndpointAuthMethodManager::class)]);
     }
 }

204) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenEndpointAuthMethodCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(TokenEndpointAuthMethodManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenEndpointAuthMethodManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_endpoint_auth_method');

205) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenEndpointExtensionCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(TokenEndpointExtensionManager::class)) {
+        if ($container->hasDefinition(TokenEndpointExtensionManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenEndpointExtensionManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_endpoint_extension');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

206) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenEndpointExtensionCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_endpoint_extension');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


207) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenEndpointExtensionCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(TokenEndpointExtensionManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenEndpointExtensionManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_endpoint_extension');

208) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenIntrospectionEndpointAuthMethodCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(TokenIntrospectionEndpointAuthMethodManager::class)) {
+        if ($container->hasDefinition(TokenIntrospectionEndpointAuthMethodManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenIntrospectionEndpointAuthMethodManager::class);
         $taggedServices = $container->findTaggedServiceIds('token_introspection_endpoint_auth_method');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('addTokenIntrospectionEndpointAuthMethod', [new Reference($id)]);

209) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenIntrospectionEndpointAuthMethodCompilerPass.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('token_introspection_endpoint_auth_method');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('addTokenIntrospectionEndpointAuthMethod', [new Reference($id)]);
         }
     }
 }


210) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenIntrospectionEndpointAuthMethodCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(TokenIntrospectionEndpointAuthMethodManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenIntrospectionEndpointAuthMethodManager::class);
         $taggedServices = $container->findTaggedServiceIds('token_introspection_endpoint_auth_method');

211) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenIntrospectionRouteCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('token_introspection_pipe')) {
+        if ($container->hasDefinition('token_introspection_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.token_introspection.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['token_introspection_endpoint', 'token_introspection_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['POST'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

212) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenIntrospectionRouteCompilerPass.php:48    [M] LogicalNot

--- Original
+++ New
@@ @@
         $route_loader->addMethodCall('addRoute', ['token_introspection_endpoint', 'token_introspection_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['POST'], '']);
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['token_introspection_endpoint', 'oauth2_server_token_introspection_endpoint']);
     }
 }

213) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenIntrospectionRouteCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition('token_introspection_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.token_introspection.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

214) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenRevocationRouteCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('token_revocation_pipe')) {
+        if ($container->hasDefinition('token_revocation_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.token_revocation.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['token_revocation_endpoint', 'token_revocation_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET', 'POST'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

215) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenRevocationRouteCompilerPass.php:48    [M] LogicalNot

--- Original
+++ New
@@ @@
         $route_loader->addMethodCall('addRoute', ['token_revocation_endpoint', 'token_revocation_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET', 'POST'], '']);
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['token_revocation_endpoint', 'oauth2_server_token_revocation_endpoint']);
     }
 }

216) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenRevocationRouteCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition('token_revocation_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.token_revocation.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

217) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenRouteCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('token_endpoint_pipe')) {
+        if ($container->hasDefinition('token_endpoint_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.token.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['token_endpoint', 'token_endpoint_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['POST'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

218) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenRouteCompilerPass.php:48    [M] LogicalNot

--- Original
+++ New
@@ @@
         $route_loader->addMethodCall('addRoute', ['token_endpoint', 'token_endpoint_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['POST'], '']);
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['token_endpoint', 'oauth2_server_token_endpoint']);
     }
 }

219) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenRouteCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition('token_endpoint_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.endpoint.token.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

220) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(TokenTypeManager::class)) {
+        if ($container->hasDefinition(TokenTypeManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenTypeManager::class);
         $default = $container->getParameter('oauth2_server.token_type.default');
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_type');
         $default_found = false;

221) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:35    [M] FalseValue

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_type');
-        $default_found = false;
+        $default_found = true;
         $token_type_names = [];
         foreach ($taggedServices as $id => $tags) {
             foreach ($tags as $attributes) {
                 Assertion::keyExists($attributes, 'scheme', sprintf("The token type '%s' does not have any 'scheme' attribute.", $id));
                 $is_default = $default === $attributes['scheme'];
                 $token_type_names[] = $attributes['scheme'];

222) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:40    [M] Identical

--- Original
+++ New
@@ @@
                 Assertion::keyExists($attributes, 'scheme', sprintf("The token type '%s' does not have any 'scheme' attribute.", $id));
-                $is_default = $default === $attributes['scheme'];
+                $is_default = $default !== $attributes['scheme'];
                 $token_type_names[] = $attributes['scheme'];
                 if (true === $is_default) {
                     $default_found = true;
                 }
                 $definition->addMethodCall('add', [new Reference($id), $is_default]);
             }

223) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:42    [M] TrueValue

--- Original
+++ New
@@ @@
                 $token_type_names[] = $attributes['scheme'];
-                if (true === $is_default) {
+                if (false === $is_default) {
                     $default_found = true;
                 }
                 $definition->addMethodCall('add', [new Reference($id), $is_default]);
             }
         }
         Assertion::true($default_found, sprintf('Unable to find the token type "%s". Available token types are: %s.', $default, json_encode($token_type_names, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));

224) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:42    [M] Identical

--- Original
+++ New
@@ @@
                 $token_type_names[] = $attributes['scheme'];
-                if (true === $is_default) {
+                if (true !== $is_default) {
                     $default_found = true;
                 }
                 $definition->addMethodCall('add', [new Reference($id), $is_default]);
             }
         }
         Assertion::true($default_found, sprintf('Unable to find the token type "%s". Available token types are: %s.', $default, json_encode($token_type_names, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));

225) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:43    [M] TrueValue

--- Original
+++ New
@@ @@
                 if (true === $is_default) {
-                    $default_found = true;
+                    $default_found = false;
                 }
                 $definition->addMethodCall('add', [new Reference($id), $is_default]);
             }
         }
         Assertion::true($default_found, sprintf('Unable to find the token type "%s". Available token types are: %s.', $default, json_encode($token_type_names, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));
     }

226) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:38    [M] Foreach_

--- Original
+++ New
@@ @@
         foreach ($taggedServices as $id => $tags) {
-            foreach ($tags as $attributes) {
+            foreach (array() as $attributes) {
                 Assertion::keyExists($attributes, 'scheme', sprintf("The token type '%s' does not have any 'scheme' attribute.", $id));
                 $is_default = $default === $attributes['scheme'];
                 $token_type_names[] = $attributes['scheme'];
                 if (true === $is_default) {
                     $default_found = true;
                 }

227) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:37    [M] Foreach_

--- Original
+++ New
@@ @@
         $token_type_names = [];
-        foreach ($taggedServices as $id => $tags) {
+        foreach (array() as $id => $tags) {
             foreach ($tags as $attributes) {
                 Assertion::keyExists($attributes, 'scheme', sprintf("The token type '%s' does not have any 'scheme' attribute.", $id));
                 $is_default = $default === $attributes['scheme'];
                 $token_type_names[] = $attributes['scheme'];
                 if (true === $is_default) {
                     $default_found = true;

228) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:48    [M] BitwiseOr

--- Original
+++ New
@@ @@
         }
-        Assertion::true($default_found, sprintf('Unable to find the token type "%s". Available token types are: %s.', $default, json_encode($token_type_names, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));
+        Assertion::true($default_found, sprintf('Unable to find the token type "%s". Available token types are: %s.', $default, json_encode($token_type_names, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES)));
     }
 }


229) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(TokenTypeManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenTypeManager::class);
         $default = $container->getParameter('oauth2_server.token_type.default');

230) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeHintCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(TokenTypeHintManager::class)) {
+        if ($container->hasDefinition(TokenTypeHintManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenTypeHintManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_type_hint');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

231) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeHintCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_type_hint');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


232) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/TokenTypeHintCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(TokenTypeHintManager::class)) {
             return;
         }
         $definition = $container->getDefinition(TokenTypeHintManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_token_type_hint');

233) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserAccountDiscoveryCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(UserAccountDiscoveryManager::class)) {
+        if ($container->hasDefinition(UserAccountDiscoveryManager::class)) {
             return;
         }
         $definition = $container->getDefinition(UserAccountDiscoveryManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_user_account_discovery');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

234) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserAccountDiscoveryCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_user_account_discovery');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


235) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserAccountDiscoveryCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(UserAccountDiscoveryManager::class)) {
             return;
         }
         $definition = $container->getDefinition(UserAccountDiscoveryManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_user_account_discovery');

236) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoEndpointEncryptionCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jwe_builder.oauth2_server.userinfo')) {
+        if ($container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jwe_builder.oauth2_server.userinfo')) {
             return;
         }
         $definition = $container->getDefinition(UserInfoEndpoint::class);
         $definition->addMethodCall('enableEncryption', [new Reference('jose.jwe_builder.oauth2_server.userinfo')]);
         if ($container->hasDefinition(MetadataBuilder::class)) {
             $definition = $container->getDefinition(MetadataBuilder::class);

237) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoEndpointEncryptionCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jwe_builder.oauth2_server.userinfo')) {
+        if (!$container->hasDefinition(UserInfoEndpoint::class) || $container->hasDefinition('jose.jwe_builder.oauth2_server.userinfo')) {
             return;
         }
         $definition = $container->getDefinition(UserInfoEndpoint::class);
         $definition->addMethodCall('enableEncryption', [new Reference('jose.jwe_builder.oauth2_server.userinfo')]);
         if ($container->hasDefinition(MetadataBuilder::class)) {
             $definition = $container->getDefinition(MetadataBuilder::class);

238) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoEndpointEncryptionCompilerPass.php:29    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jwe_builder.oauth2_server.userinfo')) {
+        if (!$container->hasDefinition(UserInfoEndpoint::class) && !$container->hasDefinition('jose.jwe_builder.oauth2_server.userinfo')) {
             return;
         }
         $definition = $container->getDefinition(UserInfoEndpoint::class);
         $definition->addMethodCall('enableEncryption', [new Reference('jose.jwe_builder.oauth2_server.userinfo')]);
         if ($container->hasDefinition(MetadataBuilder::class)) {
             $definition = $container->getDefinition(MetadataBuilder::class);

239) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoEndpointEncryptionCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jwe_builder.oauth2_server.userinfo')) {
             return;
         }
         $definition = $container->getDefinition(UserInfoEndpoint::class);
         $definition->addMethodCall('enableEncryption', [new Reference('jose.jwe_builder.oauth2_server.userinfo')]);

240) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoEndpointSignatureCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jws_builder.oauth2_server.userinfo')) {
+        if ($container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jws_builder.oauth2_server.userinfo')) {
             return;
         }
         $definition = $container->getDefinition(UserInfoEndpoint::class);
         $definition->addMethodCall('enableSignature', [new Reference('jose.jws_builder.oauth2_server.userinfo'), new Reference('jose.key_set.oauth2_server.key_set.signature')]);
         if ($container->hasDefinition(MetadataBuilder::class)) {
             $definition = $container->getDefinition(MetadataBuilder::class);

241) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoEndpointSignatureCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jws_builder.oauth2_server.userinfo')) {
+        if (!$container->hasDefinition(UserInfoEndpoint::class) || $container->hasDefinition('jose.jws_builder.oauth2_server.userinfo')) {
             return;
         }
         $definition = $container->getDefinition(UserInfoEndpoint::class);
         $definition->addMethodCall('enableSignature', [new Reference('jose.jws_builder.oauth2_server.userinfo'), new Reference('jose.key_set.oauth2_server.key_set.signature')]);
         if ($container->hasDefinition(MetadataBuilder::class)) {
             $definition = $container->getDefinition(MetadataBuilder::class);

242) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoEndpointSignatureCompilerPass.php:29    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jws_builder.oauth2_server.userinfo')) {
+        if (!$container->hasDefinition(UserInfoEndpoint::class) && !$container->hasDefinition('jose.jws_builder.oauth2_server.userinfo')) {
             return;
         }
         $definition = $container->getDefinition(UserInfoEndpoint::class);
         $definition->addMethodCall('enableSignature', [new Reference('jose.jws_builder.oauth2_server.userinfo'), new Reference('jose.key_set.oauth2_server.key_set.signature')]);
         if ($container->hasDefinition(MetadataBuilder::class)) {
             $definition = $container->getDefinition(MetadataBuilder::class);

243) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoEndpointSignatureCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(UserInfoEndpoint::class) || !$container->hasDefinition('jose.jws_builder.oauth2_server.userinfo')) {
             return;
         }
         $definition = $container->getDefinition(UserInfoEndpoint::class);
         $definition->addMethodCall('enableSignature', [new Reference('jose.jws_builder.oauth2_server.userinfo'), new Reference('jose.key_set.oauth2_server.key_set.signature')]);

244) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserInfoPairwiseSubjectCompilerPass.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasAlias('oauth2_server.openid_connect.pairwise_subject.service')) {
+        if ($container->hasAlias('oauth2_server.openid_connect.pairwise_subject.service')) {
             return;
         }
         $definition = $container->getDefinition(UserInfo::class);
         $service = $container->getAlias('oauth2_server.openid_connect.pairwise_subject.service');
         $isDefault = $container->getParameter('oauth2_server.openid_connect.pairwise_subject.is_default');
         $definition->addMethodCall('enablePairwiseSubject', [new Reference($service), $isDefault]);

245) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserInfoPairwiseSubjectCompilerPass.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasAlias('oauth2_server.openid_connect.pairwise_subject.service')) {
             return;
         }
         $definition = $container->getDefinition(UserInfo::class);
         $service = $container->getAlias('oauth2_server.openid_connect.pairwise_subject.service');

246) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoRouteCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition('oauth2_server_userinfo_pipe')) {
+        if ($container->hasDefinition('oauth2_server_userinfo_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.openid_connect.userinfo_endpoint.path');
         $route_loader = $container->getDefinition(RouteLoader::class);
         $route_loader->addMethodCall('addRoute', ['openid_connect_userinfo_endpoint', 'oauth2_server_userinfo_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET', 'POST'], '']);
         if (!$container->hasDefinition(MetadataBuilder::class)) {

247) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoRouteCompilerPass.php:48    [M] LogicalNot

--- Original
+++ New
@@ @@
         $route_loader->addMethodCall('addRoute', ['openid_connect_userinfo_endpoint', 'oauth2_server_userinfo_pipe', 'dispatch', $path, [], [], [], '', ['https'], ['GET', 'POST'], '']);
-        if (!$container->hasDefinition(MetadataBuilder::class)) {
+        if ($container->hasDefinition(MetadataBuilder::class)) {
             return;
         }
         $definition = $container->getDefinition(MetadataBuilder::class);
         $definition->addMethodCall('setRoute', ['userinfo_endpoint', 'oauth2_server_openid_connect_userinfo_endpoint']);
     }
 }

248) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserinfoRouteCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition('oauth2_server_userinfo_pipe')) {
             return;
         }
         $path = $container->getParameter('oauth2_server.openid_connect.userinfo_endpoint.path');
         $route_loader = $container->getDefinition(RouteLoader::class);

249) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserInfoScopeSupportCompilerPass.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition(UserInfoScopeSupportManager::class)) {
+        if ($container->hasDefinition(UserInfoScopeSupportManager::class)) {
             return;
         }
         $definition = $container->getDefinition(UserInfoScopeSupportManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_userinfo_scope_support');
         foreach ($taggedServices as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);

250) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserInfoScopeSupportCompilerPass.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_userinfo_scope_support');
-        foreach ($taggedServices as $id => $attributes) {
+        foreach (array() as $id => $attributes) {
             $definition->addMethodCall('add', [new Reference($id)]);
         }
     }
 }


251) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Compiler/UserInfoScopeSupportCompilerPass.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ContainerBuilder $container)
+    protected function process(ContainerBuilder $container)
     {
         if (!$container->hasDefinition(UserInfoScopeSupportManager::class)) {
             return;
         }
         $definition = $container->getDefinition(UserInfoScopeSupportManager::class);
         $taggedServices = $container->findTaggedServiceIds('oauth2_server_userinfo_scope_support');

252) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Configuration.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getConfigTreeBuilder()
+    protected function getConfigTreeBuilder()
     {
         $treeBuilder = new TreeBuilder();
         $rootNode = $treeBuilder->root($this->alias);
         $rootNode->addDefaultsIfNotSet();
         $this->buildFromSources($this->sourceMap, $rootNode);
         return $treeBuilder;

253) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Configuration.php:68    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 $source->addConfiguration($node);
-            } elseif (is_string($k) && is_array($source)) {
+            } elseif (is_string($k) || is_array($source)) {
                 $childNode = $node->children()->arrayNode($k);
                 $this->buildFromSources($source, $childNode);
             }
         }
     }
 }

254) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Configuration.php:65    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($sources as $k => $source) {
+        foreach (array() as $k => $source) {
             if ($source instanceof SourceInterface) {
                 $source->addConfiguration($node);
             } elseif (is_string($k) && is_array($source)) {
                 $childNode = $node->children()->arrayNode($k);
                 $this->buildFromSources($source, $childNode);
             }

255) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAlias()
+    protected function getAlias()
     {
         return $this->alias;
     }
     /**
      * {@inheritdoc}
      */

256) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function load(array $configs, ContainerBuilder $container)
+    protected function load(array $configs, ContainerBuilder $container)
     {
         $configuration = new Configuration($this->alias, $this->sourceMap);
         $mergedConfig = $this->processConfiguration($configuration, $configs);
         $path = 'oauth2_server';
         $this->loadSources($path, $this->sourceMap, $mergedConfig, $container);
         $this->loadInternal($mergedConfig, $container);

257) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:83    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(ContainerBuilder $container)
+    protected function prepend(ContainerBuilder $container)
     {
         $bundleConfig = current($container->getExtensionConfig($this->getAlias()));
         $this->prependSources($bundleConfig, '', $this->sourceMap, $container);
     }
     /**
      * @param string            $path

258) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:100    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 $source->load($path, $container, $mergedConfig);
-            } elseif (is_string($k) && is_array($source)) {
+            } elseif (is_string($k) || is_array($source)) {
                 $this->loadSources($path . '.' . $k, $source, $mergedConfig[$k], $container);
             }
         }
     }
     /**
      * @param array             $bundleConfig

259) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:97    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($sources as $k => $source) {
+        foreach (array() as $k => $source) {
             if ($source instanceof SourceInterface) {
                 $source->load($path, $container, $mergedConfig);
             } elseif (is_string($k) && is_array($source)) {
                 $this->loadSources($path . '.' . $k, $source, $mergedConfig[$k], $container);
             }
         }

260) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:117    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 $source->prepend($bundleConfig, $path, $container);
-            } elseif (is_string($k) && is_array($source)) {
+            } elseif (is_string($k) || is_array($source)) {
                 $this->prependSources($bundleConfig, $path . '[' . $k . ']', $source, $container);
             }
         }
     }
     /**
      * @param array            $mergedConfig

261) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:114    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($sources as $k => $source) {
+        foreach (array() as $k => $source) {
             if ($source instanceof SourceInterface) {
                 $source->prepend($bundleConfig, $path, $container);
             } elseif (is_string($k) && is_array($source)) {
                 $this->prependSources($bundleConfig, $path . '[' . $k . ']', $source, $container);
             }
         }

262) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:139    [M] Foreach_

--- Original
+++ New
@@ @@
         $files = ['access_token', 'access_token_handler', 'route_loader', 'token_type_hint', 'oauth2_response', 'user_account_discovery', 'content_parser_middleware'];
-        foreach ($files as $basename) {
+        foreach (array() as $basename) {
             $loader->load(sprintf('%s.php', $basename));
         }
     }
     private function initSourceMap()
     {
         $this->sourceMap = [new ClientSource(), new FirewallSource(), new ServerNameSource(), new AccessTokenRepositorySource(), new UserAccountSource(), new ResourceServerRepositorySource(), new TokenTypeSource(), new TokenEndpointAuthMethodSource(), new GrantSource(), new EndpointSource(), new ScopeSource(), new OpenIdConnectSource(), new HttpSource(), new KeySet()];

263) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/OAuth2FrameworkServerExtension.php:127    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function loadInternal(array $mergedConfig, ContainerBuilder $container)
+    private function loadInternal(array $mergedConfig, ContainerBuilder $container)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../Resources/config'));
         $files = ['access_token', 'access_token_handler', 'route_loader', 'token_type_hint', 'oauth2_response', 'user_account_discovery', 'content_parser_middleware'];
         foreach ($files as $basename) {
             $loader->load(sprintf('%s.php', $basename));
         }

264) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/AccessTokenRepositorySource.php:24    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'access_token';
     }
     /**
      * {@inheritdoc}
      */

265) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/AccessTokenRepositorySource.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['repository'] as $k) {
+        foreach (array() as $k) {
             $container->setAlias($path . '.' . $k, $config[$k]);
         }
     }
     /**
      * {@inheritdoc}
      */

266) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/AccessTokenRepositorySource.php:32    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['repository'] as $k) {
             $container->setAlias($path . '.' . $k, $config[$k]);
         }
     }
     /**

267) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/AccessTokenRepositorySource.php:42    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('repository')->info('The access token repository.')->isRequired()->end()->end();
     }
 }


268) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ActionableSource.php:27    [M] TrueValue

--- Original
+++ New
@@ @@
         $container->setParameter($path . '.' . $this->name() . '.enabled', $config[$this->name()]['enabled']);
-        if (true === $config[$this->name()]['enabled']) {
+        if (false === $config[$this->name()]['enabled']) {
             parent::load($path, $container, $config);
         }
     }
     /**
      * {@inheritdoc}
      */

269) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ActionableSource.php:27    [M] Identical

--- Original
+++ New
@@ @@
         $container->setParameter($path . '.' . $this->name() . '.enabled', $config[$this->name()]['enabled']);
-        if (true === $config[$this->name()]['enabled']) {
+        if (true !== $config[$this->name()]['enabled']) {
             parent::load($path, $container, $config);
         }
     }
     /**
      * {@inheritdoc}
      */

270) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ActionableSource.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function load(string $path, ContainerBuilder $container, array $config)
+    protected function load(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.' . $this->name() . '.enabled', $config[$this->name()]['enabled']);
         if (true === $config[$this->name()]['enabled']) {
             parent::load($path, $container, $config);
         }
     }

271) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ActionableSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->booleanNode('enabled')->defaultFalse()->end()->end();
     }
 }


272) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:33    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($this->subSources as $subSource) {
+        foreach (array() as $subSource) {
             $subSource->load($path . '.' . $this->name(), $container, $config[$this->name()]);
         }
         $this->continueLoading($path . '.' . $this->name(), $container, $config[$this->name()]);
     }
     /**
      * {@inheritdoc}

273) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:31    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function load(string $path, ContainerBuilder $container, array $config)
+    protected function load(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($this->subSources as $subSource) {
             $subSource->load($path . '.' . $this->name(), $container, $config[$this->name()]);
         }
         $this->continueLoading($path . '.' . $this->name(), $container, $config[$this->name()]);
     }

274) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:44    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($this->subSources as $subSource) {
+        foreach (array() as $subSource) {
             $subSource->prepend($bundleConfig, $path . '[' . $this->name() . ']', $container);
         }
     }
     /**
      * {@inheritdoc}
      */

275) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         foreach ($this->subSources as $subSource) {
             $subSource->prepend($bundleConfig, $path . '[' . $this->name() . ']', $container);
         }
     }
     /**

276) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:59    [M] Foreach_

--- Original
+++ New
@@ @@
         $this->continueConfiguration($sourceNode);
-        foreach ($this->subSources as $subSource) {
+        foreach (array() as $subSource) {
             $subSource->addConfiguration($sourceNode);
         }
     }
     /**
      * @param string           $path
      * @param ContainerBuilder $container

277) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addConfiguration(NodeDefinition $node)
+    protected function addConfiguration(NodeDefinition $node)
     {
         $sourceNode = $node->children()->arrayNode($this->name())->addDefaultsIfNotSet();
         $this->continueConfiguration($sourceNode);
         foreach ($this->subSources as $subSource) {
             $subSource->addConfiguration($sourceNode);
         }

278) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:69    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
     }
     /**
      * @return string
      */
     protected abstract function name() : string;

279) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:81    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         $node->addDefaultsIfNotSet();
     }
     /**
      * @param SourceInterface $source
      */

280) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ArraySource.php:89    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function addSubSource(SourceInterface $source)
+    private function addSubSource(SourceInterface $source)
     {
         $this->subSources[] = $source;
     }
 }


281) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ClientSource.php:26    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'client';
     }
     /**
      * {@inheritdoc}
      */

282) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ClientSource.php:34    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setAlias($path . '.event_store', $config['event_store']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../Resources/config'));
         $loader->load('client.php');
     }
     /**

283) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ClientSource.php:45    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->children()->scalarNode('event_store')->defaultNull()->end()->end();
     }

284) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointFormPostResponseModeSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('form_post_response_mode.php');
     }
     /**

285) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointFormPostResponseModeSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('form_post_response_mode.php');

286) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointFormPostResponseModeSource.php:40    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'form_post';
     }
     /**
      * {@inheritdoc}
      */

287) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointFormPostResponseModeSource.php:48    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('template')->info('The template used to render the form.')->defaultValue('@OAuth2FrameworkServerBundle/form_post/response.html.twig')->end()->end();
     }
 }


288) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointPreConfiguredAuthorizationSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setAlias($path . '.event_store', $config['event_store']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('pre_configured_authorization.php');
     }
     /**

289) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointPreConfiguredAuthorizationSource.php:38    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'pre_configured_authorization';
     }
     /**
      * {@inheritdoc}
      */

290) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointPreConfiguredAuthorizationSource.php:52    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return false === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->children()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


291) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointPreConfiguredAuthorizationSource.php:52    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return true !== $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->children()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


292) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointPreConfiguredAuthorizationSource.php:52    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return true === $config['enabled'] || empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->children()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


293) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointPreConfiguredAuthorizationSource.php:46    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->children()->scalarNode('event_store')->defaultNull()->end()->end();
     }

294) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectEncryptionSource.php:27    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['required', 'key_encryption_algorithms', 'content_encryption_algorithms'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.authorization_request_object.key_set.encryption');
     }
     /**
      * {@inheritdoc}

295) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectEncryptionSource.php:25    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['required', 'key_encryption_algorithms', 'content_encryption_algorithms'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.authorization_request_object.key_set.encryption');
     }

296) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectEncryptionSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'encryption';
     }
     /**
      * {@inheritdoc}
      */

297) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectEncryptionSource.php:44    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->booleanNode('required')->info('If true, incoming request objects must be encrypted.')->defaultFalse()->end()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

298) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectEncryptionSource.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         Assertion::keyExists($bundleConfig['key_set'], 'encryption', 'The encryption key set must be enabled.');
         //ConfigurationHelper::addKeyset($container, 'authorization_request_object.key_set.encryption', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
     }
 }

299) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectReferenceSource.php:27    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
     }
     /**
      * {@inheritdoc}
      */

300) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectReferenceSource.php:25    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
     }
     /**

301) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectReferenceSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'reference';
     }
     /**
      * {@inheritdoc}
      */

302) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectReferenceSource.php:43    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->booleanNode('uris_registration_required')->info('If true, request object reference Uris must be registered to be used (highly recommended).')->defaultTrue()->end()->end();
     }
 }


303) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:38    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
     }
     /**
      * {@inheritdoc}
      */

304) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
     }
     /**

305) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:46    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'request_object';
     }
     /**
      * {@inheritdoc}
      */

306) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:54    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

307) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:77    [M] TrueValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (false === $sourceConfig['enabled']) {
             $claim_checkers = ['exp', 'iat', 'nbf'];
             // FIXME
             $header_checkers = ['crit'];
             // FIXME
             ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
             ConfigurationHelper::addClaimChecker($container, $this->name(), $claim_checkers, false);

308) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:77    [M] Identical

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (true !== $sourceConfig['enabled']) {
             $claim_checkers = ['exp', 'iat', 'nbf'];
             // FIXME
             $header_checkers = ['crit'];
             // FIXME
             ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
             ConfigurationHelper::addClaimChecker($container, $this->name(), $claim_checkers, false);

309) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:80    [M] FalseValue

--- Original
+++ New
@@ @@
             // FIXME
-            ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
+            ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], true);
             ConfigurationHelper::addClaimChecker($container, $this->name(), $claim_checkers, false);
             if (true === $sourceConfig['encryption']['enabled']) {
                 ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
             }
         }
     }

310) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:81    [M] FalseValue

--- Original
+++ New
@@ @@
             ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
-            ConfigurationHelper::addClaimChecker($container, $this->name(), $claim_checkers, false);
+            ConfigurationHelper::addClaimChecker($container, $this->name(), $claim_checkers, true);
             if (true === $sourceConfig['encryption']['enabled']) {
                 ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
             }
         }
     }
 }

311) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:82    [M] TrueValue

--- Original
+++ New
@@ @@
             ConfigurationHelper::addClaimChecker($container, $this->name(), $claim_checkers, false);
-            if (true === $sourceConfig['encryption']['enabled']) {
+            if (false === $sourceConfig['encryption']['enabled']) {
                 ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
             }
         }
     }
 }


312) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:82    [M] Identical

--- Original
+++ New
@@ @@
             ConfigurationHelper::addClaimChecker($container, $this->name(), $claim_checkers, false);
-            if (true === $sourceConfig['encryption']['enabled']) {
+            if (true !== $sourceConfig['encryption']['enabled']) {
                 ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
             }
         }
     }
 }


313) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:83    [M] FalseValue

--- Original
+++ New
@@ @@
             if (true === $sourceConfig['encryption']['enabled']) {
-                ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
+                ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], true);
             }
         }
     }
 }


314) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointRequestObjectSource.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         if (true === $sourceConfig['enabled']) {

315) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointResponseModeSource.php:37    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('response_mode.php');
     }
     /**

316) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointResponseModeSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('response_mode.php');

317) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointResponseModeSource.php:48    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'response_mode';
     }
     /**
      * {@inheritdoc}
      */

318) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointResponseModeSource.php:56    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->booleanNode('allow_response_mode_parameter')->defaultFalse()->end()->end();
     }
 }


319) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointSource.php:39    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('authorization.php');
     }
     /**

320) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointSource.php:37    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('authorization.php');

321) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointSource.php:50    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'authorization';
     }
     /**
      * {@inheritdoc}
      */

322) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/AuthorizationEndpointSource.php:58    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('path')->info('The path to the authorization endpoint.')->defaultValue('/authorize')->end()->scalarNode('login_route_name')->info('The name of the login route. Will be converted into URL and used to redirect the user if not logged in. If you use "FOSUserBundle", the route name should be "fos_user_security_login".')->end()->arrayNode('login_route_parameters')->info('Parameters associated to the login route (if needed).')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->scalarNode('template')->info('The consent page template.')->defaultValue('@OAuth2FrameworkServerBundle/authorization/authorization.html.twig')->end()->scalarNode('allow_token_type_parameter')->info('If true the "token_type" parameter is allowed, else it will be ignored.')->defaultFalse()->end()->scalarNode('enforce_state')->info('If true the "state" parameter is mandatory (highly recommended).')->defaultFalse()->end()->scalarNode('enforce_secured_redirect_uri')->info('If true only secured redirect URIs are allowed.')->defaultTrue()->end()->scalarNode('enforce_redirect_uri_storage')->info('If true redirect URIs must be registered by the client to be used.')->defaultTrue()->end()->end();
     }
 }


323) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientConfigurationSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('client_configuration.php');
     }
     /**

324) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientConfigurationSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('client_configuration.php');

325) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientConfigurationSource.php:40    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'client_configuration';
     }
     /**
      * {@inheritdoc}
      */

326) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientConfigurationSource.php:54    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return false === $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->children()->scalarNode('realm')->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->scalarNode('path')->defaultValue('/client/configure/{client_id}')->end()->end();
     }
 }


327) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientConfigurationSource.php:54    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return true !== $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->children()->scalarNode('realm')->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->scalarNode('path')->defaultValue('/client/configure/{client_id}')->end()->end();
     }
 }


328) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientConfigurationSource.php:54    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return true === $config['enabled'] || empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->children()->scalarNode('realm')->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->scalarNode('path')->defaultValue('/client/configure/{client_id}')->end()->end();
     }
 }


329) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientConfigurationSource.php:48    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->children()->scalarNode('realm')->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->scalarNode('path')->defaultValue('/client/configure/{client_id}')->end()->end();
     }

330) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['required', 'realm', 'authorization_header', 'query_string', 'request_body', 'min_length', 'max_length'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $container->setAlias($path . '.event_store', $config['event_store']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('client_registration_initial_access_token.php');
     }

331) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['required', 'realm', 'authorization_header', 'query_string', 'request_body', 'min_length', 'max_length'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $container->setAlias($path . '.event_store', $config['event_store']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));

332) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:41    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'initial_access_token';
     }
     /**
      * {@inheritdoc}
      */

333) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:55    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return false === $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }

334) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:55    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return true !== $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }

335) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:55    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return true === $config['enabled'] || empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }

336) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:61    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "realm" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return false === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


337) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:61    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "realm" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return true !== $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


338) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:61    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "realm" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return true === $config['enabled'] || empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


339) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:67    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return false === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


340) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:67    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true !== $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


341) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:67    [M] LessThan

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] && $config['max_length'] <= $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


342) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:67    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] && $config['max_length'] >= $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


343) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:67    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] || $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


344) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:77    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


345) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:78    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('realm')->defaultNull()->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(0)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


346) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationInitialAccessTokenSource.php:49    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['event_store']);

347) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:31    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['required', 'allowed_signature_algorithms'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $container->setAlias($path . '.key_set', 'jose.key_set.client_registration_software_statement.key_set.signature');
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('client_registration_software_statement.php');
     }

348) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:29    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['required', 'allowed_signature_algorithms'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $container->setAlias($path . '.key_set', 'jose.key_set.client_registration_software_statement.key_set.signature');
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));

349) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:43    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'software_statement';
     }
     /**
      * {@inheritdoc}
      */

350) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:57    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_set']);
+            return false === $config['enabled'] && empty($config['key_set']);
         })->thenInvalid('The option "key_set" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['allowed_signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('key_set')->end()->arrayNode('allowed_signature_algorithms')->info('Signature algorithms allowed for the software statements. The algorithm "none" should not be used.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

351) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:57    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_set']);
+            return true !== $config['enabled'] && empty($config['key_set']);
         })->thenInvalid('The option "key_set" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['allowed_signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('key_set')->end()->arrayNode('allowed_signature_algorithms')->info('Signature algorithms allowed for the software statements. The algorithm "none" should not be used.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

352) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:57    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_set']);
+            return true === $config['enabled'] || empty($config['key_set']);
         })->thenInvalid('The option "key_set" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['allowed_signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('key_set')->end()->arrayNode('allowed_signature_algorithms')->info('Signature algorithms allowed for the software statements. The algorithm "none" should not be used.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

353) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:63    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "key_set" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['allowed_signature_algorithms']);
+            return false === $config['enabled'] && empty($config['allowed_signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('key_set')->end()->arrayNode('allowed_signature_algorithms')->info('Signature algorithms allowed for the software statements. The algorithm "none" should not be used.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

354) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:63    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "key_set" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['allowed_signature_algorithms']);
+            return true !== $config['enabled'] && empty($config['allowed_signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('key_set')->end()->arrayNode('allowed_signature_algorithms')->info('Signature algorithms allowed for the software statements. The algorithm "none" should not be used.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

355) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:63    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "key_set" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['allowed_signature_algorithms']);
+            return true === $config['enabled'] || empty($config['allowed_signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->scalarNode('key_set')->end()->arrayNode('allowed_signature_algorithms')->info('Signature algorithms allowed for the software statements. The algorithm "none" should not be used.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

356) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:51    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['key_set']);
         })->thenInvalid('The option "key_set" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['allowed_signature_algorithms']);

357) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:89    [M] TrueValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (false === $sourceConfig['enabled']) {
             // FIXME
             ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['allowed_signature_algorithms'], [], ['jws_compact'], false);
             ConfigurationHelper::addKeyset($container, 'client_registration_software_statement.key_set.signature', 'jwkset', ['value' => $sourceConfig['key_set']]);
         }
     }
 }

358) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:89    [M] Identical

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (true !== $sourceConfig['enabled']) {
             // FIXME
             ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['allowed_signature_algorithms'], [], ['jws_compact'], false);
             ConfigurationHelper::addKeyset($container, 'client_registration_software_statement.key_set.signature', 'jwkset', ['value' => $sourceConfig['key_set']]);
         }
     }
 }

359) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:91    [M] FalseValue

--- Original
+++ New
@@ @@
             // FIXME
-            ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['allowed_signature_algorithms'], [], ['jws_compact'], false);
+            ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['allowed_signature_algorithms'], [], ['jws_compact'], true);
             ConfigurationHelper::addKeyset($container, 'client_registration_software_statement.key_set.signature', 'jwkset', ['value' => $sourceConfig['key_set']]);
         }
     }
 }


360) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSoftwareStatementSource.php:82    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         if (true === $sourceConfig['enabled']) {

361) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSource.php:38    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('client_registration.php');
     }
     /**

362) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('client_registration.php');

363) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSource.php:49    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'client_registration';
     }
     /**
      * {@inheritdoc}
      */

364) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/ClientRegistrationSource.php:57    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('path')->defaultValue('/client/management')->end()->end();
     }
 }


365) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/EndpointSource.php:40    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'endpoint';
     }
 }


366) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/IssuerDiscoveryEndpointSource.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function load(string $path, ContainerBuilder $container, array $config)
+    protected function load(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.issuer_discovery', $config['issuer_discovery']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('issuer_discovery.php');
     }
     /**

367) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/IssuerDiscoveryEndpointSource.php:37    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addConfiguration(NodeDefinition $node)
+    protected function addConfiguration(NodeDefinition $node)
     {
         $node->children()->arrayNode('issuer_discovery')->defaultValue([])->useAttributeAsKey('name')->prototype('array')->children()->scalarNode('path')->isRequired()->end()->scalarNode('resource_repository')->isRequired()->end()->scalarNode('server')->isRequired()->end()->end()->end()->end()->end();
     }
     /**
      * {@inheritdoc}
      */

368) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/IssuerDiscoveryEndpointSource.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
     }
 }


369) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         //$container->setParameter($path.'.path', $config['path']);
     }
     /**
      * {@inheritdoc}
      */

370) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'jwks_uri';
     }
     /**
      * {@inheritdoc}
      */

371) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:49    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && (empty($config['path']) || empty($config['key_set']));
+            return false === $config['enabled'] && (empty($config['path']) || empty($config['key_set']));
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->info('The path of the key set. Something like "/openid_connect/certs"')->end()->scalarNode('key_set')->info('The public key set to share with third party applications.')->end()->integerNode('max_age')->info('When share, this value indicates how many seconds the HTTP client should keep the key in cache. Default is 21600 = 6 hours.')->defaultValue(21600)->end()->end();
     }
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';

372) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:49    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && (empty($config['path']) || empty($config['key_set']));
+            return true !== $config['enabled'] && (empty($config['path']) || empty($config['key_set']));
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->info('The path of the key set. Something like "/openid_connect/certs"')->end()->scalarNode('key_set')->info('The public key set to share with third party applications.')->end()->integerNode('max_age')->info('When share, this value indicates how many seconds the HTTP client should keep the key in cache. Default is 21600 = 6 hours.')->defaultValue(21600)->end()->end();
     }
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';

373) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:49    [M] LogicalOr

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && (empty($config['path']) || empty($config['key_set']));
+            return true === $config['enabled'] && (empty($config['path']) && empty($config['key_set']));
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->info('The path of the key set. Something like "/openid_connect/certs"')->end()->scalarNode('key_set')->info('The public key set to share with third party applications.')->end()->integerNode('max_age')->info('When share, this value indicates how many seconds the HTTP client should keep the key in cache. Default is 21600 = 6 hours.')->defaultValue(21600)->end()->end();
     }
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';

374) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:49    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && (empty($config['path']) || empty($config['key_set']));
+            return true === $config['enabled'] || (empty($config['path']) || empty($config['key_set']));
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->info('The path of the key set. Something like "/openid_connect/certs"')->end()->scalarNode('key_set')->info('The public key set to share with third party applications.')->end()->integerNode('max_age')->info('When share, this value indicates how many seconds the HTTP client should keep the key in cache. Default is 21600 = 6 hours.')->defaultValue(21600)->end()->end();
     }
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';

375) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:43    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && (empty($config['path']) || empty($config['key_set']));
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->info('The path of the key set. Something like "/openid_connect/certs"')->end()->scalarNode('key_set')->info('The public key set to share with third party applications.')->end()->integerNode('max_age')->info('When share, this value indicates how many seconds the HTTP client should keep the key in cache. Default is 21600 = 6 hours.')->defaultValue(21600)->end()->end();
     }

376) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:73    [M] TrueValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (false === $sourceConfig['enabled']) {
             ConfigurationHelper::addKeyset($container, 'oauth2_server.endpoint.jwks_uri', 'jwkset', ['value' => $sourceConfig['key_set'], 'path' => $sourceConfig['path']]);
         }
     }
 }


377) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:73    [M] Identical

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (true !== $sourceConfig['enabled']) {
             ConfigurationHelper::addKeyset($container, 'oauth2_server.endpoint.jwks_uri', 'jwkset', ['value' => $sourceConfig['key_set'], 'path' => $sourceConfig['path']]);
         }
     }
 }


378) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/JwksUriEndpointSource.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
     }
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         if (true === $sourceConfig['enabled']) {

379) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/MetadataEndpointSource.php:37    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['path', 'custom_values', 'custom_routes'] as $key) {
+        foreach (array() as $key) {
             $container->setParameter($path . '.' . $key, $config[$key]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('metadata.php');
     }
     /**

380) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/MetadataEndpointSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['path', 'custom_values', 'custom_routes'] as $key) {
             $container->setParameter($path . '.' . $key, $config[$key]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('metadata.php');

381) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/MetadataEndpointSource.php:47    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'metadata';
     }
     /**
      * {@inheritdoc}
      */

382) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/MetadataEndpointSource.php:61    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['path']);
+            return false === $config['enabled'] && empty($config['path']);
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->defaultValue('/.well-known/openid-configuration')->end()->arrayNode('custom_routes')->info('Custom routes added to the metadata response.')->useAttributeAsKey('name')->prototype('array')->children()->scalarNode('route_name')->info('Route name.')->isRequired()->end()->arrayNode('route_parameters')->info('Parameters associated to the route (if needed).')->useAttributeAsKey('name')->prototype('variable')->end()->treatNullLike([])->end()->end()->end()->treatNullLike([])->end()->arrayNode('custom_values')->info('Custom values added to the metadata response.')->useAttributeAsKey('name')->prototype('variable')->end()->treatNullLike([])->end()->end();
     }
 }


383) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/MetadataEndpointSource.php:61    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['path']);
+            return true !== $config['enabled'] && empty($config['path']);
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->defaultValue('/.well-known/openid-configuration')->end()->arrayNode('custom_routes')->info('Custom routes added to the metadata response.')->useAttributeAsKey('name')->prototype('array')->children()->scalarNode('route_name')->info('Route name.')->isRequired()->end()->arrayNode('route_parameters')->info('Parameters associated to the route (if needed).')->useAttributeAsKey('name')->prototype('variable')->end()->treatNullLike([])->end()->end()->end()->treatNullLike([])->end()->arrayNode('custom_values')->info('Custom values added to the metadata response.')->useAttributeAsKey('name')->prototype('variable')->end()->treatNullLike([])->end()->end();
     }
 }


384) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/MetadataEndpointSource.php:61    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['path']);
+            return true === $config['enabled'] || empty($config['path']);
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->defaultValue('/.well-known/openid-configuration')->end()->arrayNode('custom_routes')->info('Custom routes added to the metadata response.')->useAttributeAsKey('name')->prototype('array')->children()->scalarNode('route_name')->info('Route name.')->isRequired()->end()->arrayNode('route_parameters')->info('Parameters associated to the route (if needed).')->useAttributeAsKey('name')->prototype('variable')->end()->treatNullLike([])->end()->end()->end()->treatNullLike([])->end()->arrayNode('custom_values')->info('Custom values added to the metadata response.')->useAttributeAsKey('name')->prototype('variable')->end()->treatNullLike([])->end()->end();
     }
 }


385) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/MetadataEndpointSource.php:55    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['path']);
         })->thenInvalid('The route name must be set.')->end()->children()->scalarNode('path')->defaultValue('/.well-known/openid-configuration')->end()->arrayNode('custom_routes')->info('Custom routes added to the metadata response.')->useAttributeAsKey('name')->prototype('array')->children()->scalarNode('route_name')->info('Route name.')->isRequired()->end()->arrayNode('route_parameters')->info('Parameters associated to the route (if needed).')->useAttributeAsKey('name')->prototype('variable')->end()->treatNullLike([])->end()->end()->end()->treatNullLike([])->end()->arrayNode('custom_values')->info('Custom values added to the metadata response.')->useAttributeAsKey('name')->prototype('variable')->end()->treatNullLike([])->end()->end();
     }

386) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['path', 'storage_name', 'template'] as $key) {
+        foreach (array() as $key) {
             $container->setParameter($path . '.' . $key, $config[$key]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('session_management.php');
     }
     /**

387) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['path', 'storage_name', 'template'] as $key) {
             $container->setParameter($path . '.' . $key, $config[$key]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('session_management.php');

388) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:39    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'session_management';
     }
     /**
      * {@inheritdoc}
      */

389) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:53    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['path']);
+            return false === $config['enabled'] && empty($config['path']);
         })->thenInvalid('The route name must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['storage_name']);
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }

390) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:53    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['path']);
+            return true !== $config['enabled'] && empty($config['path']);
         })->thenInvalid('The route name must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['storage_name']);
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }

391) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:53    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['path']);
+            return true === $config['enabled'] || empty($config['path']);
         })->thenInvalid('The route name must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['storage_name']);
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }

392) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:59    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('The route name must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['storage_name']);
+            return false === $config['enabled'] && empty($config['storage_name']);
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }
 }


393) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:59    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('The route name must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['storage_name']);
+            return true !== $config['enabled'] && empty($config['storage_name']);
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }
 }


394) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:59    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('The route name must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['storage_name']);
+            return true === $config['enabled'] || empty($config['storage_name']);
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }
 }


395) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:64    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['template']);
+            return false === $config['enabled'] && empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }
 }


396) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:64    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['template']);
+            return true !== $config['enabled'] && empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }
 }


397) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:64    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "storage_name" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['template']);
+            return true === $config['enabled'] || empty($config['template']);
         })->thenInvalid('The option "template" must be set.')->end()->children()->scalarNode('path')->end()->scalarNode('storage_name')->defaultValue('oidc_browser_state')->end()->scalarNode('template')->info('The template of the OP iframe.')->defaultValue('@OAuth2FrameworkServerBundle/iframe/iframe.html.twig')->end()->end();
     }
 }


398) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SessionManagementEndpointSource.php:47    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['path']);
         })->thenInvalid('The route name must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['storage_name']);

399) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SignedMetadataEndpointSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.algorithm', $config['algorithm']);
         //$container->setAlias($path.'.key_set', 'jose.key_set.signed_metadata_endpoint.key_set.signature');
     }
     /**
      * {@inheritdoc}

400) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SignedMetadataEndpointSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'signature';
     }
     /**
      * {@inheritdoc}
      */

401) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SignedMetadataEndpointSource.php:50    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['algorithm']);
+            return false === $config['enabled'] && empty($config['algorithm']);
         })->thenInvalid('The parameter "algorithm" must be set.')->end()->children()->scalarNode('algorithm')->info('Signature algorithm used to sign the metadata.')->end()->end();
     }
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';

402) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SignedMetadataEndpointSource.php:50    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['algorithm']);
+            return true !== $config['enabled'] && empty($config['algorithm']);
         })->thenInvalid('The parameter "algorithm" must be set.')->end()->children()->scalarNode('algorithm')->info('Signature algorithm used to sign the metadata.')->end()->end();
     }
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';

403) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SignedMetadataEndpointSource.php:50    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['algorithm']);
+            return true === $config['enabled'] || empty($config['algorithm']);
         })->thenInvalid('The parameter "algorithm" must be set.')->end()->children()->scalarNode('algorithm')->info('Signature algorithm used to sign the metadata.')->end()->end();
     }
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';

404) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SignedMetadataEndpointSource.php:44    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['algorithm']);
         })->thenInvalid('The parameter "algorithm" must be set.')->end()->children()->scalarNode('algorithm')->info('Signature algorithm used to sign the metadata.')->end()->end();
     }

405) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SignedMetadataEndpointSource.php:68    [M] FalseValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        ConfigurationHelper::addJWSBuilder($container, 'metadata_signature', [$sourceConfig['algorithm']], false);
+        ConfigurationHelper::addJWSBuilder($container, 'metadata_signature', [$sourceConfig['algorithm']], true);
         Assertion::keyExists($bundleConfig['key_set'], 'signature', 'The signature key set must be enabled.');
         //ConfigurationHelper::addKeyset($container, 'signed_metadata_endpoint.key_set.signature', 'jwkset', ['value' => $bundleConfig['key_set']['signature']]);
     }
 }


406) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/SignedMetadataEndpointSource.php:61    [M] PublicVisibility

--- Original
+++ New
@@ @@
     }
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         ConfigurationHelper::addJWSBuilder($container, 'metadata_signature', [$sourceConfig['algorithm']], false);

407) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenEndpointSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.path', $config['path']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('token.php');
     }
     /**

408) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenEndpointSource.php:37    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'token';
     }
     /**
      * {@inheritdoc}
      */

409) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenEndpointSource.php:45    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('path')->defaultValue('/token/get')->end()->end();
     }
 }


410) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenIntrospectionEndpointSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.path', $config['path']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('introspection.php');
     }
     /**

411) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenIntrospectionEndpointSource.php:37    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'token_introspection';
     }
     /**
      * {@inheritdoc}
      */

412) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenIntrospectionEndpointSource.php:45    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('path')->defaultValue('/token/introspection')->end()->end();
     }
 }


413) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenRevocationEndpointSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('revocation.php');
     }
     /**

414) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenRevocationEndpointSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/endpoint'));
         $loader->load('revocation.php');

415) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenRevocationEndpointSource.php:39    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'token_revocation';
     }
     /**
      * {@inheritdoc}
      */

416) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Endpoint/TokenRevocationEndpointSource.php:47    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('path')->defaultValue('/token/revocation')->end()->booleanNode('allow_callback')->info('If true, GET request with "callback" parameter are allowed.')->defaultFalse()->end()->end();
     }
 }


417) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/FirewallSource.php:25    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'firewall';
     }
     /**
      * {@inheritdoc}
      */

418) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/FirewallSource.php:33    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../Resources/config'));
         $loader->load('security.php');
     }
 }


419) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['min_length', 'max_length', 'lifetime', 'enforce_pkce'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $container->setAlias($path . '.event_store', $config['event_store']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('authorization_code.php');
     }

420) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['min_length', 'max_length', 'lifetime', 'enforce_pkce'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $container->setAlias($path . '.event_store', $config['event_store']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));

421) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:41    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'authorization_code';
     }
     /**
      * {@inheritdoc}
      */

422) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:55    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return false === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


423) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:55    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return true !== $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


424) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:55    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return true === $config['enabled'] || empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


425) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:61    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return false === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


426) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:61    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true !== $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


427) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:61    [M] LessThan

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] && $config['max_length'] <= $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


428) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:61    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] && $config['max_length'] >= $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


429) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:61    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] || $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


430) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:66    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


431) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:67    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(0)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


432) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:68    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(30)->min(0)->end()->scalarNode('event_store')->defaultNull()->end()->booleanNode('enforce_pkce')->defaultFalse()->end()->end();
     }
 }


433) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/AuthorizationCodeSource.php:49    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];

434) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ClientCredentialsSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.issue_refresh_token', $config['issue_refresh_token']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('client_credentials.php');
     }
     /**

435) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ClientCredentialsSource.php:38    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'client_credentials';
     }
     /**
      * {@inheritdoc}
      */

436) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ClientCredentialsSource.php:46    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->booleanNode('issue_refresh_token')->info('If enabled, a refresh token will be issued with an access token.')->defaultFalse()->end()->end();
     }
 }


437) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/GrantSource.php:40    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('grant.php');
     }
     /**
      * {@inheritdoc}

438) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/GrantSource.php:49    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'grant';
     }
 }


439) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ImplicitSource.php:26    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('implicit.php');
     }
     /**
      * {@inheritdoc}

440) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ImplicitSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'implicit';
     }
 }


441) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerEncryptionSource.php:28    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['key_encryption_algorithms', 'content_encryption_algorithms', 'required'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.jwt_bearer.key_set.encryption');
     }
     /**
      * {@inheritdoc}

442) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerEncryptionSource.php:26    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['key_encryption_algorithms', 'content_encryption_algorithms', 'required'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.jwt_bearer.key_set.encryption');
     }

443) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerEncryptionSource.php:37    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'encryption';
     }
     protected function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);

444) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerEncryptionSource.php:42    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
     }
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->booleanNode('required')->info('If set to true, all ID Token sent to the server must be encrypted.')->defaultFalse()->end()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

445) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerEncryptionSource.php:69    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         Assertion::keyExists($bundleConfig['key_set'], 'encryption', 'The encryption key set must be enabled.');
         //ConfigurationHelper::addKeyset($container, 'jwt_bearer.key_set.encryption', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
     }
 }

446) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:39    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('jwt_bearer.php');
     }
     /**

447) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:37    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('jwt_bearer.php');

448) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:50    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'jwt_bearer';
     }
     protected function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);

449) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:61    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return false === $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('The option "signature_algorithms" must contain at least one signature algorithm.')->end()->children()->booleanNode('issue_refresh_token')->info('If true, a refresh token will be issued with the access token (the refresh token grant type must be enabled).')->end()->arrayNode('signature_algorithms')->info('Signature algorithms supported by this grant type.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Checkers will verify the JWT claims.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['exp', 'iat', 'nbf'])->end()->arrayNode('header_checkers')->info('Checkers will verify the JWT headers.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['crit'])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

450) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:61    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return true !== $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('The option "signature_algorithms" must contain at least one signature algorithm.')->end()->children()->booleanNode('issue_refresh_token')->info('If true, a refresh token will be issued with the access token (the refresh token grant type must be enabled).')->end()->arrayNode('signature_algorithms')->info('Signature algorithms supported by this grant type.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Checkers will verify the JWT claims.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['exp', 'iat', 'nbf'])->end()->arrayNode('header_checkers')->info('Checkers will verify the JWT headers.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['crit'])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

451) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:61    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return true === $config['enabled'] || empty($config['signature_algorithms']);
         })->thenInvalid('The option "signature_algorithms" must contain at least one signature algorithm.')->end()->children()->booleanNode('issue_refresh_token')->info('If true, a refresh token will be issued with the access token (the refresh token grant type must be enabled).')->end()->arrayNode('signature_algorithms')->info('Signature algorithms supported by this grant type.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Checkers will verify the JWT claims.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['exp', 'iat', 'nbf'])->end()->arrayNode('header_checkers')->info('Checkers will verify the JWT headers.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['crit'])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

452) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:55    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
     }
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('The option "signature_algorithms" must contain at least one signature algorithm.')->end()->children()->booleanNode('issue_refresh_token')->info('If true, a refresh token will be issued with the access token (the refresh token grant type must be enabled).')->end()->arrayNode('signature_algorithms')->info('Signature algorithms supported by this grant type.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Checkers will verify the JWT claims.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['exp', 'iat', 'nbf'])->end()->arrayNode('header_checkers')->info('Checkers will verify the JWT headers.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['crit'])->end()->end();
     }

453) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:100    [M] TrueValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (false === $sourceConfig['enabled']) {
             $this->updateJoseBundleConfigurationForVerifier($container, $sourceConfig);
             $this->updateJoseBundleConfigurationForDecrypter($container, $sourceConfig);
         }
     }
     /**
      * @param ContainerBuilder $container

454) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:100    [M] Identical

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (true !== $sourceConfig['enabled']) {
             $this->updateJoseBundleConfigurationForVerifier($container, $sourceConfig);
             $this->updateJoseBundleConfigurationForDecrypter($container, $sourceConfig);
         }
     }
     /**
      * @param ContainerBuilder $container

455) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:93    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         if (true === $sourceConfig['enabled']) {

456) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:112    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
+        ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], true);
         ConfigurationHelper::addClaimChecker($container, $this->name(), [], false);
     }
     /**
      * @param ContainerBuilder $container
      * @param array            $sourceConfig
      */

457) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:113    [M] FalseValue

--- Original
+++ New
@@ @@
         ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
-        ConfigurationHelper::addClaimChecker($container, $this->name(), [], false);
+        ConfigurationHelper::addClaimChecker($container, $this->name(), [], true);
     }
     /**
      * @param ContainerBuilder $container
      * @param array            $sourceConfig
      */
     private function updateJoseBundleConfigurationForDecrypter(ContainerBuilder $container, array $sourceConfig)

458) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:122    [M] TrueValue

--- Original
+++ New
@@ @@
     {
-        if (true === $sourceConfig['encryption']['enabled']) {
+        if (false === $sourceConfig['encryption']['enabled']) {
             ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
         }
     }
 }


459) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:122    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (true === $sourceConfig['encryption']['enabled']) {
+        if (true !== $sourceConfig['encryption']['enabled']) {
             ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
         }
     }
 }


460) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/JwtBearerSource.php:123    [M] FalseValue

--- Original
+++ New
@@ @@
         if (true === $sourceConfig['encryption']['enabled']) {
-            ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
+            ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], true);
         }
     }
 }


461) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/NoneSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('none.php');
     }
     /**
      * {@inheritdoc}

462) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/NoneSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'none';
     }
     /**
      * {@inheritdoc}
      */

463) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/NoneSource.php:50    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'];
+            return false === $config['enabled'];
         })->thenInvalid('The grant type "none" is not fully implemented. Please disable it.')->end();
     }
 }


464) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/NoneSource.php:50    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'];
+            return true !== $config['enabled'];
         })->thenInvalid('The grant type "none" is not fully implemented. Please disable it.')->end();
     }
 }


465) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/NoneSource.php:44    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'];
         })->thenInvalid('The grant type "none" is not fully implemented. Please disable it.')->end();
     }

466) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['min_length', 'max_length', 'lifetime'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $container->setAlias($path . '.event_store', $config['event_store']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('refresh_token.php');
     }

467) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['min_length', 'max_length', 'lifetime'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $container->setAlias($path . '.event_store', $config['event_store']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));

468) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:41    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'refresh_token';
     }
     /**
      * {@inheritdoc}
      */

469) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:55    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return false === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


470) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:55    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return true !== $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


471) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:55    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['event_store']);
+            return true === $config['enabled'] || empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


472) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:61    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return false === $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


473) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:61    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true !== $config['enabled'] && $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


474) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:61    [M] LessThan

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] && $config['max_length'] <= $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


475) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:61    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] && $config['max_length'] >= $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


476) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:61    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
+            return true === $config['enabled'] || $config['max_length'] < $config['min_length'];
         })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


477) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:66    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


478) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:67    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(0)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


479) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:68    [M] Multiplication

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 / 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


480) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:68    [M] Multiplication

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 / 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


481) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:68    [M] Multiplication

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 / 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


482) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:68    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];
-        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(1)->end()->scalarNode('event_store')->defaultNull()->end()->end();
+        })->thenInvalid('The option "max_length" must be greater than "min_length".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(1)->end()->integerNode('lifetime')->defaultValue(60 * 60 * 24 * 7)->min(0)->end()->scalarNode('event_store')->defaultNull()->end()->end();
     }
 }


483) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/RefreshTokenSource.php:49    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['event_store']);
         })->thenInvalid('The option "event_store" must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && $config['max_length'] < $config['min_length'];

484) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ResourceOwnerPasswordCredentialSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('resource_owner_password_credential.php');
     }
     /**

485) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ResourceOwnerPasswordCredentialSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/grant'));
         $loader->load('resource_owner_password_credential.php');

486) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ResourceOwnerPasswordCredentialSource.php:40    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'resource_owner_password_credential';
     }
     /**
      * {@inheritdoc}
      */

487) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Grant/ResourceOwnerPasswordCredentialSource.php:48    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->booleanNode('issue_refresh_token')->info('If enabled, a refresh token will be issued with an access token.')->defaultFalse()->end()->booleanNode('issue_refresh_token_for_public_clients')->info('If enabled, a refresh token will be issued with an access token when the client is public. This option is useless if the option "issue_refresh_token" is set to false.')->defaultFalse()->end()->end();
     }
 }


488) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/HttpSource.php:24    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'http';
     }
     /**
      * {@inheritdoc}
      */

489) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/HttpSource.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setAlias($path . '.' . $k, $v);
         }
     }
     /**
      * {@inheritdoc}
      */

490) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/HttpSource.php:32    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setAlias($path . '.' . $k, $v);
         }
     }
     /**

491) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/HttpSource.php:42    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->isRequired();
         $node->children()->scalarNode('client')->isRequired()->cannotBeEmpty()->end()->scalarNode('uri_factory')->isRequired()->cannotBeEmpty()->end()->end();
     }
 }

492) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/KeySet.php:25    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'key_set';
     }
     /**
      * {@inheritdoc}
      */

493) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/KeySet.php:33    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->addDefaultsIfNotSet()->children()->scalarNode('signature')->defaultNull()->end()->scalarNode('encryption')->defaultNull()->end()->end();
     }
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {

494) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/KeySet.php:48    [M] NotIdentical

--- Original
+++ New
@@ @@
         parent::prepend($bundleConfig, $path, $container);
-        if (null !== $bundleConfig['key_set']['signature']) {
+        if (null === $bundleConfig['key_set']['signature']) {
             ConfigurationHelper::addKeyset($container, 'oauth2_server.key_set.signature', 'jwkset', ['value' => $bundleConfig['key_set']['signature']]);
         }
         if (null !== $bundleConfig['key_set']['encryption']) {
             ConfigurationHelper::addKeyset($container, 'oauth2_server.key_set.encryption', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
         }
     }

495) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/KeySet.php:51    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $bundleConfig['key_set']['encryption']) {
+        if (null === $bundleConfig['key_set']['encryption']) {
             ConfigurationHelper::addKeyset($container, 'oauth2_server.key_set.encryption', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
         }
     }
 }


496) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/KeySet.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
     }
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         if (null !== $bundleConfig['key_set']['signature']) {
             ConfigurationHelper::addKeyset($container, 'oauth2_server.key_set.signature', 'jwkset', ['value' => $bundleConfig['key_set']['signature']]);
         }
         if (null !== $bundleConfig['key_set']['encryption']) {

497) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/AuthorizationEndpointIdTokenHintSource.php:26    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/openid_connect'));
         $loader->load('id_token_hint.php');
     }
     /**
      * {@inheritdoc}

498) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/AuthorizationEndpointIdTokenHintSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'id_token_hint';
     }
 }


499) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['key_encryption_algorithms', 'content_encryption_algorithms'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.id_token.key_set.encryption');
     }
     /**
      * {@inheritdoc}

500) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['key_encryption_algorithms', 'content_encryption_algorithms'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.id_token.key_set.encryption');
     }

501) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:45    [M] TrueValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (false === $sourceConfig['enabled']) {
             ConfigurationHelper::addJWEBuilder($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], false);
             ConfigurationHelper::addJWELoader($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
             Assertion::keyExists($bundleConfig['key_set'], 'encryption', 'The encryption key set must be enabled.');
             //ConfigurationHelper::addKeyset($container, 'id_token.key_set.encryption', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
         }
     }

502) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:45    [M] Identical

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (true !== $sourceConfig['enabled']) {
             ConfigurationHelper::addJWEBuilder($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], false);
             ConfigurationHelper::addJWELoader($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
             Assertion::keyExists($bundleConfig['key_set'], 'encryption', 'The encryption key set must be enabled.');
             //ConfigurationHelper::addKeyset($container, 'id_token.key_set.encryption', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
         }
     }

503) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:46    [M] FalseValue

--- Original
+++ New
@@ @@
         if (true === $sourceConfig['enabled']) {
-            ConfigurationHelper::addJWEBuilder($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], false);
+            ConfigurationHelper::addJWEBuilder($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], true);
             ConfigurationHelper::addJWELoader($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
             Assertion::keyExists($bundleConfig['key_set'], 'encryption', 'The encryption key set must be enabled.');
             //ConfigurationHelper::addKeyset($container, 'id_token.key_set.encryption', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
         }
     }
     /**

504) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:47    [M] FalseValue

--- Original
+++ New
@@ @@
             ConfigurationHelper::addJWEBuilder($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], false);
-            ConfigurationHelper::addJWELoader($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
+            ConfigurationHelper::addJWELoader($container, 'id_token', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], true);
             Assertion::keyExists($bundleConfig['key_set'], 'encryption', 'The encryption key set must be enabled.');
             //ConfigurationHelper::addKeyset($container, 'id_token.key_set.encryption', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
         }
     }
     /**
      * {@inheritdoc}

505) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         if (true === $sourceConfig['enabled']) {

506) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:57    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'encryption';
     }
     protected function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);

507) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenEncryptionSource.php:62    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
     }
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
 }


508) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenResponseTypeSource.php:26    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/openid_connect'));
         $loader->load('id_token_response_type.php');
     }
     /**
      * {@inheritdoc}

509) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenResponseTypeSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'response_type';
     }
 }


510) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:44    [M] FalseValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        ConfigurationHelper::addJWSBuilder($container, $this->name(), $sourceConfig['signature_algorithms'], false);
+        ConfigurationHelper::addJWSBuilder($container, $this->name(), $sourceConfig['signature_algorithms'], true);
         ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
         Assertion::keyExists($bundleConfig['key_set'], 'signature', 'The signature key set must be enabled.');
         //ConfigurationHelper::addKeyset($container, 'id_token.key_set.signature', 'jwkset', ['value' => $bundleConfig['key_set']['signature']]);
     }
     /**
      * {@inheritdoc}

511) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:45    [M] FalseValue

--- Original
+++ New
@@ @@
         ConfigurationHelper::addJWSBuilder($container, $this->name(), $sourceConfig['signature_algorithms'], false);
-        ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
+        ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], true);
         Assertion::keyExists($bundleConfig['key_set'], 'signature', 'The signature key set must be enabled.');
         //ConfigurationHelper::addKeyset($container, 'id_token.key_set.signature', 'jwkset', ['value' => $bundleConfig['key_set']['signature']]);
     }
     /**
      * {@inheritdoc}
      */

512) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         ConfigurationHelper::addJWSBuilder($container, $this->name(), $sourceConfig['signature_algorithms'], false);

513) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:56    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['lifetime', 'default_signature_algorithm', 'signature_algorithms', 'claim_checkers', 'header_checkers'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.id_token.key_set.signature');
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/openid_connect'));
         $loader->load('userinfo_scope_support.php');
     }

514) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:54    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['lifetime', 'default_signature_algorithm', 'signature_algorithms', 'claim_checkers', 'header_checkers'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.id_token.key_set.signature');
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/openid_connect'));

515) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:68    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'id_token';
     }
     protected function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);

516) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:91    [M] LogicalNot

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "signature_algorithm" must contain at least one signature algorithm.')->end()->validate()->ifTrue(function ($config) {
-            return !in_array($config['default_signature_algorithm'], $config['signature_algorithms']);
+            return in_array($config['default_signature_algorithm'], $config['signature_algorithms']);
         })->thenInvalid('The default signature algorithm must be in the supported signature algorithms.')->end()->children()->scalarNode('default_signature_algorithm')->info('Signature algorithm used if the client has not defined a preferred one. Recommended value is "RS256".')->end()->arrayNode('signature_algorithms')->info('Signature algorithm used to sign the ID Tokens.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Checkers will verify the JWT claims.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['exp', 'iat', 'nbf'])->end()->arrayNode('header_checkers')->info('Checkers will verify the JWT headers.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['crit'])->end()->integerNode('lifetime')->info('Lifetime of the ID Tokens (in seconds). If an access token is issued with the ID Token, the lifetime of the access token is used instead of this value.')->defaultValue(3600)->min(1)->end()->end();
     }
 }


517) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:120    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return !in_array($config['default_signature_algorithm'], $config['signature_algorithms']);
-        })->thenInvalid('The default signature algorithm must be in the supported signature algorithms.')->end()->children()->scalarNode('default_signature_algorithm')->info('Signature algorithm used if the client has not defined a preferred one. Recommended value is "RS256".')->end()->arrayNode('signature_algorithms')->info('Signature algorithm used to sign the ID Tokens.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Checkers will verify the JWT claims.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['exp', 'iat', 'nbf'])->end()->arrayNode('header_checkers')->info('Checkers will verify the JWT headers.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['crit'])->end()->integerNode('lifetime')->info('Lifetime of the ID Tokens (in seconds). If an access token is issued with the ID Token, the lifetime of the access token is used instead of this value.')->defaultValue(3600)->min(1)->end()->end();
+        })->thenInvalid('The default signature algorithm must be in the supported signature algorithms.')->end()->children()->scalarNode('default_signature_algorithm')->info('Signature algorithm used if the client has not defined a preferred one. Recommended value is "RS256".')->end()->arrayNode('signature_algorithms')->info('Signature algorithm used to sign the ID Tokens.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Checkers will verify the JWT claims.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['exp', 'iat', 'nbf'])->end()->arrayNode('header_checkers')->info('Checkers will verify the JWT headers.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike(['crit'])->end()->integerNode('lifetime')->info('Lifetime of the ID Tokens (in seconds). If an access token is issued with the ID Token, the lifetime of the access token is used instead of this value.')->defaultValue(3600)->min(0)->end()->end();
     }
 }


518) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/IdTokenSource.php:73    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
     }
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return empty($config['default_signature_algorithm']);
         })->thenInvalid('The option "default_signature_algorithm" must be set.')->end()->validate()->ifTrue(function ($config) {
             return empty($config['signature_algorithms']);

519) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/OpenIdConnectSource.php:37    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'openid_connect';
     }
     /**
      * {@inheritdoc}
      */

520) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/OpenIdConnectSource.php:45    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/openid_connect'));
         $loader->load('openid_connect.php');
     }
 }


521) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/PairwiseSubjectSource.php:25    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setAlias($path . '.service', $config['service']);
         $container->setParameter($path . '.is_default', $config['is_default']);
     }
     /**
      * {@inheritdoc}

522) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/PairwiseSubjectSource.php:34    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'pairwise_subject';
     }
     /**
      * {@inheritdoc}
      */

523) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/PairwiseSubjectSource.php:48    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['service']);
+            return false === $config['enabled'] && empty($config['service']);
         })->thenInvalid('The pairwise subject service must be set.')->end()->children()->scalarNode('service')->end()->booleanNode('is_default')->defaultTrue()->end()->end();
     }
 }


524) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/PairwiseSubjectSource.php:48    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['service']);
+            return true !== $config['enabled'] && empty($config['service']);
         })->thenInvalid('The pairwise subject service must be set.')->end()->children()->scalarNode('service')->end()->booleanNode('is_default')->defaultTrue()->end()->end();
     }
 }


525) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/PairwiseSubjectSource.php:48    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['service']);
+            return true === $config['enabled'] || empty($config['service']);
         })->thenInvalid('The pairwise subject service must be set.')->end()->children()->scalarNode('service')->end()->booleanNode('is_default')->defaultTrue()->end()->end();
     }
 }


526) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/PairwiseSubjectSource.php:42    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['service']);
         })->thenInvalid('The pairwise subject service must be set.')->end()->children()->scalarNode('service')->end()->booleanNode('is_default')->defaultTrue()->end()->end();
     }

527) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'encryption';
     }
     /**
      * {@inheritdoc}
      */

528) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.key_encryption_algorithms', $config['key_encryption_algorithms']);
         $container->setParameter($path . '.content_encryption_algorithms', $config['content_encryption_algorithms']);
     }
     /**
      * {@inheritdoc}

529) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:50    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_encryption_algorithms']);
+            return false === $config['enabled'] && empty($config['key_encryption_algorithms']);
         })->thenInvalid('You must set at least one key encryption algorithm.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('You must set at least one content encryption algorithm.')->end()->children()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

530) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:50    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_encryption_algorithms']);
+            return true !== $config['enabled'] && empty($config['key_encryption_algorithms']);
         })->thenInvalid('You must set at least one key encryption algorithm.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('You must set at least one content encryption algorithm.')->end()->children()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

531) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:50    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_encryption_algorithms']);
+            return true === $config['enabled'] || empty($config['key_encryption_algorithms']);
         })->thenInvalid('You must set at least one key encryption algorithm.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('You must set at least one content encryption algorithm.')->end()->children()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

532) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:56    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('You must set at least one key encryption algorithm.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
+            return false === $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('You must set at least one content encryption algorithm.')->end()->children()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

533) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:56    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('You must set at least one key encryption algorithm.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
+            return true !== $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('You must set at least one content encryption algorithm.')->end()->children()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

534) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:56    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('You must set at least one key encryption algorithm.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
+            return true === $config['enabled'] || empty($config['content_encryption_algorithms']);
         })->thenInvalid('You must set at least one content encryption algorithm.')->end()->children()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

535) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:44    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['key_encryption_algorithms']);
         })->thenInvalid('You must set at least one key encryption algorithm.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['content_encryption_algorithms']);

536) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:86    [M] FalseValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        ConfigurationHelper::addJWEBuilder($container, 'oauth2_server.userinfo', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], false);
+        ConfigurationHelper::addJWEBuilder($container, 'oauth2_server.userinfo', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], true);
     }
 }


537) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointEncryptionSource.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         ConfigurationHelper::addJWEBuilder($container, 'oauth2_server.userinfo', $sourceConfig['key_encryption_algorithms'], $sourceConfig['content_encryption_algorithms'], ['DEF'], false);

538) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSignatureSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'signature';
     }
     /**
      * {@inheritdoc}
      */

539) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSignatureSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.signature_algorithms', $config['signature_algorithms']);
     }
     /**
      * {@inheritdoc}
      */

540) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSignatureSource.php:49    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return false === $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('You must set at least one signature algorithm.')->end()->children()->arrayNode('signature_algorithms')->info('Signature algorithm used to sign the user information.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

541) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSignatureSource.php:49    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return true !== $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('You must set at least one signature algorithm.')->end()->children()->arrayNode('signature_algorithms')->info('Signature algorithm used to sign the user information.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

542) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSignatureSource.php:49    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return true === $config['enabled'] || empty($config['signature_algorithms']);
         })->thenInvalid('You must set at least one signature algorithm.')->end()->children()->arrayNode('signature_algorithms')->info('Signature algorithm used to sign the user information.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

543) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSignatureSource.php:43    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('You must set at least one signature algorithm.')->end()->children()->arrayNode('signature_algorithms')->info('Signature algorithm used to sign the user information.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }

544) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSignatureSource.php:74    [M] FalseValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        ConfigurationHelper::addJWSBuilder($container, 'oauth2_server.userinfo', $sourceConfig['signature_algorithms'], false);
+        ConfigurationHelper::addJWSBuilder($container, 'oauth2_server.userinfo', $sourceConfig['signature_algorithms'], true);
     }
 }


545) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSignatureSource.php:66    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         Assertion::keyExists($bundleConfig['key_set'], 'signature', 'The signature key set must be enabled.');
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);

546) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.path', $config['path']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/openid_connect'));
         $loader->load('userinfo_endpoint.php');
     }
     /**

547) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSource.php:46    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'userinfo_endpoint';
     }
     /**
      * {@inheritdoc}
      */

548) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/OpenIdConnect/UserinfoEndpointSource.php:54    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('path')->defaultValue('/userinfo')->end()->end();
     }
 }


549) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ResourceServerRepositorySource.php:24    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'resource_server';
     }
     /**
      * {@inheritdoc}
      */

550) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ResourceServerRepositorySource.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['repository'] as $k) {
+        foreach (array() as $k) {
             $container->setAlias($path . '.' . $k, $config[$k]);
         }
     }
     /**
      * {@inheritdoc}
      */

551) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ResourceServerRepositorySource.php:32    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['repository'] as $k) {
             $container->setAlias($path . '.' . $k, $config[$k]);
         }
     }
     /**

552) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ResourceServerRepositorySource.php:48    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['repository']);
+            return false === $config['enabled'] && empty($config['repository']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('repository')->info('The resource server repository.')->isRequired()->end()->end();
     }
 }


553) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ResourceServerRepositorySource.php:48    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['repository']);
+            return true !== $config['enabled'] && empty($config['repository']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('repository')->info('The resource server repository.')->isRequired()->end()->end();
     }
 }


554) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ResourceServerRepositorySource.php:48    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['repository']);
+            return true === $config['enabled'] || empty($config['repository']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('repository')->info('The resource server repository.')->isRequired()->end()->end();
     }
 }


555) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ResourceServerRepositorySource.php:42    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['repository']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('repository')->info('The resource server repository.')->isRequired()->end()->end();
     }

556) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicyDefaultSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'default';
     }
     /**
      * {@inheritdoc}
      */

557) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicyDefaultSource.php:37    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['scope'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/scope'));
         $loader->load('policy_default.php');
     }
     /**

558) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicyDefaultSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['scope'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/scope'));
         $loader->load('policy_default.php');

559) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicyDefaultSource.php:47    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->arrayNode('scope')->info('Scope added by default.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
 }


560) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicyErrorSource.php:26    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'error';
     }
     /**
      * {@inheritdoc}
      */

561) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicyErrorSource.php:34    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/scope'));
         $loader->load('policy_error.php');
     }
 }


562) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicySource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'policy';
     }
     /**
      * {@inheritdoc}
      */

563) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicySource.php:46    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['by_default'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/scope'));
         $loader->load('policy.php');
     }
     /**

564) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicySource.php:44    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['by_default'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/scope'));
         $loader->load('policy.php');

565) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicySource.php:62    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['by_default']);
+            return false === $config['enabled'] && empty($config['by_default']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('by_default')->info('Default scope policy.')->defaultValue('none')->end()->end();
     }
 }


566) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicySource.php:62    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['by_default']);
+            return true !== $config['enabled'] && empty($config['by_default']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('by_default')->info('Default scope policy.')->defaultValue('none')->end()->end();
     }
 }


567) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicySource.php:62    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['by_default']);
+            return true === $config['enabled'] || empty($config['by_default']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('by_default')->info('Default scope policy.')->defaultValue('none')->end()->end();
     }
 }


568) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopePolicySource.php:56    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['by_default']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('by_default')->info('Default scope policy.')->defaultValue('none')->end()->end();
     }

569) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopeSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'scope';
     }
     /**
      * {@inheritdoc}
      */

570) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopeSource.php:44    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setAlias(ScopeRepositoryInterface::class, $config['repository']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/scope'));
         $loader->load('scope.php');
     }
     /**

571) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopeSource.php:60    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['repository']);
+            return false === $config['enabled'] && empty($config['repository']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('repository')->info('Scope repository.')->defaultNull()->end()->end();
     }
 }


572) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopeSource.php:60    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['repository']);
+            return true !== $config['enabled'] && empty($config['repository']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('repository')->info('Scope repository.')->defaultNull()->end()->end();
     }
 }


573) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopeSource.php:60    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['repository']);
+            return true === $config['enabled'] || empty($config['repository']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('repository')->info('Scope repository.')->defaultNull()->end()->end();
     }
 }


574) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/Scope/ScopeSource.php:54    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['repository']);
         })->thenInvalid('The option "repository" must be set.')->end()->children()->scalarNode('repository')->info('Scope repository.')->defaultNull()->end()->end();
     }

575) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ServerNameSource.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function load(string $path, ContainerBuilder $container, array $config)
+    protected function load(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.server_uri', $config['server_uri']);
     }
     /**
      * {@inheritdoc}
      */

576) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ServerNameSource.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addConfiguration(NodeDefinition $node)
+    protected function addConfiguration(NodeDefinition $node)
     {
         $node->children()->scalarNode('server_uri')->info('The Uri of this server.')->isRequired()->end();
     }
     /**
      * {@inheritdoc}
      */

577) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/ServerNameSource.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         // Nothing to do
     }
 }


578) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:27    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['required', 'key_encryption_algorithms', 'content_encryption_algorithms'] as $k) {
+        foreach (array() as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.key_set');
     }
     /**
      * {@inheritdoc}

579) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:25    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['required', 'key_encryption_algorithms', 'content_encryption_algorithms'] as $k) {
             $container->setParameter($path . '.' . $k, $config[$k]);
         }
         //$container->setAlias($path.'.key_set', 'jose.key_set.oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.key_set');
     }

580) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'encryption';
     }
     /**
      * {@inheritdoc}
      */

581) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:50    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_encryption_algorithms']);
+            return false === $config['enabled'] && empty($config['key_encryption_algorithms']);
         })->thenInvalid('At least one key encryption algorithm must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('At least one content encryption algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

582) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:50    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_encryption_algorithms']);
+            return true !== $config['enabled'] && empty($config['key_encryption_algorithms']);
         })->thenInvalid('At least one key encryption algorithm must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('At least one content encryption algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

583) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:50    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['key_encryption_algorithms']);
+            return true === $config['enabled'] || empty($config['key_encryption_algorithms']);
         })->thenInvalid('At least one key encryption algorithm must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('At least one content encryption algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}

584) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:56    [M] TrueValue

--- Original
+++ New
@@ @@
         })->thenInvalid('At least one key encryption algorithm must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
+            return false === $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('At least one content encryption algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

585) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:56    [M] Identical

--- Original
+++ New
@@ @@
         })->thenInvalid('At least one key encryption algorithm must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
+            return true !== $config['enabled'] && empty($config['content_encryption_algorithms']);
         })->thenInvalid('At least one content encryption algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

586) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:56    [M] LogicalAnd

--- Original
+++ New
@@ @@
         })->thenInvalid('At least one key encryption algorithm must be set.')->end()->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['content_encryption_algorithms']);
+            return true === $config['enabled'] || empty($config['content_encryption_algorithms']);
         })->thenInvalid('At least one content encryption algorithm must be set.')->end()->children()->booleanNode('required')->defaultFalse()->end()->arrayNode('key_encryption_algorithms')->info('Supported key encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('content_encryption_algorithms')->info('Supported content encryption algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

587) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:44    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['key_encryption_algorithms']);
         })->thenInvalid('At least one key encryption algorithm must be set.')->end()->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['content_encryption_algorithms']);

588) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodEncryptionSupportSource.php:80    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         Assertion::keyExists($bundleConfig['key_set'], 'encryption', 'The encryption key set must be enabled.');
         //ConfigurationHelper::addKeyset($container, 'oauth2_server.token_endpoint_auth_method.client_assertion_jwt.encryption.key_set', 'jwkset', ['value' => $bundleConfig['key_set']['encryption']]);
     }
 }

589) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:37    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.signature_algorithms', $config['signature_algorithms']);
         $container->setParameter($path . '.claim_checkers', $config['claim_checkers']);
         $container->setParameter($path . '.header_checkers', $config['header_checkers']);
         $container->setParameter($path . '.secret_lifetime', $config['secret_lifetime']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_endpoint_auth_method'));

590) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:51    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'client_assertion_jwt';
     }
     /**
      * {@inheritdoc}
      */

591) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:65    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return false === $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

592) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:65    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return true !== $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

593) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:65    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['signature_algorithms']);
+            return true === $config['enabled'] || empty($config['signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)

594) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:70    [M] Multiplication

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && empty($config['signature_algorithms']);
-        })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
+        })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 / 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {

595) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:70    [M] Multiplication

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && empty($config['signature_algorithms']);
-        })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
+        })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 / 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {

596) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:70    [M] Multiplication

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && empty($config['signature_algorithms']);
-        })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
+        })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 / 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {

597) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:70    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return true === $config['enabled'] && empty($config['signature_algorithms']);
-        })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
+        })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(1)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }
     /**
      * {@inheritdoc}
      */
     public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {

598) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:59    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['signature_algorithms']);
         })->thenInvalid('At least one signature algorithm must be set.')->end()->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->arrayNode('signature_algorithms')->info('Supported signature algorithms.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('claim_checkers')->info('Claim checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->arrayNode('header_checkers')->info('Header checkers for incoming assertions.')->useAttributeAsKey('name')->prototype('scalar')->end()->treatNullLike([])->end()->end();
     }

599) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:101    [M] TrueValue

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (false === $sourceConfig['enabled']) {
             $this->updateJoseBundleConfigurationForVerifier($container, $sourceConfig);
             $this->updateJoseBundleConfigurationForDecrypter($container, $sourceConfig);
         }
     }
     /**
      * @param ContainerBuilder $container

600) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:101    [M] Identical

--- Original
+++ New
@@ @@
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
-        if (true === $sourceConfig['enabled']) {
+        if (true !== $sourceConfig['enabled']) {
             $this->updateJoseBundleConfigurationForVerifier($container, $sourceConfig);
             $this->updateJoseBundleConfigurationForDecrypter($container, $sourceConfig);
         }
     }
     /**
      * @param ContainerBuilder $container

601) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:95    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
+    protected function prepend(array $bundleConfig, string $path, ContainerBuilder $container)
     {
         parent::prepend($bundleConfig, $path, $container);
         $currentPath = $path . '[' . $this->name() . ']';
         $accessor = PropertyAccess::createPropertyAccessor();
         $sourceConfig = $accessor->getValue($bundleConfig, $currentPath);
         if (true === $sourceConfig['enabled']) {

602) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:113    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
+        ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], true);
         ConfigurationHelper::addClaimChecker($container, $this->name(), [], false);
     }
     /**
      * @param ContainerBuilder $container
      * @param array            $sourceConfig
      */

603) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:114    [M] FalseValue

--- Original
+++ New
@@ @@
         ConfigurationHelper::addJWSLoader($container, $this->name(), $sourceConfig['signature_algorithms'], [], ['jws_compact'], false);
-        ConfigurationHelper::addClaimChecker($container, $this->name(), [], false);
+        ConfigurationHelper::addClaimChecker($container, $this->name(), [], true);
     }
     /**
      * @param ContainerBuilder $container
      * @param array            $sourceConfig
      */
     private function updateJoseBundleConfigurationForDecrypter(ContainerBuilder $container, array $sourceConfig)

604) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:123    [M] TrueValue

--- Original
+++ New
@@ @@
     {
-        if (true === $sourceConfig['encryption']['enabled']) {
+        if (false === $sourceConfig['encryption']['enabled']) {
             ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
         }
     }
 }


605) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:123    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (true === $sourceConfig['encryption']['enabled']) {
+        if (true !== $sourceConfig['encryption']['enabled']) {
             ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
         }
     }
 }


606) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientAssertionJwtTokenEndpointAuthMethodSource.php:124    [M] FalseValue

--- Original
+++ New
@@ @@
         if (true === $sourceConfig['encryption']['enabled']) {
-            ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], false);
+            ConfigurationHelper::addJWELoader($container, $this->name(), $sourceConfig['encryption']['key_encryption_algorithms'], $sourceConfig['encryption']['content_encryption_algorithms'], ['DEF'], [], ['jwe_compact'], true);
         }
     }
 }


607) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretBasicTokenEndpointAuthMethodSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.realm', $config['realm']);
         $container->setParameter($path . '.secret_lifetime', $config['secret_lifetime']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_endpoint_auth_method'));
         $loader->load('client_secret_basic.php');
     }

608) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretBasicTokenEndpointAuthMethodSource.php:39    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'client_secret_basic';
     }
     /**
      * {@inheritdoc}
      */

609) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretBasicTokenEndpointAuthMethodSource.php:53    [M] Multiplication

--- Original
+++ New
@@ @@
         parent::continueConfiguration($node);
-        $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
+        $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 / 60 * 24 * 14)->min(0)->end()->end();
     }
 }


610) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretBasicTokenEndpointAuthMethodSource.php:53    [M] Multiplication

--- Original
+++ New
@@ @@
         parent::continueConfiguration($node);
-        $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
+        $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 * 60 / 24 * 14)->min(0)->end()->end();
     }
 }


611) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretBasicTokenEndpointAuthMethodSource.php:53    [M] Multiplication

--- Original
+++ New
@@ @@
         parent::continueConfiguration($node);
-        $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
+        $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 / 14)->min(0)->end()->end();
     }
 }


612) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretBasicTokenEndpointAuthMethodSource.php:53    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         parent::continueConfiguration($node);
-        $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
+        $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(1)->end()->end();
     }
 }


613) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretBasicTokenEndpointAuthMethodSource.php:47    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('realm')->isRequired()->end()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
     }
 }


614) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretPostTokenEndpointAuthMethodSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $container->setParameter($path . '.secret_lifetime', $config['secret_lifetime']);
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_endpoint_auth_method'));
         $loader->load('client_secret_post.php');
     }
     /**

615) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretPostTokenEndpointAuthMethodSource.php:38    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'client_secret_post';
     }
     /**
      * {@inheritdoc}
      */

616) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretPostTokenEndpointAuthMethodSource.php:51    [M] Multiplication

--- Original
+++ New
@@ @@
         parent::continueConfiguration($node);
-        $node->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
+        $node->children()->integerNode('secret_lifetime')->defaultValue(60 / 60 * 24 * 14)->min(0)->end()->end();
     }
 }


617) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretPostTokenEndpointAuthMethodSource.php:51    [M] Multiplication

--- Original
+++ New
@@ @@
         parent::continueConfiguration($node);
-        $node->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
+        $node->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 / 24 * 14)->min(0)->end()->end();
     }
 }


618) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretPostTokenEndpointAuthMethodSource.php:51    [M] Multiplication

--- Original
+++ New
@@ @@
         parent::continueConfiguration($node);
-        $node->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
+        $node->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 / 14)->min(0)->end()->end();
     }
 }


619) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretPostTokenEndpointAuthMethodSource.php:51    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         parent::continueConfiguration($node);
-        $node->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
+        $node->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(1)->end()->end();
     }
 }


620) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/ClientSecretPostTokenEndpointAuthMethodSource.php:46    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->integerNode('secret_lifetime')->defaultValue(60 * 60 * 24 * 14)->min(0)->end()->end();
     }
 }


621) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/NoneTokenEndpointAuthMethodSource.php:26    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_endpoint_auth_method'));
         $loader->load('none.php');
     }
     /**
      * {@inheritdoc}

622) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/NoneTokenEndpointAuthMethodSource.php:35    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'none';
     }
 }


623) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/TokenEndpointAuthMethodSource.php:37    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_endpoint_auth_method'));
         $loader->load('token_endpoint_auth_method.php');
     }
     /**
      * @return string

624) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenEndpointAuthMethod/TokenEndpointAuthMethodSource.php:46    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'token_endpoint_auth_method';
     }
 }


625) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/BearerTokenTypeSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_type'));
         $loader->load('bearer_token.php');
     }
     /**

626) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/BearerTokenTypeSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_type'));
         $loader->load('bearer_token.php');

627) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/BearerTokenTypeSource.php:40    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'bearer_token';
     }
     /**
      * {@inheritdoc}
      */

628) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/BearerTokenTypeSource.php:54    [M] TrueValue

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return false === $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->children()->scalarNode('realm')->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->end();
     }
 }


629) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/BearerTokenTypeSource.php:54    [M] Identical

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return true !== $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->children()->scalarNode('realm')->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->end();
     }
 }


630) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/BearerTokenTypeSource.php:54    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return true === $config['enabled'] && empty($config['realm']);
+            return true === $config['enabled'] || empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->children()->scalarNode('realm')->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->end();
     }
 }


631) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/BearerTokenTypeSource.php:48    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return true === $config['enabled'] && empty($config['realm']);
         })->thenInvalid('The option "realm" must be set.')->end()->children()->scalarNode('realm')->end()->booleanNode('authorization_header')->defaultTrue()->end()->booleanNode('query_string')->defaultFalse()->end()->booleanNode('request_body')->defaultFalse()->end()->end();
     }

632) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_type'));
         $loader->load('mac_token.php');
     }
     /**

633) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:27    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_type'));
         $loader->load('mac_token.php');

634) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:40    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'mac_token';
     }
     /**
      * {@inheritdoc}
      */

635) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:54    [M] GreaterThan

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return $config['min_length'] > $config['max_length'];
+            return $config['min_length'] >= $config['max_length'];
         })->thenInvalid('The option "min_length" must not be greater than "max_length".')->end()->validate()->ifTrue(function ($config) {
             return !in_array($config['algorithm'], ['hmac-sha-256', 'hmac-sha-1']);
         })->thenInvalid('The algorithm is not supported. Please use one of the following one: "hmac-sha-1", "hmac-sha-256".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(2)->end()->scalarNode('algorithm')->defaultValue('hmac-sha-256')->end()->integerNode('timestamp_lifetime')->defaultValue(10)->min(1)->end()->end();
     }
 }


636) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:54    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $node->validate()->ifTrue(function ($config) {
-            return $config['min_length'] > $config['max_length'];
+            return $config['min_length'] <= $config['max_length'];
         })->thenInvalid('The option "min_length" must not be greater than "max_length".')->end()->validate()->ifTrue(function ($config) {
             return !in_array($config['algorithm'], ['hmac-sha-256', 'hmac-sha-1']);
         })->thenInvalid('The algorithm is not supported. Please use one of the following one: "hmac-sha-1", "hmac-sha-256".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(2)->end()->scalarNode('algorithm')->defaultValue('hmac-sha-256')->end()->integerNode('timestamp_lifetime')->defaultValue(10)->min(1)->end()->end();
     }
 }


637) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:60    [M] LogicalNot

--- Original
+++ New
@@ @@
         })->thenInvalid('The option "min_length" must not be greater than "max_length".')->end()->validate()->ifTrue(function ($config) {
-            return !in_array($config['algorithm'], ['hmac-sha-256', 'hmac-sha-1']);
+            return in_array($config['algorithm'], ['hmac-sha-256', 'hmac-sha-1']);
         })->thenInvalid('The algorithm is not supported. Please use one of the following one: "hmac-sha-1", "hmac-sha-256".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(2)->end()->scalarNode('algorithm')->defaultValue('hmac-sha-256')->end()->integerNode('timestamp_lifetime')->defaultValue(10)->min(1)->end()->end();
     }
 }


638) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:65    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return !in_array($config['algorithm'], ['hmac-sha-256', 'hmac-sha-1']);
-        })->thenInvalid('The algorithm is not supported. Please use one of the following one: "hmac-sha-1", "hmac-sha-256".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(2)->end()->scalarNode('algorithm')->defaultValue('hmac-sha-256')->end()->integerNode('timestamp_lifetime')->defaultValue(10)->min(1)->end()->end();
+        })->thenInvalid('The algorithm is not supported. Please use one of the following one: "hmac-sha-1", "hmac-sha-256".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(0)->end()->integerNode('max_length')->defaultValue(100)->min(2)->end()->scalarNode('algorithm')->defaultValue('hmac-sha-256')->end()->integerNode('timestamp_lifetime')->defaultValue(10)->min(1)->end()->end();
     }
 }


639) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:68    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return !in_array($config['algorithm'], ['hmac-sha-256', 'hmac-sha-1']);
-        })->thenInvalid('The algorithm is not supported. Please use one of the following one: "hmac-sha-1", "hmac-sha-256".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(2)->end()->scalarNode('algorithm')->defaultValue('hmac-sha-256')->end()->integerNode('timestamp_lifetime')->defaultValue(10)->min(1)->end()->end();
+        })->thenInvalid('The algorithm is not supported. Please use one of the following one: "hmac-sha-1", "hmac-sha-256".')->end()->children()->integerNode('min_length')->defaultValue(50)->min(1)->end()->integerNode('max_length')->defaultValue(100)->min(2)->end()->scalarNode('algorithm')->defaultValue('hmac-sha-256')->end()->integerNode('timestamp_lifetime')->defaultValue(10)->min(0)->end()->end();
     }
 }


640) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/MacTokenTypeSource.php:48    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->validate()->ifTrue(function ($config) {
             return $config['min_length'] > $config['max_length'];
         })->thenInvalid('The option "min_length" must not be greater than "max_length".')->end()->validate()->ifTrue(function ($config) {
             return !in_array($config['algorithm'], ['hmac-sha-256', 'hmac-sha-1']);

641) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/TokenTypeSource.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'token_type';
     }
     /**
      * {@inheritdoc}
      */

642) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/TokenTypeSource.php:46    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($config as $k => $v) {
+        foreach (array() as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_type'));
         $loader->load('token_type.php');
     }
     /**

643) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/TokenTypeSource.php:44    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach ($config as $k => $v) {
             $container->setParameter($path . '.' . $k, $v);
         }
         $loader = new PhpConfigFileLoader($container, new FileLocator(__DIR__ . '/../../../Resources/config/token_type'));
         $loader->load('token_type.php');

644) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/TokenType/TokenTypeSource.php:56    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('default')->isRequired()->info('The default token type used for access token issuance.')->end()->booleanNode('allow_token_type_parameter')->defaultFalse()->info('If true, the "token_type" parameter will be allowed in requests.')->end()->end();
     }
 }


645) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/UserAccountSource.php:24    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function name() : string
+    private function name() : string
     {
         return 'user_account';
     }
     /**
      * {@inheritdoc}
      */

646) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/UserAccountSource.php:34    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['repository', 'manager'] as $k) {
+        foreach (array() as $k) {
             $container->setAlias($path . '.' . $k, $config[$k]);
         }
     }
     /**
      * {@inheritdoc}
      */

647) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/UserAccountSource.php:32    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueLoading(string $path, ContainerBuilder $container, array $config)
+    private function continueLoading(string $path, ContainerBuilder $container, array $config)
     {
         foreach (['repository', 'manager'] as $k) {
             $container->setAlias($path . '.' . $k, $config[$k]);
         }
     }
     /**

648) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/DependencyInjection/Source/UserAccountSource.php:42    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function continueConfiguration(NodeDefinition $node)
+    private function continueConfiguration(NodeDefinition $node)
     {
         parent::continueConfiguration($node);
         $node->children()->scalarNode('repository')->info('The user account repository.')->isRequired()->end()->scalarNode('manager')->info('The user account manager.')->isRequired()->end()->end();
     }
 }


649) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/FormFactory.php:73    [M] Plus

--- Original
+++ New
@@ @@
     {
-        $options = ['validation_groups' => $this->validationGroups, 'translator' => $this->translator] + $options;
+        $options = ['validation_groups' => $this->validationGroups, 'translator' => $this->translator] - $options;
         $form = $this->formFactory->createNamed($this->name, $this->type, null, $options);
         if (null !== $data) {
             $form->setData($data);
         }
         return $form;
     }

650) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/FormFactory.php:76    [M] NotIdentical

--- Original
+++ New
@@ @@
         $form = $this->formFactory->createNamed($this->name, $this->type, null, $options);
-        if (null !== $data) {
+        if (null === $data) {
             $form->setData($data);
         }
         return $form;
     }
 }


651) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/FormFactory.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createForm(array $options = [], $data = null) : FormInterface
+    protected function createForm(array $options = [], $data = null) : FormInterface
     {
         $options = ['validation_groups' => $this->validationGroups, 'translator' => $this->translator] + $options;
         $form = $this->formFactory->createNamed($this->name, $this->type, null, $options);
         if (null !== $data) {
             $form->setData($data);
         }

652) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Handler/AuthorizationFormHandler.php:39    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if ('POST' !== $request->getMethod()) {
+        if ('POST' === $request->getMethod()) {
             throw new OAuth2Exception(405, []);
         }
         $httpFoundationFactory = new HttpFoundationFactory();
         $symfonyRequest = $httpFoundationFactory->createRequest($request);
         $form->submit($symfonyRequest->get($form->getName()));
         if (!$form->isValid()) {

653) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Handler/AuthorizationFormHandler.php:50    [M] LogicalNot

--- Original
+++ New
@@ @@
         $form->submit($symfonyRequest->get($form->getName()));
-        if (!$form->isValid()) {
+        if ($form->isValid()) {
             return $authorization;
         }
         $button = $form->get('accept');
         if (!$button instanceof ClickableInterface) {
             throw new InvalidArgumentException('Unable to find the button named "accept".');
         }

654) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Handler/AuthorizationFormHandler.php:55    [M] LogicalNot

--- Original
+++ New
@@ @@
         $button = $form->get('accept');
-        if (!$button instanceof ClickableInterface) {
+        if ($button instanceof ClickableInterface) {
             throw new InvalidArgumentException('Unable to find the button named "accept".');
         }
         if (true === $button->isClicked()) {
             $authorization = $authorization->allow();
         } else {
             $authorization = $authorization->deny();

655) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Handler/AuthorizationFormHandler.php:58    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        if (true === $button->isClicked()) {
+        if (false === $button->isClicked()) {
             $authorization = $authorization->allow();
         } else {
             $authorization = $authorization->deny();
         }
         $refused_scopes = array_diff($authorization->getScopes(), $authorization_model->getScopes());
         foreach ($refused_scopes as $refused_scope) {

656) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Handler/AuthorizationFormHandler.php:58    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if (true === $button->isClicked()) {
+        if (true !== $button->isClicked()) {
             $authorization = $authorization->allow();
         } else {
             $authorization = $authorization->deny();
         }
         $refused_scopes = array_diff($authorization->getScopes(), $authorization_model->getScopes());
         foreach ($refused_scopes as $refused_scope) {

657) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Handler/AuthorizationFormHandler.php:67    [M] Foreach_

--- Original
+++ New
@@ @@
         $refused_scopes = array_diff($authorization->getScopes(), $authorization_model->getScopes());
-        foreach ($refused_scopes as $refused_scope) {
+        foreach (array() as $refused_scope) {
             $authorization = $authorization->withoutScope($refused_scope);
         }
         return $authorization;
     }
 }


658) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Handler/AuthorizationFormHandler.php:37    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(FormInterface $form, ServerRequestInterface $request, Authorization $authorization, AuthorizationModel $authorization_model) : Authorization
+    protected function handle(FormInterface $form, ServerRequestInterface $request, Authorization $authorization, AuthorizationModel $authorization_model) : Authorization
     {
         if ('POST' !== $request->getMethod()) {
             throw new OAuth2Exception(405, []);
         }
         $httpFoundationFactory = new HttpFoundationFactory();
         $symfonyRequest = $httpFoundationFactory->createRequest($request);

659) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Model/AuthorizationModel.php:31    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isConfigurationSaved()
+    protected function isConfigurationSaved()
     {
         return $this->saveConfiguration;
     }
     /**
      * @param bool $saveConfiguration
      */

660) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Model/AuthorizationModel.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setSaveConfiguration(bool $saveConfiguration)
+    protected function setSaveConfiguration(bool $saveConfiguration)
     {
         $this->saveConfiguration = $saveConfiguration;
     }
     /**
      * @return string[]
      */

661) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Model/AuthorizationModel.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @param string[] $scopes
      */

662) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Model/AuthorizationModel.php:55    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setScopes(array $scopes)
+    protected function setScopes(array $scopes)
     {
         $this->scopes = $scopes;
     }
 }


663) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Type/AuthorizationType.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
 {
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    protected function buildForm(FormBuilderInterface $builder, array $options)
     {
         $translator = $options['translator'];
         /*if (true === $options['allow_scope_selection']) {
               $builder->add('scopes', ChoiceType::class, [
                   'label'             => $translator->trans('authorization.form.scope', [], $options['translation_domain'], $options['locale']),
                   'multiple'          => 'true',

664) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Type/AuthorizationType.php:70    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        $resolver->setDefaults(['translation_domain' => 'OAuth2FrameworkServer', 'data_class' => 'OAuth2Framework\\Bundle\\Server\\Form\\Model\\AuthorizationModel', 'scopes' => [], 'allow_scope_selection' => false, 'is_pre_configured_authorization_enabled' => false, 'locale' => null, 'translator' => null]);
+        $resolver->setDefaults(['translation_domain' => 'OAuth2FrameworkServer', 'data_class' => 'OAuth2Framework\\Bundle\\Server\\Form\\Model\\AuthorizationModel', 'scopes' => [], 'allow_scope_selection' => true, 'is_pre_configured_authorization_enabled' => false, 'locale' => null, 'translator' => null]);
         $resolver->setAllowedTypes('locale', ['string', 'null']);
         $resolver->setAllowedTypes('scopes', 'array');
         $resolver->setAllowedTypes('allow_scope_selection', 'bool');
         $resolver->setAllowedTypes('is_pre_configured_authorization_enabled', 'bool');
         $resolver->setAllowedTypes('translator', TranslatorInterface::class);
     }

665) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Type/AuthorizationType.php:71    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        $resolver->setDefaults(['translation_domain' => 'OAuth2FrameworkServer', 'data_class' => 'OAuth2Framework\\Bundle\\Server\\Form\\Model\\AuthorizationModel', 'scopes' => [], 'allow_scope_selection' => false, 'is_pre_configured_authorization_enabled' => false, 'locale' => null, 'translator' => null]);
+        $resolver->setDefaults(['translation_domain' => 'OAuth2FrameworkServer', 'data_class' => 'OAuth2Framework\\Bundle\\Server\\Form\\Model\\AuthorizationModel', 'scopes' => [], 'allow_scope_selection' => false, 'is_pre_configured_authorization_enabled' => true, 'locale' => null, 'translator' => null]);
         $resolver->setAllowedTypes('locale', ['string', 'null']);
         $resolver->setAllowedTypes('scopes', 'array');
         $resolver->setAllowedTypes('allow_scope_selection', 'bool');
         $resolver->setAllowedTypes('is_pre_configured_authorization_enabled', 'bool');
         $resolver->setAllowedTypes('translator', TranslatorInterface::class);
     }

666) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Type/AuthorizationType.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function configureOptions(OptionsResolver $resolver)
+    protected function configureOptions(OptionsResolver $resolver)
     {
         $resolver->setDefaults(['translation_domain' => 'OAuth2FrameworkServer', 'data_class' => 'OAuth2Framework\\Bundle\\Server\\Form\\Model\\AuthorizationModel', 'scopes' => [], 'allow_scope_selection' => false, 'is_pre_configured_authorization_enabled' => false, 'locale' => null, 'translator' => null]);
         $resolver->setAllowedTypes('locale', ['string', 'null']);
         $resolver->setAllowedTypes('scopes', 'array');
         $resolver->setAllowedTypes('allow_scope_selection', 'bool');
         $resolver->setAllowedTypes('is_pre_configured_authorization_enabled', 'bool');

667) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Form/Type/AuthorizationType.php:82    [M] PublicVisibility

--- Original
+++ New
@@ @@
     }
-    public function getBlockPrefix()
+    protected function getBlockPrefix()
     {
         return 'oauth2_server_authorization';
     }
 }


668) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AccessTokenByReferenceRepository.php:88    [M] Identical

--- Original
+++ New
@@ @@
         $accessToken = $this->getFromCache($accessTokenId);
-        if (null === $accessToken) {
+        if (null !== $accessToken) {
             $events = $this->eventStore->getEvents($accessTokenId);
             if (!empty($events)) {
                 $accessToken = $this->getFromEvents($events);
                 $this->cacheObject($accessToken);
             }
         }

669) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AccessTokenByReferenceRepository.php:90    [M] LogicalNot

--- Original
+++ New
@@ @@
             $events = $this->eventStore->getEvents($accessTokenId);
-            if (!empty($events)) {
+            if (empty($events)) {
                 $accessToken = $this->getFromEvents($events);
                 $this->cacheObject($accessToken);
             }
         }
         return $accessToken;
     }

670) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AccessTokenByReferenceRepository.php:85    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(AccessTokenId $accessTokenId)
+    protected function find(AccessTokenId $accessTokenId)
     {
         $accessToken = $this->getFromCache($accessTokenId);
         if (null === $accessToken) {
             $events = $this->eventStore->getEvents($accessTokenId);
             if (!empty($events)) {
                 $accessToken = $this->getFromEvents($events);

671) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AccessTokenByReferenceRepository.php:105    [M] Foreach_

--- Original
+++ New
@@ @@
         $events = $accessToken->recordedMessages();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $this->eventStore->save($event);
             $this->eventBus->handle($event);
         }
         $accessToken->eraseMessages();
         $this->cacheObject($accessToken);
     }

672) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AccessTokenByReferenceRepository.php:102    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function save(AccessToken $accessToken)
+    protected function save(AccessToken $accessToken)
     {
         $events = $accessToken->recordedMessages();
         foreach ($events as $event) {
             $this->eventStore->save($event);
             $this->eventBus->handle($event);
         }

673) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AccessTokenByReferenceRepository.php:118    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $expiresAt) {
+        if (null !== $expiresAt) {
             $expiresAt = new \DateTimeImmutable(sprintf('now +%u seconds', $this->lifetime));
         }
         $accessTokenId = AccessTokenId::create(RandomIdGenerator::generate($this->minLength, $this->maxLength));
         $accessToken = AccessToken::createEmpty();
         $accessToken = $accessToken->create($accessTokenId, $resourceOwnerId, $clientId, $parameters, $metadatas, $scopes, $expiresAt, $refreshTokenId, $resourceServerId);
         return $accessToken;

674) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AccessTokenByReferenceRepository.php:116    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function create(ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, ?RefreshTokenId $refreshTokenId, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $expiresAt) : AccessToken
+    protected function create(ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, ?RefreshTokenId $refreshTokenId, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $expiresAt) : AccessToken
     {
         if (null === $expiresAt) {
             $expiresAt = new \DateTimeImmutable(sprintf('now +%u seconds', $this->lifetime));
         }
         $accessTokenId = AccessTokenId::create(RandomIdGenerator::generate($this->minLength, $this->maxLength));
         $accessToken = AccessToken::createEmpty();

675) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AccessTokenByReferenceRepository.php:137    [M] Foreach_

--- Original
+++ New
@@ @@
         $accessToken = AccessToken::createEmpty();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $accessToken = $accessToken->apply($event);
         }
         return $accessToken;
     }
     /**
      * @param AccessTokenId $accessTokenId

676) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AuthCodeRepository.php:86    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $expiresAt) {
+        if (null !== $expiresAt) {
             $expiresAt = new \DateTimeImmutable(sprintf('now +%u seconds', $this->lifetime));
         }
         $authCodeId = AuthCodeId::create(RandomIdGenerator::generate($this->minLength, $this->maxLength));
         $authCode = AuthCode::createEmpty();
         $authCode = $authCode->create($authCodeId, $clientId, $userAccountId, $queryParameters, $redirectUri, $expiresAt, $parameters, $metadatas, $scopes, $withRefreshToken, $resourceServerId);
         return $authCode;

677) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AuthCodeRepository.php:84    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function create(ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, DataBag $parameters, DataBag $metadatas, array $scopes, bool $withRefreshToken, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $expiresAt) : AuthCode
+    protected function create(ClientId $clientId, UserAccountId $userAccountId, array $queryParameters, string $redirectUri, DataBag $parameters, DataBag $metadatas, array $scopes, bool $withRefreshToken, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $expiresAt) : AuthCode
     {
         if (null === $expiresAt) {
             $expiresAt = new \DateTimeImmutable(sprintf('now +%u seconds', $this->lifetime));
         }
         $authCodeId = AuthCodeId::create(RandomIdGenerator::generate($this->minLength, $this->maxLength));
         $authCode = AuthCode::createEmpty();

678) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AuthCodeRepository.php:103    [M] Identical

--- Original
+++ New
@@ @@
         $authCode = $this->getFromCache($authCodeId);
-        if (null === $authCode) {
+        if (null !== $authCode) {
             $events = $this->eventStore->getEvents($authCodeId);
             if (!empty($events)) {
                 $authCode = $this->getFromEvents($events);
                 $this->cacheObject($authCode);
             }
         }

679) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AuthCodeRepository.php:105    [M] LogicalNot

--- Original
+++ New
@@ @@
             $events = $this->eventStore->getEvents($authCodeId);
-            if (!empty($events)) {
+            if (empty($events)) {
                 $authCode = $this->getFromEvents($events);
                 $this->cacheObject($authCode);
             }
         }
         return $authCode;
     }

680) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AuthCodeRepository.php:100    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(AuthCodeId $authCodeId) : ?AuthCode
+    protected function find(AuthCodeId $authCodeId) : ?AuthCode
     {
         $authCode = $this->getFromCache($authCodeId);
         if (null === $authCode) {
             $events = $this->eventStore->getEvents($authCodeId);
             if (!empty($events)) {
                 $authCode = $this->getFromEvents($events);

681) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AuthCodeRepository.php:120    [M] Foreach_

--- Original
+++ New
@@ @@
         $events = $authCode->recordedMessages();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $this->eventStore->save($event);
             $this->eventBus->handle($event);
         }
         $authCode->eraseMessages();
         $this->cacheObject($authCode);
     }

682) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AuthCodeRepository.php:117    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function save(AuthCode $authCode)
+    protected function save(AuthCode $authCode)
     {
         $events = $authCode->recordedMessages();
         foreach ($events as $event) {
             $this->eventStore->save($event);
             $this->eventBus->handle($event);
         }

683) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/AuthCodeRepository.php:136    [M] Foreach_

--- Original
+++ New
@@ @@
         $authCode = AuthCode::createEmpty();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $authCode = $authCode->apply($event);
         }
         return $authCode;
     }
     /**
      * @param AuthCodeId $authCodeId

684) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/ClientRepository.php:61    [M] Identical

--- Original
+++ New
@@ @@
         $client = $this->getFromCache($clientId);
-        if (null === $client) {
+        if (null !== $client) {
             $events = $this->eventStore->getEvents($clientId);
             if (!empty($events)) {
                 $client = $this->getFromEvents($events);
                 $this->cacheObject($client);
             }
         }

685) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/ClientRepository.php:63    [M] LogicalNot

--- Original
+++ New
@@ @@
             $events = $this->eventStore->getEvents($clientId);
-            if (!empty($events)) {
+            if (empty($events)) {
                 $client = $this->getFromEvents($events);
                 $this->cacheObject($client);
             }
         }
         return $client;
     }

686) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/ClientRepository.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(ClientId $clientId) : ?Client
+    protected function find(ClientId $clientId) : ?Client
     {
         $client = $this->getFromCache($clientId);
         if (null === $client) {
             $events = $this->eventStore->getEvents($clientId);
             if (!empty($events)) {
                 $client = $this->getFromEvents($events);

687) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/ClientRepository.php:78    [M] Foreach_

--- Original
+++ New
@@ @@
         $events = $client->recordedMessages();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $this->eventStore->save($event);
             $this->eventRecorder->record($event);
         }
         $client->eraseMessages();
         $this->cacheObject($client);
     }

688) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/ClientRepository.php:75    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function save(Client $client)
+    protected function save(Client $client)
     {
         $events = $client->recordedMessages();
         foreach ($events as $event) {
             $this->eventStore->save($event);
             $this->eventRecorder->record($event);
         }

689) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/ClientRepository.php:94    [M] Foreach_

--- Original
+++ New
@@ @@
         $client = Client::createEmpty();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $client = $client->apply($event);
         }
         return $client;
     }
     /**
      * @param ClientId $clientId

690) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/InitialAccessTokenRepository.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function create(?UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt) : InitialAccessToken
+    protected function create(?UserAccountId $userAccountId, ?\DateTimeImmutable $expiresAt) : InitialAccessToken
     {
         $initialAccessTokeId = InitialAccessTokenId::create(RandomIdGenerator::generate($this->minLength, $this->maxLength));
         $initialAccessToken = InitialAccessToken::createEmpty();
         $initialAccessToken = $initialAccessToken->create($initialAccessTokeId, $userAccountId, $expiresAt);
         return $initialAccessToken;
     }

691) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/InitialAccessTokenRepository.php:89    [M] Identical

--- Original
+++ New
@@ @@
         $initialAccessToken = $this->getFromCache($initialAccessTokenId);
-        if (null === $initialAccessToken) {
+        if (null !== $initialAccessToken) {
             $events = $this->eventStore->getEvents($initialAccessTokenId);
             if (!empty($events)) {
                 $initialAccessToken = $this->getFromEvents($events);
                 $this->cacheObject($initialAccessToken);
             }
         }

692) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/InitialAccessTokenRepository.php:91    [M] LogicalNot

--- Original
+++ New
@@ @@
             $events = $this->eventStore->getEvents($initialAccessTokenId);
-            if (!empty($events)) {
+            if (empty($events)) {
                 $initialAccessToken = $this->getFromEvents($events);
                 $this->cacheObject($initialAccessToken);
             }
         }
         return $initialAccessToken;
     }

693) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/InitialAccessTokenRepository.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(InitialAccessTokenId $initialAccessTokenId) : ?InitialAccessToken
+    protected function find(InitialAccessTokenId $initialAccessTokenId) : ?InitialAccessToken
     {
         $initialAccessToken = $this->getFromCache($initialAccessTokenId);
         if (null === $initialAccessToken) {
             $events = $this->eventStore->getEvents($initialAccessTokenId);
             if (!empty($events)) {
                 $initialAccessToken = $this->getFromEvents($events);

694) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/InitialAccessTokenRepository.php:106    [M] Foreach_

--- Original
+++ New
@@ @@
         $events = $initialAccessToken->recordedMessages();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $this->eventStore->save($event);
             $this->eventRecorder->record($event);
         }
         $initialAccessToken->eraseMessages();
         $this->cacheObject($initialAccessToken);
     }

695) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/InitialAccessTokenRepository.php:103    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function save(InitialAccessToken $initialAccessToken)
+    protected function save(InitialAccessToken $initialAccessToken)
     {
         $events = $initialAccessToken->recordedMessages();
         foreach ($events as $event) {
             $this->eventStore->save($event);
             $this->eventRecorder->record($event);
         }

696) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/InitialAccessTokenRepository.php:122    [M] Foreach_

--- Original
+++ New
@@ @@
         $initialAccessToken = InitialAccessToken::createEmpty();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $initialAccessToken = $initialAccessToken->apply($event);
         }
         return $initialAccessToken;
     }
     /**
      * @param InitialAccessTokenId $initialAccessTokenId

697) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/PreConfiguredAuthorizationRepository.php:62    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function create(UserAccountId $userAccountId, ClientId $clientId, array $scopes, ?ResourceServerId $resourceServerId) : PreConfiguredAuthorization
+    protected function create(UserAccountId $userAccountId, ClientId $clientId, array $scopes, ?ResourceServerId $resourceServerId) : PreConfiguredAuthorization
     {
         $hash = $this->calculateHash($userAccountId, $clientId, $scopes, $resourceServerId);
         $preConfiguredAuthorization = PreConfiguredAuthorization::createEmpty();
         $preConfiguredAuthorization = $preConfiguredAuthorization->create($hash, $userAccountId, $clientId, $scopes);
         return $preConfiguredAuthorization;
     }

698) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/PreConfiguredAuthorizationRepository.php:78    [M] Identical

--- Original
+++ New
@@ @@
         $preConfiguredAuthorization = $this->getFromCache($hash);
-        if (null === $preConfiguredAuthorization) {
+        if (null !== $preConfiguredAuthorization) {
             $events = $this->eventStore->getEvents($hash);
             if (!empty($events)) {
                 $preConfiguredAuthorization = $this->getFromEvents($events);
                 $this->cacheObject($preConfiguredAuthorization);
             }
         }

699) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/PreConfiguredAuthorizationRepository.php:80    [M] LogicalNot

--- Original
+++ New
@@ @@
             $events = $this->eventStore->getEvents($hash);
-            if (!empty($events)) {
+            if (empty($events)) {
                 $preConfiguredAuthorization = $this->getFromEvents($events);
                 $this->cacheObject($preConfiguredAuthorization);
             }
         }
         return $preConfiguredAuthorization;
     }

700) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/PreConfiguredAuthorizationRepository.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(UserAccountId $userAccountId, ClientId $clientId, array $scopes, ?ResourceServerId $resourceServerId) : ?PreConfiguredAuthorization
+    protected function find(UserAccountId $userAccountId, ClientId $clientId, array $scopes, ?ResourceServerId $resourceServerId) : ?PreConfiguredAuthorization
     {
         $hash = $this->calculateHash($userAccountId, $clientId, $scopes, $resourceServerId);
         $preConfiguredAuthorization = $this->getFromCache($hash);
         if (null === $preConfiguredAuthorization) {
             $events = $this->eventStore->getEvents($hash);
             if (!empty($events)) {

701) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/PreConfiguredAuthorizationRepository.php:95    [M] Foreach_

--- Original
+++ New
@@ @@
         $events = $preConfiguredAuthorization->recordedMessages();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $this->eventStore->save($event);
             $this->eventRecorder->record($event);
         }
         $preConfiguredAuthorization->eraseMessages();
         $this->cacheObject($preConfiguredAuthorization);
     }

702) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/PreConfiguredAuthorizationRepository.php:92    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function save(PreConfiguredAuthorization $preConfiguredAuthorization)
+    protected function save(PreConfiguredAuthorization $preConfiguredAuthorization)
     {
         $events = $preConfiguredAuthorization->recordedMessages();
         foreach ($events as $event) {
             $this->eventStore->save($event);
             $this->eventRecorder->record($event);
         }

703) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/PreConfiguredAuthorizationRepository.php:127    [M] Foreach_

--- Original
+++ New
@@ @@
         $preConfiguredAuthorization = PreConfiguredAuthorization::createEmpty();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $preConfiguredAuthorization = $preConfiguredAuthorization->apply($event);
         }
         return $preConfiguredAuthorization;
     }
     /**
      * @param PreConfiguredAuthorization $preConfiguredAuthorization

704) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/RefreshTokenRepository.php:86    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $expiresAt) {
+        if (null !== $expiresAt) {
             $expiresAt = new \DateTimeImmutable(sprintf('now +%u seconds', $this->lifetime));
         }
         $refreshTokenId = RefreshTokenId::create(RandomIdGenerator::generate($this->minLength, $this->maxLength));
         $refreshToken = RefreshToken::createEmpty();
         $refreshToken = $refreshToken->create($refreshTokenId, $resourceOwnerId, $clientId, $parameters, $metadatas, $scopes, $expiresAt, $resourceServerId);
         return $refreshToken;

705) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/RefreshTokenRepository.php:84    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function create(ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $expiresAt) : RefreshToken
+    protected function create(ResourceOwnerId $resourceOwnerId, ClientId $clientId, DataBag $parameters, DataBag $metadatas, array $scopes, ?ResourceServerId $resourceServerId, ?\DateTimeImmutable $expiresAt) : RefreshToken
     {
         if (null === $expiresAt) {
             $expiresAt = new \DateTimeImmutable(sprintf('now +%u seconds', $this->lifetime));
         }
         $refreshTokenId = RefreshTokenId::create(RandomIdGenerator::generate($this->minLength, $this->maxLength));
         $refreshToken = RefreshToken::createEmpty();

706) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/RefreshTokenRepository.php:103    [M] Identical

--- Original
+++ New
@@ @@
         $refreshToken = $this->getFromCache($refreshTokenId);
-        if (null === $refreshToken) {
+        if (null !== $refreshToken) {
             $events = $this->eventStore->getEvents($refreshTokenId);
             if (!empty($events)) {
                 $refreshToken = $this->getFromEvents($events);
                 $this->cacheObject($refreshToken);
             }
         }

707) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/RefreshTokenRepository.php:105    [M] LogicalNot

--- Original
+++ New
@@ @@
             $events = $this->eventStore->getEvents($refreshTokenId);
-            if (!empty($events)) {
+            if (empty($events)) {
                 $refreshToken = $this->getFromEvents($events);
                 $this->cacheObject($refreshToken);
             }
         }
         return $refreshToken;
     }

708) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/RefreshTokenRepository.php:100    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(RefreshTokenId $refreshTokenId)
+    protected function find(RefreshTokenId $refreshTokenId)
     {
         $refreshToken = $this->getFromCache($refreshTokenId);
         if (null === $refreshToken) {
             $events = $this->eventStore->getEvents($refreshTokenId);
             if (!empty($events)) {
                 $refreshToken = $this->getFromEvents($events);

709) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/RefreshTokenRepository.php:120    [M] Foreach_

--- Original
+++ New
@@ @@
         $events = $refreshToken->recordedMessages();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $this->eventStore->save($event);
             $this->eventBus->handle($event);
         }
         $refreshToken->eraseMessages();
         $this->cacheObject($refreshToken);
     }

710) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/RefreshTokenRepository.php:117    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function save(RefreshToken $refreshToken)
+    protected function save(RefreshToken $refreshToken)
     {
         $events = $refreshToken->recordedMessages();
         foreach ($events as $event) {
             $this->eventStore->save($event);
             $this->eventBus->handle($event);
         }

711) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Model/RefreshTokenRepository.php:136    [M] Foreach_

--- Original
+++ New
@@ @@
         $refreshToken = RefreshToken::createEmpty();
-        foreach ($events as $event) {
+        foreach (array() as $event) {
             $refreshToken = $refreshToken->apply($event);
         }
         return $refreshToken;
     }
     /**
      * @param RefreshTokenId $refreshTokenId

712) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/OAuth2FrameworkServerBundle.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function boot()
+    protected function boot()
     {
         parent::boot();
         $this->container->get('twig.loader')->addPath(__DIR__ . DIRECTORY_SEPARATOR . 'Resources' . DIRECTORY_SEPARATOR . 'views', 'OAuth2FrameworkServerBundle');
     }
     /**
      * {@inheritdoc}

713) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/OAuth2FrameworkServerBundle.php:40    [M] NewObject

--- Original
+++ New
@@ @@
     {
-        return new OAuth2FrameworkServerExtension($alias);
+        new OAuth2FrameworkServerExtension($alias);
+        return null;
     }
     /**
      * {@inheritdoc}
      */
     public function build(ContainerBuilder $container)

714) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/OAuth2FrameworkServerBundle.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getContainerExtension($alias = 'oauth2_server')
+    protected function getContainerExtension($alias = 'oauth2_server')
     {
         return new OAuth2FrameworkServerExtension($alias);
     }
     /**
      * {@inheritdoc}
      */

715) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/OAuth2FrameworkServerBundle.php:48    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($this->getCompilerPasses() as $pass) {
+        foreach (array() as $pass) {
             $container->addCompilerPass($pass);
         }
         /** @var SecurityExtension $extension */
         $extension = $container->getExtension('security');
         $extension->addSecurityListenerFactory(new OAuth2SecurityFactory());
     }

716) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/OAuth2FrameworkServerBundle.php:46    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function build(ContainerBuilder $container)
+    protected function build(ContainerBuilder $container)
     {
         foreach ($this->getCompilerPasses() as $pass) {
             $container->addCompilerPass($pass);
         }
         /** @var SecurityExtension $extension */
         $extension = $container->getExtension('security');

717) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Resolver/AccessTokenResolver.php:45    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (AccessToken::class !== $argument->getType()) {
+        if (AccessToken::class === $argument->getType()) {
             return false;
         }
         return $this->tokenStorage->getToken() instanceof OAuth2Token;
     }
     /**
      * {@inheritdoc}

718) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Resolver/AccessTokenResolver.php:46    [M] FalseValue

--- Original
+++ New
@@ @@
         if (AccessToken::class !== $argument->getType()) {
-            return false;
+            return true;
         }
         return $this->tokenStorage->getToken() instanceof OAuth2Token;
     }
     /**
      * {@inheritdoc}
      */

719) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Resolver/AccessTokenResolver.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function supports(Request $request, ArgumentMetadata $argument)
+    protected function supports(Request $request, ArgumentMetadata $argument)
     {
         if (AccessToken::class !== $argument->getType()) {
             return false;
         }
         return $this->tokenStorage->getToken() instanceof OAuth2Token;
     }

720) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Resolver/AccessTokenResolver.php:55    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function resolve(Request $request, ArgumentMetadata $argument)
+    protected function resolve(Request $request, ArgumentMetadata $argument)
     {
         (yield $this->tokenStorage->getToken()->getAccessToken());
     }
 }


721) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Response/AuthenticateResponseFactory.php:42    [M] Foreach_

--- Original
+++ New
@@ @@
         $schemes = [];
-        foreach ($this->tokenEndpointAuthMethodManager->getTokenEndpointAuthMethods() as $method) {
+        foreach (array() as $method) {
             $scheme = $method->getSchemesParameters();
             $schemes = array_merge($schemes, $scheme);
         }
         return $schemes;
     }
 }

722) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Response/AuthenticateResponseFactory.php:39    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function getSchemes() : array
+    private function getSchemes() : array
     {
         $schemes = [];
         foreach ($this->tokenEndpointAuthMethodManager->getTokenEndpointAuthMethods() as $method) {
             $scheme = $method->getSchemesParameters();
             $schemes = array_merge($schemes, $scheme);
         }

723) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Routing/RouteLoader.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addRoute($name, $controllerId, $methodName, $path, array $defaults = [], array $requirements = [], array $options = [], $host = '', $schemes = [], $methods = [], $condition = '')
+    protected function addRoute($name, $controllerId, $methodName, $path, array $defaults = [], array $requirements = [], array $options = [], $host = '', $schemes = [], $methods = [], $condition = '')
     {
         $defaults['_controller'] = sprintf('%s:%s', $controllerId, $methodName);
         $route = new Route($path, $defaults, $requirements, $options, $host, $schemes, $methods, $condition);
         $this->routes->add(sprintf('oauth2_server_%s', $name), $route);
     }
     /**

724) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Routing/RouteLoader.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function load($resource, $type = null)
+    protected function load($resource, $type = null)
     {
         return $this->routes;
     }
     /**
      * {@inheritdoc}
      */

725) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Routing/RouteLoader.php:69    [M] Identical

--- Original
+++ New
@@ @@
     {
-        return 'oauth2_server' === $type;
+        return 'oauth2_server' !== $type;
     }
     /**
      * {@inheritdoc}
      */
     public function getResolver()
     {

726) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Routing/RouteLoader.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function supports($resource, $type = null)
+    protected function supports($resource, $type = null)
     {
         return 'oauth2_server' === $type;
     }
     /**
      * {@inheritdoc}
      */

727) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Routing/RouteLoader.php:75    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResolver()
+    protected function getResolver()
     {
     }
     /**
      * {@inheritdoc}
      */
     public function setResolver(LoaderResolverInterface $resolver)

728) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Routing/RouteLoader.php:82    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setResolver(LoaderResolverInterface $resolver)
+    protected function setResolver(LoaderResolverInterface $resolver)
     {
     }
 }


729) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Rule/ClientRegistrationManagementRule.php:42    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function getRegistrationClientUri(ClientId $clientId) : string
+    private function getRegistrationClientUri(ClientId $clientId) : string
     {
         return $this->router->generate('oauth2_server_client_configuration', ['client_id' => $clientId->getValue()], UrlGeneratorInterface::ABSOLUTE_URL);
     }
     /**
      * {@inheritdoc}
      */

730) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Rule/ClientRegistrationManagementRule.php:50    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function generateRegistrationAccessToken() : string
+    private function generateRegistrationAccessToken() : string
     {
         return Base64Url::encode(random_bytes(512));
     }
 }


731) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Provider/OAuth2Provider.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->supports($token)) {
+        if ($this->supports($token)) {
             return null;
         }
         /** @var OAuth2Token $token */
         $accessToken = $token->getAccessToken();
         if (true === $accessToken->hasExpired()) {
             throw new BadCredentialsException('The access token has expired.');

732) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Provider/OAuth2Provider.php:36    [M] TrueValue

--- Original
+++ New
@@ @@
         $accessToken = $token->getAccessToken();
-        if (true === $accessToken->hasExpired()) {
+        if (false === $accessToken->hasExpired()) {
             throw new BadCredentialsException('The access token has expired.');
         }
         try {
             $token->setAuthenticated(true);
             return $token;
         } catch (\Exception $e) {

733) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Provider/OAuth2Provider.php:36    [M] Identical

--- Original
+++ New
@@ @@
         $accessToken = $token->getAccessToken();
-        if (true === $accessToken->hasExpired()) {
+        if (true !== $accessToken->hasExpired()) {
             throw new BadCredentialsException('The access token has expired.');
         }
         try {
             $token->setAuthenticated(true);
             return $token;
         } catch (\Exception $e) {

734) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Provider/OAuth2Provider.php:41    [M] TrueValue

--- Original
+++ New
@@ @@
         try {
-            $token->setAuthenticated(true);
+            $token->setAuthenticated(false);
             return $token;
         } catch (\Exception $e) {
             throw new AuthenticationException($e->getMessage(), $e->getCode(), $e);
         }
     }
     /**

735) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Provider/OAuth2Provider.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function authenticate(TokenInterface $token)
+    protected function authenticate(TokenInterface $token)
     {
         if (!$this->supports($token)) {
             return null;
         }
         /** @var OAuth2Token $token */
         $accessToken = $token->getAccessToken();

736) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Provider/OAuth2Provider.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function supports(TokenInterface $token)
+    protected function supports(TokenInterface $token)
     {
         return $token instanceof OAuth2Token;
     }
 }


737) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Token/OAuth2Token.php:35    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getToken() : string
+    protected function getToken() : string
     {
         return $this->accessToken->getTokenId()->getValue();
     }
     /**
      * @return AccessToken
      */

738) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Token/OAuth2Token.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAccessToken() : AccessToken
+    protected function getAccessToken() : AccessToken
     {
         return $this->accessToken;
     }
     /**
      * @return string
      */

739) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Token/OAuth2Token.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClientId() : string
+    protected function getClientId() : string
     {
         return $this->accessToken->getClientId()->getValue();
     }
     /**
      * @return string
      */

740) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Token/OAuth2Token.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResourceOwnerId() : string
+    protected function getResourceOwnerId() : string
     {
         return $this->accessToken->getResourceOwnerId()->getValue();
     }
     /**
      * {@inheritdoc}
      */

741) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Authentication/Token/OAuth2Token.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getCredentials()
+    protected function getCredentials()
     {
         return $this->getToken();
     }
 }


742) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/EntryPoint/OAuth2EntryPoint.php:50    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function start(Request $request, AuthenticationException $authException = null)
+    protected function start(Request $request, AuthenticationException $authException = null)
     {
         $response = $this->messageFactory->createResponse();
         $factory = new HttpFoundationFactory();
         $oauth2Response = $this->authenticateResponseFactory->createResponse(['error' => 'invalid_grant', 'error_description' => 'Access token is missing.'], $response);
         return $factory->createResponse($oauth2Response->getResponse());
     }

743) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Factory/OAuth2SecurityFactory.php:33    [M] TrueValue

--- Original
+++ New
@@ @@
         $providerId = 'security.authentication.provider.oauth2.' . $id;
-        $container->setDefinition($providerId, new ChildDefinition(OAuth2Provider::class))->setAutowired(true);
+        $container->setDefinition($providerId, new ChildDefinition(OAuth2Provider::class))->setAutowired(false);
         $listenerId = 'security.authentication.listener.oauth2.' . $id;
         $listener = $container->setDefinition($listenerId, new ChildDefinition(OAuth2Listener::class))->setArguments([new Reference(TokenStorageInterface::class), new Reference('security.authentication.manager')]);
         return array($providerId, $listenerId, OAuth2EntryPoint::class);
     }
     /**
      * {@inheritdoc}

744) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Factory/OAuth2SecurityFactory.php:28    [M] PublicVisibility

--- Original
+++ New
@@ @@
 {
-    public function create(ContainerBuilder $container, $id, $config, $userProvider, $defaultEntryPoint)
+    protected function create(ContainerBuilder $container, $id, $config, $userProvider, $defaultEntryPoint)
     {
         $providerId = 'security.authentication.provider.oauth2.' . $id;
         $container->setDefinition($providerId, new ChildDefinition(OAuth2Provider::class))->setAutowired(true);
         $listenerId = 'security.authentication.listener.oauth2.' . $id;
         $listener = $container->setDefinition($listenerId, new ChildDefinition(OAuth2Listener::class))->setArguments([new Reference(TokenStorageInterface::class), new Reference('security.authentication.manager')]);
         return array($providerId, $listenerId, OAuth2EntryPoint::class);

745) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Factory/OAuth2SecurityFactory.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPosition()
+    protected function getPosition()
     {
         return 'pre_auth';
     }
     /**
      * {@inheritdoc}
      */

746) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Factory/OAuth2SecurityFactory.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getKey()
+    protected function getKey()
     {
         return 'oauth2';
     }
     /**
      * {@inheritdoc}
      */

747) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Factory/OAuth2SecurityFactory.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addConfiguration(NodeDefinition $node)
+    protected function addConfiguration(NodeDefinition $node)
     {
         $node->children()->scalarNode('access_token_handler_manager')->info('The access token handler manager has to retrieve access tokens on demand. Access token can be find from a database, the introspection or any other method.')->isRequired()->end()->end();
     }
 }


748) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Firewall/OAuth2Listener.php:89    [M] Identical

--- Original
+++ New
@@ @@
             $accessTokenId = $this->tokenTypeManager->findToken($request, $additionalCredentialValues);
-            if (null === $accessTokenId) {
+            if (null !== $accessTokenId) {
                 return;
             }
         } catch (\Exception $e) {
             return;
         }
         try {

749) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Firewall/OAuth2Listener.php:98    [M] Identical

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenHandlerManager->find(AccessTokenId::create($accessTokenId));
-            if (null === $accessToken || true === $accessToken->isRevoked()) {
+            if (null !== $accessToken || true === $accessToken->isRevoked()) {
                 throw new AuthenticationException('Invalid access token.');
             }
             $token = new OAuth2Token($accessToken);
             $result = $this->authenticationManager->authenticate($token);
             $this->tokenStorage->setToken($result);
         } catch (AuthenticationException $e) {

750) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Firewall/OAuth2Listener.php:98    [M] TrueValue

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenHandlerManager->find(AccessTokenId::create($accessTokenId));
-            if (null === $accessToken || true === $accessToken->isRevoked()) {
+            if (null === $accessToken || false === $accessToken->isRevoked()) {
                 throw new AuthenticationException('Invalid access token.');
             }
             $token = new OAuth2Token($accessToken);
             $result = $this->authenticationManager->authenticate($token);
             $this->tokenStorage->setToken($result);
         } catch (AuthenticationException $e) {

751) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Firewall/OAuth2Listener.php:98    [M] Identical

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenHandlerManager->find(AccessTokenId::create($accessTokenId));
-            if (null === $accessToken || true === $accessToken->isRevoked()) {
+            if (null === $accessToken || true !== $accessToken->isRevoked()) {
                 throw new AuthenticationException('Invalid access token.');
             }
             $token = new OAuth2Token($accessToken);
             $result = $this->authenticationManager->authenticate($token);
             $this->tokenStorage->setToken($result);
         } catch (AuthenticationException $e) {

752) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Firewall/OAuth2Listener.php:98    [M] LogicalOr

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenHandlerManager->find(AccessTokenId::create($accessTokenId));
-            if (null === $accessToken || true === $accessToken->isRevoked()) {
+            if (null === $accessToken && true === $accessToken->isRevoked()) {
                 throw new AuthenticationException('Invalid access token.');
             }
             $token = new OAuth2Token($accessToken);
             $result = $this->authenticationManager->authenticate($token);
             $this->tokenStorage->setToken($result);
         } catch (AuthenticationException $e) {

753) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Firewall/OAuth2Listener.php:107    [M] NotIdentical

--- Original
+++ New
@@ @@
         } catch (AuthenticationException $e) {
-            if (null !== $e->getPrevious()) {
+            if (null === $e->getPrevious()) {
                 $e = $e->getPrevious();
             }
             $oauth2Response = $this->oauth2ResponseFactoryManager->getResponse(401, ['error' => 'invalid_grant', 'error_description' => $e->getMessage()]);
             $response = $oauth2Response->getResponse();
             $factory = new HttpFoundationFactory();
             $event->setResponse($factory->createResponse($response));

754) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Security/Firewall/OAuth2Listener.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(GetResponseEvent $event)
+    protected function handle(GetResponseEvent $event)
     {
         $factory = new DiactorosFactory();
         $request = $factory->createRequest($event->getRequest());
         try {
             $additionalCredentialValues = [];
             $accessTokenId = $this->tokenTypeManager->findToken($request, $additionalCredentialValues);

755) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/FormPostResponseRenderer.php:46    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function render(string $redirect_uri, array $data) : string
+    protected function render(string $redirect_uri, array $data) : string
     {
         return $this->templateEngine->render($this->template, ['redirect_uri' => $redirect_uri, 'inputs' => $data]);
     }
 }


756) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/IFrameEndpoint.php:68    [M] Foreach_

--- Original
+++ New
@@ @@
         $headers = ['Content-Type' => 'text/html; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         $response->getBody()->write($content);
         return $response;
     }
 }

757) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/IFrameEndpoint.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $content = $this->templateEngine->render($this->template, ['storage_name' => $this->storageName]);
         $response = $this->messageFactory->createResponse();
         $headers = ['Content-Type' => 'text/html; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
         foreach ($headers as $k => $v) {
             $response = $response->withHeader($k, $v);

758) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/IssuerDiscoveryFactory.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function create(ResourceRepositoryInterface $resourceManager, string $server) : IssuerDiscoveryEndpoint
+    protected function create(ResourceRepositoryInterface $resourceManager, string $server) : IssuerDiscoveryEndpoint
     {
         return new IssuerDiscoveryEndpoint($resourceManager, $this->messageFactory, $this->uriFactory, $server);
     }
 }


759) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getMetadata() : Metadata
+    protected function getMetadata() : Metadata
     {
         return $this->metadata;
     }
     /**
      * @param string $name
      * @param string $routeName

760) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setRoute(string $name, string $routeName, array $routeParameters = [])
+    protected function setRoute(string $name, string $routeName, array $routeParameters = [])
     {
         $path = $this->router->generate($routeName, $routeParameters, RouterInterface::ABSOLUTE_URL);
         $this->metadata->set($name, $path);
     }
     /**
      * @param PKCEMethodManager $PKCEMethodManager

761) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:73    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setCodeChallengeMethodsSupported(PKCEMethodManager $PKCEMethodManager)
+    protected function setCodeChallengeMethodsSupported(PKCEMethodManager $PKCEMethodManager)
     {
         $this->metadata->set('code_challenge_methods_supported', $PKCEMethodManager->names());
     }
     /**
      * @param ClientAssertionJwt $clientAssertionJwt
      */

762) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setClientAssertionJwt(ClientAssertionJwt $clientAssertionJwt)
+    protected function setClientAssertionJwt(ClientAssertionJwt $clientAssertionJwt)
     {
         $this->metadata->set('token_endpoint_auth_signing_alg_values_supported', $clientAssertionJwt->getSupportedSignatureAlgorithms());
         $this->metadata->set('token_endpoint_auth_encryption_alg_values_supported', $clientAssertionJwt->getSupportedKeyEncryptionAlgorithms());
         $this->metadata->set('token_endpoint_auth_encryption_enc_values_supported', $clientAssertionJwt->getSupportedContentEncryptionAlgorithms());
     }
     /**

763) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:91    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setGrantTypeManager(GrantTypeManager $grantTypeManager)
+    protected function setGrantTypeManager(GrantTypeManager $grantTypeManager)
     {
         $this->metadata->set('grant_types_supported', $grantTypeManager->getSupportedGrantTypes());
     }
     /**
      * @param ResponseTypeManager $responseTypeManager
      */

764) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:99    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setResponseTypeManager(ResponseTypeManager $responseTypeManager)
+    protected function setResponseTypeManager(ResponseTypeManager $responseTypeManager)
     {
         $this->metadata->set('response_types_supported', $responseTypeManager->all());
     }
     /**
      * @param ResponseModeManager $responseModeManager
      */

765) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:107    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setResponseModeManager(ResponseModeManager $responseModeManager)
+    protected function setResponseModeManager(ResponseModeManager $responseModeManager)
     {
         $this->metadata->set('response_modes_supported', $responseModeManager->all());
     }
     /**
      * @param TokenEndpointAuthMethodManager $tokenEndpointAuthMethodManager
      */

766) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:115    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setTokenEndpointAuthMethodManager(TokenEndpointAuthMethodManager $tokenEndpointAuthMethodManager)
+    protected function setTokenEndpointAuthMethodManager(TokenEndpointAuthMethodManager $tokenEndpointAuthMethodManager)
     {
         $this->metadata->set('token_endpoint_auth_methods_supported', $tokenEndpointAuthMethodManager->all());
     }
     /**
      * @param ScopeRepositoryInterface $scopeRepository
      */

767) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:123    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setScopeRepository(ScopeRepositoryInterface $scopeRepository)
+    protected function setScopeRepository(ScopeRepositoryInterface $scopeRepository)
     {
         $this->metadata->set('scopes_supported', $scopeRepository->getSupportedScopes());
     }
     /**
      * @param UserInfo $userInfo
      */

768) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:131    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setUserinfo(UserInfo $userInfo)
+    protected function setUserinfo(UserInfo $userInfo)
     {
         $this->metadata->set('subject_types_supported', $userInfo->isPairwiseSubjectIdentifierSupported() ? ['public', 'pairwise'] : ['public']);
         $this->metadata->set('claims_supported', $userInfo->getClaimsSupported());
     }
     /**
      * @param string $name

769) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:141    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addKeyValuePair(string $name, $value)
+    protected function addKeyValuePair(string $name, $value)
     {
         $this->metadata->set($name, $value);
     }
     /**
      * @param AuthorizationRequestLoader $authorizationRequestLoader
      */

770) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/MetadataBuilder.php:149    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function setAuthorizationRequestLoader(AuthorizationRequestLoader $authorizationRequestLoader)
+    protected function setAuthorizationRequestLoader(AuthorizationRequestLoader $authorizationRequestLoader)
     {
         $requestObjectSupported = $authorizationRequestLoader->isRequestObjectSupportEnabled();
         $this->metadata->set('request_parameter_supported', $authorizationRequestLoader->isRequestObjectSupportEnabled());
         if ($requestObjectSupported) {
             $this->metadata->set('request_uri_parameter_supported', $authorizationRequestLoader->isRequestObjectReferenceSupportEnabled());
             $this->metadata->set('require_request_uri_registration', $authorizationRequestLoader->isRequestUriRegistrationRequired());

771) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/RandomIdGenerator.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function generate(int $min, int $max) : string
+    protected static function generate(int $min, int $max) : string
     {
         $length = random_int($min, $max);
         return Base64Url::encode(random_bytes($length));
     }
 }


772) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SessionStateParameterExtension.php:50    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function getBrowserState(ServerRequestInterface $request, Authorization &$authorization) : string
+    private function getBrowserState(ServerRequestInterface $request, Authorization &$authorization) : string
     {
         if ($this->session->has($this->storageName)) {
             return $this->session->get($this->storageName);
         }
         $browserState = Base64Url::encode(random_bytes(64));
         $this->session->set($this->storageName, $browserState);

773) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SessionStateParameterExtension.php:67    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function calculateSessionState(ServerRequestInterface $request, Authorization $authorization, string $browserState) : string
+    private function calculateSessionState(ServerRequestInterface $request, Authorization $authorization, string $browserState) : string
     {
         $origin = $this->getOriginUri($authorization->getRedirectUri());
         $salt = Base64Url::encode(random_bytes(16));
         $hash = hash('sha256', sprintf('%s%s%s%s', $authorization->getClient()->getPublicId(), $origin, $browserState, $salt));
         return sprintf('%s.%s', $hash, $salt);
     }

774) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SymfonyUserDiscovery.php:57    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (null !== ($token = $this->tokenStorage->getToken())) {
+        if (null === ($token = $this->tokenStorage->getToken())) {
             $userAccount = $token->getUser();
             if ($userAccount instanceof UserAccountInterface) {
                 $this->checkUserAccount($userAccount, $authorization);
                 $isFullyAuthenticated = $this->authorizationChecker->isGranted('IS_AUTHENTICATED_FULLY');
                 if (true === $authorization->isUserAccountFullyAuthenticated()) {
                     $isFullyAuthenticated = true;

775) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SymfonyUserDiscovery.php:62    [M] TrueValue

--- Original
+++ New
@@ @@
                 $isFullyAuthenticated = $this->authorizationChecker->isGranted('IS_AUTHENTICATED_FULLY');
-                if (true === $authorization->isUserAccountFullyAuthenticated()) {
+                if (false === $authorization->isUserAccountFullyAuthenticated()) {
                     $isFullyAuthenticated = true;
                 }
                 $authorization = $authorization->withUserAccount($userAccount, $isFullyAuthenticated);
             }
         }
         return $next($request, $authorization);

776) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SymfonyUserDiscovery.php:62    [M] Identical

--- Original
+++ New
@@ @@
                 $isFullyAuthenticated = $this->authorizationChecker->isGranted('IS_AUTHENTICATED_FULLY');
-                if (true === $authorization->isUserAccountFullyAuthenticated()) {
+                if (true !== $authorization->isUserAccountFullyAuthenticated()) {
                     $isFullyAuthenticated = true;
                 }
                 $authorization = $authorization->withUserAccount($userAccount, $isFullyAuthenticated);
             }
         }
         return $next($request, $authorization);

777) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SymfonyUserDiscovery.php:63    [M] TrueValue

--- Original
+++ New
@@ @@
                 if (true === $authorization->isUserAccountFullyAuthenticated()) {
-                    $isFullyAuthenticated = true;
+                    $isFullyAuthenticated = false;
                 }
                 $authorization = $authorization->withUserAccount($userAccount, $isFullyAuthenticated);
             }
         }
         return $next($request, $authorization);
     }

778) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SymfonyUserDiscovery.php:55    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
+    protected function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
     {
         if (null !== ($token = $this->tokenStorage->getToken())) {
             $userAccount = $token->getUser();
             if ($userAccount instanceof UserAccountInterface) {
                 $this->checkUserAccount($userAccount, $authorization);
                 $isFullyAuthenticated = $this->authorizationChecker->isGranted('IS_AUTHENTICATED_FULLY');

779) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SymfonyUserDiscovery.php:80    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (null !== $authorization->getUserAccount() && $userAccount->getPublicId()->getValue() !== $authorization->getUserAccount()->getPublicId()->getValue()) {
+        if (null === $authorization->getUserAccount() && $userAccount->getPublicId()->getValue() !== $authorization->getUserAccount()->getPublicId()->getValue()) {
             throw new RedirectToLoginPageException($authorization);
         }
     }
 }


780) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SymfonyUserDiscovery.php:80    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (null !== $authorization->getUserAccount() && $userAccount->getPublicId()->getValue() !== $authorization->getUserAccount()->getPublicId()->getValue()) {
+        if (null !== $authorization->getUserAccount() && $userAccount->getPublicId()->getValue() === $authorization->getUserAccount()->getPublicId()->getValue()) {
             throw new RedirectToLoginPageException($authorization);
         }
     }
 }


781) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/Service/SymfonyUserDiscovery.php:80    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
-        if (null !== $authorization->getUserAccount() && $userAccount->getPublicId()->getValue() !== $authorization->getUserAccount()->getPublicId()->getValue()) {
+        if (null !== $authorization->getUserAccount() || $userAccount->getPublicId()->getValue() !== $authorization->getUserAccount()->getPublicId()->getValue()) {
             throw new RedirectToLoginPageException($authorization);
         }
     }
 }


782) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/TokenEndpointAuthMethod/ClientAssertionJwt.php:24    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function createClientSecret() : string
+    private function createClientSecret() : string
     {
         return Base64Url::encode(random_bytes(64));
     }
 }


783) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/TokenEndpointAuthMethod/ClientSecretBasic.php:24    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function createClientSecret() : string
+    private function createClientSecret() : string
     {
         return Base64Url::encode(random_bytes(64));
     }
 }


784) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/TokenEndpointAuthMethod/ClientSecretPost.php:24    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function createClientSecret() : string
+    private function createClientSecret() : string
     {
         return Base64Url::encode(random_bytes(64));
     }
 }


785) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Bundle/Server/TokenType/MacToken.php:49    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function generateMacKey() : string
+    private function generateMacKey() : string
     {
         return Base64Url::encode(random_bytes($this->getMacKeyLength()));
     }
     /**
      * @return int
      */

786) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:170    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getQueryParam(string $key)
+    protected function getQueryParam(string $key)
     {
         if ($this->hasQueryParams($key)) {
             throw new \RuntimeException(sprintf('Query parameter with key "%s" does not exist.', $key));
         }
         return $this->queryParameters[$key];
     }

787) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:184    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasQueryParams(string $key) : bool
+    protected function hasQueryParams(string $key) : bool
     {
         return array_key_exists($key, $this->getQueryParams());
     }
     /**
      * @return string
      */

788) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCode.php:204    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function toArray() : array
+    protected function toArray() : array
     {
         return ['code' => $this->getTokenId()->getValue()];
     }
     /**
      * {@inheritdoc}
      */

789) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:146    [M] LogicalNot

--- Original
+++ New
@@ @@
         if (true === $client->isPublic()) {
-            if (!array_key_exists('client_id', $parameters) || $client->getPublicId()->getValue() !== $parameters['client_id']) {
+            if (array_key_exists('client_id', $parameters) || $client->getPublicId()->getValue() !== $parameters['client_id']) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The "client_id" parameter is required for non-confidential clients.');
             }
         }
     }
     /**
      * @param AuthorizationCode $authorizationCode

790) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:146    [M] NotIdentical

--- Original
+++ New
@@ @@
         if (true === $client->isPublic()) {
-            if (!array_key_exists('client_id', $parameters) || $client->getPublicId()->getValue() !== $parameters['client_id']) {
+            if (!array_key_exists('client_id', $parameters) || $client->getPublicId()->getValue() === $parameters['client_id']) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The "client_id" parameter is required for non-confidential clients.');
             }
         }
     }
     /**
      * @param AuthorizationCode $authorizationCode

791) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeGrantType.php:146    [M] LogicalOr

--- Original
+++ New
@@ @@
         if (true === $client->isPublic()) {
-            if (!array_key_exists('client_id', $parameters) || $client->getPublicId()->getValue() !== $parameters['client_id']) {
+            if (!array_key_exists('client_id', $parameters) && $client->getPublicId()->getValue() !== $parameters['client_id']) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The "client_id" parameter is required for non-confidential clients.');
             }
         }
     }
     /**
      * @param AuthorizationCode $authorizationCode

792) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:93    [M] TrueValue

--- Original
+++ New
@@ @@
         if (!array_key_exists('code_challenge', $queryParams)) {
-            if (true === $this->pkceForPublicClientsEnforced && $authorization->getClient()->isPublic()) {
+            if (false === $this->pkceForPublicClientsEnforced && $authorization->getClient()->isPublic()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Non-confidential clients must set a proof key (PKCE) for code exchange.');
             }
         } else {
             $codeChallengeMethod = array_key_exists('code_challenge_method', $queryParams) ? $queryParams['code_challenge_method'] : 'plain';
             if (!$this->pkceMethodManager->has($codeChallengeMethod)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('The challenge method "%s" is not supported.', $codeChallengeMethod));

793) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:93    [M] Identical

--- Original
+++ New
@@ @@
         if (!array_key_exists('code_challenge', $queryParams)) {
-            if (true === $this->pkceForPublicClientsEnforced && $authorization->getClient()->isPublic()) {
+            if (true !== $this->pkceForPublicClientsEnforced && $authorization->getClient()->isPublic()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Non-confidential clients must set a proof key (PKCE) for code exchange.');
             }
         } else {
             $codeChallengeMethod = array_key_exists('code_challenge_method', $queryParams) ? $queryParams['code_challenge_method'] : 'plain';
             if (!$this->pkceMethodManager->has($codeChallengeMethod)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('The challenge method "%s" is not supported.', $codeChallengeMethod));

794) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeResponseType.php:93    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (!array_key_exists('code_challenge', $queryParams)) {
-            if (true === $this->pkceForPublicClientsEnforced && $authorization->getClient()->isPublic()) {
+            if (true === $this->pkceForPublicClientsEnforced || $authorization->getClient()->isPublic()) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Non-confidential clients must set a proof key (PKCE) for code exchange.');
             }
         } else {
             $codeChallengeMethod = array_key_exists('code_challenge_method', $queryParams) ? $queryParams['code_challenge_method'] : 'plain';
             if (!$this->pkceMethodManager->has($codeChallengeMethod)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('The challenge method "%s" is not supported.', $codeChallengeMethod));

795) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/AuthorizationCodeTypeHint.php:81    [M] FalseValue

--- Original
+++ New
@@ @@
         if ($token->isRevoked()) {
-            return ['active' => false];
+            return ['active' => true];
         }
         $result = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'exp' => $token->getExpiresAt()->getTimestamp()];
         if (!empty($token->getScopes())) {
             $result['scp'] = $token->getScopes();
         }
         return $result;

796) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:112    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/authorization-code/created/1.0/schema';
     }
     /**
      * @param AuthorizationCodeId   $authorizationCodeId
      * @param ClientId              $clientId

797) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:219    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getAuthorizationCodeId();
     }
     /**
      * {@inheritdoc}
      */

798) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeCreatedEvent.php:227    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['user_account_id' => $this->userAccountId->getValue(), 'client_id' => $this->clientId->getValue(), 'expires_at' => $this->expiresAt->getTimestamp(), 'parameters' => (object) $this->parameters->all(), 'metadatas' => (object) $this->metadatas->all(), 'scopes' => $this->scopes, 'redirect_uri' => $this->redirectUri, 'query_parameters' => (object) $this->queryParameters, 'resource_server_id' => $this->resourceServerId ? $this->resourceServerId->getValue() : null];
     }
     /**
      * {@inheritdoc}
      */

799) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeMarkedAsUsedEvent.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/authorization-code/marked-as-used/1.0/schema';
     }
     /**
      * @param AuthorizationCodeId $authorizationCodeId
      *

800) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeMarkedAsUsedEvent.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
     }
     /**
      * {@inheritdoc}
      */
     public static function createFromJson(\stdClass $json) : DomainObject

801) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeRevokedEvent.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/authorization-code/revoked/1.0/schema';
     }
     /**
      * @param AuthorizationCodeId $authorizationCodeId
      *

802) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationCodeGrant/Event/AuthorizationCodeRevokedEvent.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
     }
     /**
      * {@inheritdoc}
      */
     public static function createFromJson(\stdClass $json) : DomainObject

803) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AfterConsentScreen/AfterConsentScreenManager.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(AfterConsentScreen $extension)
+    protected function add(AfterConsentScreen $extension)
     {
         $this->extensions[] = $extension;
     }
     /**
      * @param ServerRequestInterface $request
      * @param Authorization          $authorization

804) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AfterConsentScreen/AfterConsentScreenManager.php:42    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($this->extensions as $extension) {
+        foreach (array() as $extension) {
             $authorization = $extension->process($request, $authorization);
         }
         return $authorization;
     }
 }


805) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AfterConsentScreen/AfterConsentScreenManager.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
+    protected function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
     {
         foreach ($this->extensions as $extension) {
             $authorization = $extension->process($request, $authorization);
         }
         return $authorization;
     }

806) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AfterConsentScreen/PreConfiguredAuthorizationExtension.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
+    protected function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
     {
         /*if (!array_key_exists('save_authorization', $form_data) || true !== $form_data['save_authorization']) {
                     return;
                 }
         
                 $configuration = $this->preConfiguredAuthorizationRepository->create(

807) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AfterConsentScreen/SessionStateParameterExtension.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
+    protected function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
     {
         if ($authorization->hasScope('openid')) {
             $browserState = $this->getBrowserState($request, $authorization);
             $sessionState = $this->calculateSessionState($request, $authorization, $browserState);
             $authorization = $authorization->withResponseParameter('session_state', $sessionState);
         }

808) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:135    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasQueryParam(string $param) : bool
+    protected function hasQueryParam(string $param) : bool
     {
         return array_key_exists($param, $this->queryParameters);
     }
     /**
      * @param string $param
      *

809) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:147    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->hasQueryParam($param)) {
+        if ($this->hasQueryParam($param)) {
             throw new \InvalidArgumentException(sprintf('Invalid parameter "%s".', $param));
         }
         return $this->queryParameters[$param];
     }
     /**
      * @return Client

810) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:145    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getQueryParam(string $param)
+    protected function getQueryParam(string $param)
     {
         if (!$this->hasQueryParam($param)) {
             throw new \InvalidArgumentException(sprintf('Invalid parameter "%s".', $param));
         }
         return $this->queryParameters[$param];
     }

811) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:188    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withResponseTypes(array $responseTypes) : self
+    protected function withResponseTypes(array $responseTypes) : self
     {
         $clone = clone $this;
         $clone->responseTypes = $responseTypes;
         return $clone;
     }
     /**

812) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:199    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponseTypes() : array
+    protected function getResponseTypes() : array
     {
         return $this->responseTypes;
     }
     /**
      * @param ResponseMode $responseMode
      *

813) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:209    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withResponseMode(ResponseMode $responseMode) : self
+    protected function withResponseMode(ResponseMode $responseMode) : self
     {
         $clone = clone $this;
         $clone->responseMode = $responseMode;
         return $clone;
     }
     /**

814) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:220    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponseMode() : ?ResponseMode
+    protected function getResponseMode() : ?ResponseMode
     {
         return $this->responseMode;
     }
     /**
      * @param string $redirectUri
      *

815) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:321    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withResponseHeader(string $responseHeader, $value) : self
+    protected function withResponseHeader(string $responseHeader, $value) : self
     {
         $clone = clone $this;
         $clone->responseHeaders[$responseHeader] = $value;
         return $clone;
     }
     /**

816) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:332    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponseHeaders() : array
+    protected function getResponseHeaders() : array
     {
         return $this->responseHeaders;
     }
     /**
      * @return bool|null
      */

817) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:340    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isUserAccountFullyAuthenticated() : ?bool
+    protected function isUserAccountFullyAuthenticated() : ?bool
     {
         return $this->userAccountFullyAuthenticated;
     }
     /**
      * @return string[]
      */

818) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:350    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->hasQueryParam('prompt')) {
+        if ($this->hasQueryParam('prompt')) {
             return [];
         }
         return explode(' ', $this->getQueryParam('prompt'));
     }
     /**
      * @return bool

819) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:348    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPrompt() : array
+    protected function getPrompt() : array
     {
         if (!$this->hasQueryParam('prompt')) {
             return [];
         }
         return explode(' ', $this->getQueryParam('prompt'));
     }

820) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:360    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasUiLocales() : bool
+    protected function hasUiLocales() : bool
     {
         return $this->hasQueryParam('ui_locales');
     }
     /**
      * @return string[]
      */

821) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:368    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getUiLocales() : array
+    protected function getUiLocales() : array
     {
         return $this->hasQueryParam('ui_locales') ? explode(' ', $this->getQueryParam('ui_locales')) : [];
     }
     /**
      * @param string $prompt
      *

822) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:378    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasPrompt(string $prompt) : bool
+    protected function hasPrompt(string $prompt) : bool
     {
         return in_array($prompt, $this->getPrompt());
     }
     /**
      * @param array $scope
      *

823) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:388    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withScopes(array $scope) : self
+    protected function withScopes(array $scope) : self
     {
         $clone = clone $this;
         $clone->scopes = $scope;
         return $clone;
     }
     /**

824) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:411    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        return null !== $this->scopes && in_array($scope, $this->scopes);
+        return null === $this->scopes && in_array($scope, $this->scopes);
     }
     /**
      * @param string $scope
      *
      * @return Authorization
      */

825) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:411    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
-        return null !== $this->scopes && in_array($scope, $this->scopes);
+        return null !== $this->scopes || in_array($scope, $this->scopes);
     }
     /**
      * @param string $scope
      *
      * @return Authorization
      */

826) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:409    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasScope(string $scope) : bool
+    protected function hasScope(string $scope) : bool
     {
         return null !== $this->scopes && in_array($scope, $this->scopes);
     }
     /**
      * @param string $scope
      *

827) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:421    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->hasScope($scope)) {
+        if ($this->hasScope($scope)) {
             return $this;
         }
         $clone = clone $this;
         unset($clone->scopes[array_search($scope, $clone->scopes)]);
         return $clone;
     }

828) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:419    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withoutScope(string $scope) : self
+    protected function withoutScope(string $scope) : self
     {
         if (!$this->hasScope($scope)) {
             return $this;
         }
         $clone = clone $this;
         unset($clone->scopes[array_search($scope, $clone->scopes)]);

829) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:435    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addScope(string $scope) : self
+    protected function addScope(string $scope) : self
     {
         if ($this->hasScope($scope)) {
             return $this;
         }
         $clone = clone $this;
         $clone->scopes[] = $scope;

830) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:449    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isAuthorized() : ?bool
+    protected function isAuthorized() : ?bool
     {
         return $this->authorized;
     }
     /**
      * @return Authorization
      */

831) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:460    [M] TrueValue

--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->authorized = true;
+        $clone->authorized = false;
         return $clone;
     }
     /**
      * @return Authorization
      */
     public function deny() : self

832) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:457    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function allow() : self
+    protected function allow() : self
     {
         $clone = clone $this;
         $clone->authorized = true;
         return $clone;
     }
     /**

833) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:471    [M] FalseValue

--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->authorized = false;
+        $clone->authorized = true;
         return $clone;
     }
     /**
      * @param string $key
      *
      * @return bool

834) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:468    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function deny() : self
+    protected function deny() : self
     {
         $clone = clone $this;
         $clone->authorized = false;
         return $clone;
     }
     /**

835) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:481    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasData(string $key) : bool
+    protected function hasData(string $key) : bool
     {
         return array_key_exists($key, $this->data);
     }
     /**
      * @param string $key
      *

836) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:493    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->hasData($key)) {
+        if ($this->hasData($key)) {
             throw new \InvalidArgumentException(sprintf('Invalid data "%s".', $key));
         }
         return $this->data[$key];
     }
     /**
      * @param string $key

837) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:491    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getData(string $key)
+    protected function getData(string $key)
     {
         if (!$this->hasData($key)) {
             throw new \InvalidArgumentException(sprintf('Invalid data "%s".', $key));
         }
         return $this->data[$key];
     }

838) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:506    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withData(string $key, $data) : self
+    protected function withData(string $key, $data) : self
     {
         $clone = clone $this;
         $clone->data[$key] = $data;
         return $clone;
     }
     /**

839) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:527    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withResourceServer(ResourceServer $resourceServer) : self
+    protected function withResourceServer(ResourceServer $resourceServer) : self
     {
         $clone = clone $this;
         $clone->resourceServer = $resourceServer;
         return $clone;
     }
     /**

840) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:541    [M] LogicalNot

--- Original
+++ New
@@ @@
         // The scope offline_access is not requested
-        if (!in_array('offline_access', $this->getScopes())) {
+        if (in_array('offline_access', $this->getScopes())) {
             return false;
         }
         // The scope offline_access is requested but prompt is not consent
         // The scope offline_access is ignored
         if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
             return false;

841) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:542    [M] FalseValue

--- Original
+++ New
@@ @@
         if (!in_array('offline_access', $this->getScopes())) {
-            return false;
+            return true;
         }
         // The scope offline_access is requested but prompt is not consent
         // The scope offline_access is ignored
         if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
             return false;
         }

842) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:547    [M] LogicalNot

--- Original
+++ New
@@ @@
         // The scope offline_access is ignored
-        if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
+        if ($this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
             return false;
         }
         return true;
     }
     /**
      * @param string $option

843) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:547    [M] FalseValue

--- Original
+++ New
@@ @@
         // The scope offline_access is ignored
-        if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
+        if (!$this->hasQueryParam('prompt') || true === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
             return false;
         }
         return true;
     }
     /**
      * @param string $option

844) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:547    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         // The scope offline_access is ignored
-        if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
+        if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 1, '8bit')) {
             return false;
         }
         return true;
     }
     /**
      * @param string $option

845) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:547    [M] Identical

--- Original
+++ New
@@ @@
         // The scope offline_access is ignored
-        if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
+        if (!$this->hasQueryParam('prompt') || false !== mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
             return false;
         }
         return true;
     }
     /**
      * @param string $option

846) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:547    [M] LogicalOr

--- Original
+++ New
@@ @@
         // The scope offline_access is ignored
-        if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
+        if (!$this->hasQueryParam('prompt') && false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
             return false;
         }
         return true;
     }
     /**
      * @param string $option

847) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:548    [M] FalseValue

--- Original
+++ New
@@ @@
         if (!$this->hasQueryParam('prompt') || false === mb_strpos('consent', $this->getQueryParam('prompt'), 0, '8bit')) {
-            return false;
+            return true;
         }
         return true;
     }
     /**
      * @param string $option
      * @param mixed  $value

848) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:551    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        return true;
+        return false;
     }
     /**
      * @param string $option
      * @param mixed  $value
      *
      * @return Authorization

849) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:538    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasOfflineAccess() : bool
+    protected function hasOfflineAccess() : bool
     {
         // The scope offline_access is not requested
         if (!in_array('offline_access', $this->getScopes())) {
             return false;
         }
         // The scope offline_access is requested but prompt is not consent

850) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:560    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withConsentScreenOption(string $option, $value) : self
+    protected function withConsentScreenOption(string $option, $value) : self
     {
         $clone = clone $this;
         $clone->consentScreenOptions[$option] = $value;
         return $clone;
     }
     /**

851) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:575    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!array_key_exists($option, $this->consentScreenOptions)) {
+        if (array_key_exists($option, $this->consentScreenOptions)) {
             return $this;
         }
         $clone = clone $this;
         unset($clone->consentScreenOptions[$option]);
         return $clone;
     }

852) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Authorization.php:573    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withoutConsentScreenOption(string $option) : self
+    protected function withoutConsentScreenOption(string $option) : self
     {
         if (!array_key_exists($option, $this->consentScreenOptions)) {
             return $this;
         }
         $clone = clone $this;
         unset($clone->consentScreenOptions[$option]);

853) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:88    [M] Identical

--- Original
+++ New
@@ @@
             $authorization = $this->userAccountDiscoveryManager->find($request, $authorization);
-            if (null === $authorization->getUserAccount()) {
+            if (null !== $authorization->getUserAccount()) {
                 return $this->redirectToLoginPage($authorization, $request);
             }
             $authorization = $this->beforeConsentScreenManager->process($request, $authorization);
             return $this->processConsentScreen($request, $authorization);
         } catch (OAuth2Exception $e) {
             $data = $e->getData();

854) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:97    [M] NotIdentical

--- Original
+++ New
@@ @@
             $data = $e->getData();
-            if (null !== $e->getAuthorization()) {
+            if (null === $e->getAuthorization()) {
                 $redirectUri = $e->getAuthorization()->getRedirectUri();
                 $responseMode = $e->getAuthorization()->getResponseMode();
                 if (null !== $redirectUri && null !== $responseMode) {
                     $data['redirect_uri'] = $redirectUri;
                     $data['response_mode'] = $responseMode;
                     throw new OAuth2Exception(302, $data, $e->getAuthorization(), $e);

855) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:100    [M] NotIdentical

--- Original
+++ New
@@ @@
                 $responseMode = $e->getAuthorization()->getResponseMode();
-                if (null !== $redirectUri && null !== $responseMode) {
+                if (null === $redirectUri && null !== $responseMode) {
                     $data['redirect_uri'] = $redirectUri;
                     $data['response_mode'] = $responseMode;
                     throw new OAuth2Exception(302, $data, $e->getAuthorization(), $e);
                 }
             }
             throw $e;

856) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:100    [M] NotIdentical

--- Original
+++ New
@@ @@
                 $responseMode = $e->getAuthorization()->getResponseMode();
-                if (null !== $redirectUri && null !== $responseMode) {
+                if (null !== $redirectUri && null === $responseMode) {
                     $data['redirect_uri'] = $redirectUri;
                     $data['response_mode'] = $responseMode;
                     throw new OAuth2Exception(302, $data, $e->getAuthorization(), $e);
                 }
             }
             throw $e;

857) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:100    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 $responseMode = $e->getAuthorization()->getResponseMode();
-                if (null !== $redirectUri && null !== $responseMode) {
+                if (null !== $redirectUri || null !== $responseMode) {
                     $data['redirect_uri'] = $redirectUri;
                     $data['response_mode'] = $responseMode;
                     throw new OAuth2Exception(302, $data, $e->getAuthorization(), $e);
                 }
             }
             throw $e;

858) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:112    [M] FalseValue

--- Original
+++ New
@@ @@
             $authorization = $this->afterConsentScreenManager->process($request, $authorization);
-            if (false === $authorization->isAuthorized()) {
+            if (true === $authorization->isAuthorized()) {
                 $this->throwRedirectionException($authorization, OAuth2Exception::ERROR_ACCESS_DENIED, 'The resource owner denied access to your client.');
             }
             $responseTypeProcessor = ResponseTypeProcessor::create($authorization);
             try {
                 $authorization = $responseTypeProcessor->process();
             } catch (OAuth2Exception $e) {

859) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:112    [M] Identical

--- Original
+++ New
@@ @@
             $authorization = $this->afterConsentScreenManager->process($request, $authorization);
-            if (false === $authorization->isAuthorized()) {
+            if (false !== $authorization->isAuthorized()) {
                 $this->throwRedirectionException($authorization, OAuth2Exception::ERROR_ACCESS_DENIED, 'The resource owner denied access to your client.');
             }
             $responseTypeProcessor = ResponseTypeProcessor::create($authorization);
             try {
                 $authorization = $responseTypeProcessor->process();
             } catch (OAuth2Exception $e) {

860) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:82    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         try {
             $authorization = $this->authorizationFactory->createAuthorizationFromRequest($request);
             $authorization = $this->userAccountDiscoveryManager->find($request, $authorization);
             if (null === $authorization->getUserAccount()) {
                 return $this->redirectToLoginPage($authorization, $request);

861) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:143    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $authorization->getResponseMode() || null === $authorization->getRedirectUri()) {
+        if (null !== $authorization->getResponseMode() || null === $authorization->getRedirectUri()) {
             throw new OAuth2Exception(400, ['error' => 'EEE', 'error_description' => 'FFF']);
         }
         $response = $authorization->getResponseMode()->buildResponse($authorization->getRedirectUri(), $authorization->getResponseParameters());
         foreach ($authorization->getResponseHeaders() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }

862) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:143    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $authorization->getResponseMode() || null === $authorization->getRedirectUri()) {
+        if (null === $authorization->getResponseMode() || null !== $authorization->getRedirectUri()) {
             throw new OAuth2Exception(400, ['error' => 'EEE', 'error_description' => 'FFF']);
         }
         $response = $authorization->getResponseMode()->buildResponse($authorization->getRedirectUri(), $authorization->getResponseParameters());
         foreach ($authorization->getResponseHeaders() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }

863) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:143    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (null === $authorization->getResponseMode() || null === $authorization->getRedirectUri()) {
+        if (null === $authorization->getResponseMode() && null === $authorization->getRedirectUri()) {
             throw new OAuth2Exception(400, ['error' => 'EEE', 'error_description' => 'FFF']);
         }
         $response = $authorization->getResponseMode()->buildResponse($authorization->getRedirectUri(), $authorization->getResponseParameters());
         foreach ($authorization->getResponseHeaders() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }

864) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:151    [M] Foreach_

--- Original
+++ New
@@ @@
         $response = $authorization->getResponseMode()->buildResponse($authorization->getRedirectUri(), $authorization->getResponseParameters());
-        foreach ($authorization->getResponseHeaders() as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
     /**
      * @param Authorization $authorization

865) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:168    [M] Identical

--- Original
+++ New
@@ @@
         $params = $authorization->getResponseParameters();
-        if (null === $authorization->getResponseMode() || null === $authorization->getRedirectUri()) {
+        if (null !== $authorization->getResponseMode() || null === $authorization->getRedirectUri()) {
             throw new OAuth2Exception(400, $error, $error_description, $params);
         }
         $params += ['response_mode' => $authorization->getResponseMode(), 'redirect_uri' => $authorization->getRedirectUri()];
         throw new OAuth2Exception(302, $error, $error_description, $params);
     }
 }

866) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:168    [M] Identical

--- Original
+++ New
@@ @@
         $params = $authorization->getResponseParameters();
-        if (null === $authorization->getResponseMode() || null === $authorization->getRedirectUri()) {
+        if (null === $authorization->getResponseMode() || null !== $authorization->getRedirectUri()) {
             throw new OAuth2Exception(400, $error, $error_description, $params);
         }
         $params += ['response_mode' => $authorization->getResponseMode(), 'redirect_uri' => $authorization->getRedirectUri()];
         throw new OAuth2Exception(302, $error, $error_description, $params);
     }
 }

867) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:168    [M] LogicalOr

--- Original
+++ New
@@ @@
         $params = $authorization->getResponseParameters();
-        if (null === $authorization->getResponseMode() || null === $authorization->getRedirectUri()) {
+        if (null === $authorization->getResponseMode() && null === $authorization->getRedirectUri()) {
             throw new OAuth2Exception(400, $error, $error_description, $params);
         }
         $params += ['response_mode' => $authorization->getResponseMode(), 'redirect_uri' => $authorization->getRedirectUri()];
         throw new OAuth2Exception(302, $error, $error_description, $params);
     }
 }

868) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationEndpoint.php:171    [M] PlusEqual

--- Original
+++ New
@@ @@
         }
-        $params += ['response_mode' => $authorization->getResponseMode(), 'redirect_uri' => $authorization->getRedirectUri()];
+        $params -= ['response_mode' => $authorization->getResponseMode(), 'redirect_uri' => $authorization->getRedirectUri()];
         throw new OAuth2Exception(302, $error, $error_description, $params);
     }
 }


869) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationFactory.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createAuthorizationFromRequest(ServerRequestInterface $request) : Authorization
+    protected function createAuthorizationFromRequest(ServerRequestInterface $request) : Authorization
     {
         list($client, $queryParameters) = $this->authorizationRequestLoader->loadParametersFromRequest($request);
         $authorization = Authorization::create($client, $queryParameters);
         $authorization = $this->parameterCheckerManager->process($authorization);
         return $authorization;
     }

870) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:99    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isRequestUriRegistrationRequired() : bool
+    protected function isRequestUriRegistrationRequired() : bool
     {
         return $this->requireRequestUriRegistration;
     }
     /**
      * @return bool
      */

871) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:107    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isRequestObjectSupportEnabled() : bool
+    protected function isRequestObjectSupportEnabled() : bool
     {
         return $this->requestObjectAllowed;
     }
     /**
      * @return bool
      */

872) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:115    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isRequestObjectReferenceSupportEnabled() : bool
+    protected function isRequestObjectReferenceSupportEnabled() : bool
     {
         return $this->requestObjectReferenceAllowed;
     }
     /**
      * @return string[]
      */

873) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:125    [M] Identical

--- Original
+++ New
@@ @@
     {
-        return null === $this->jwsLoader ? [] : $this->jwsLoader->getSignatureAlgorithmManager()->list();
+        return null !== $this->jwsLoader ? [] : $this->jwsLoader->getSignatureAlgorithmManager()->list();
     }
     /**
      * @return string[]
      */
     public function getSupportedKeyEncryptionAlgorithms() : array
     {

874) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:123    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedSignatureAlgorithms() : array
+    protected function getSupportedSignatureAlgorithms() : array
     {
         return null === $this->jwsLoader ? [] : $this->jwsLoader->getSignatureAlgorithmManager()->list();
     }
     /**
      * @return string[]
      */

875) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:133    [M] Identical

--- Original
+++ New
@@ @@
     {
-        return null === $this->jweLoader ? [] : $this->jweLoader->getKeyEncryptionAlgorithmManager()->list();
+        return null !== $this->jweLoader ? [] : $this->jweLoader->getKeyEncryptionAlgorithmManager()->list();
     }
     /**
      * @return string[]
      */
     public function getSupportedContentEncryptionAlgorithms() : array
     {

876) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:131    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedKeyEncryptionAlgorithms() : array
+    protected function getSupportedKeyEncryptionAlgorithms() : array
     {
         return null === $this->jweLoader ? [] : $this->jweLoader->getKeyEncryptionAlgorithmManager()->list();
     }
     /**
      * @return string[]
      */

877) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:141    [M] Identical

--- Original
+++ New
@@ @@
     {
-        return null === $this->jweLoader ? [] : $this->jweLoader->getContentEncryptionAlgorithmManager()->list();
+        return null !== $this->jweLoader ? [] : $this->jweLoader->getContentEncryptionAlgorithmManager()->list();
     }
     /**
      * @param JWSLoader           $jwsLoader
      * @param ClaimCheckerManager $claimCheckerManager
      * @param string[]            $mandatoryClaims
      */

878) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:139    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedContentEncryptionAlgorithms() : array
+    protected function getSupportedContentEncryptionAlgorithms() : array
     {
         return null === $this->jweLoader ? [] : $this->jweLoader->getContentEncryptionAlgorithmManager()->list();
     }
     /**
      * @param JWSLoader           $jwsLoader
      * @param ClaimCheckerManager $claimCheckerManager

879) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:154    [M] TrueValue

--- Original
+++ New
@@ @@
         $this->claimCheckerManager = $claimCheckerManager;
-        $this->requestObjectAllowed = true;
+        $this->requestObjectAllowed = false;
         $this->mandatoryClaims = $mandatoryClaims;
     }
     /**
      * @param HttpClient $client
      * @param bool       $requireRequestUriRegistration
      */

880) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:149    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enableRequestObjectSupport(JWSLoader $jwsLoader, ClaimCheckerManager $claimCheckerManager, array $mandatoryClaims = [])
+    protected function enableRequestObjectSupport(JWSLoader $jwsLoader, ClaimCheckerManager $claimCheckerManager, array $mandatoryClaims = [])
     {
         Assertion::allString($mandatoryClaims, 'The mandatory claims array should contain only claims.');
         $this->jwsLoader = $jwsLoader;
         $this->claimCheckerManager = $claimCheckerManager;
         $this->requestObjectAllowed = true;
         $this->mandatoryClaims = $mandatoryClaims;

881) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:165    [M] TrueValue

--- Original
+++ New
@@ @@
         Assertion::true($this->isRequestObjectSupportEnabled(), 'Request object support must be enabled first.');
-        $this->requestObjectReferenceAllowed = true;
+        $this->requestObjectReferenceAllowed = false;
         $this->requireRequestUriRegistration = $requireRequestUriRegistration;
         $this->client = $client;
     }
     /**
      * @param JWELoader $jweLoader
      * @param JWKSet    $keyEncryptionKeySet

882) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:162    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enableRequestObjectReferenceSupport(HttpClient $client, bool $requireRequestUriRegistration)
+    protected function enableRequestObjectReferenceSupport(HttpClient $client, bool $requireRequestUriRegistration)
     {
         Assertion::true($this->isRequestObjectSupportEnabled(), 'Request object support must be enabled first.');
         $this->requestObjectReferenceAllowed = true;
         $this->requireRequestUriRegistration = $requireRequestUriRegistration;
         $this->client = $client;
     }

883) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:178    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         Assertion::true($this->isRequestObjectSupportEnabled(), 'Request object support must be enabled first.');
-        Assertion::greaterThan($keyEncryptionKeySet->count(), 0, 'The encryption key set must have at least one key.');
+        Assertion::greaterThan($keyEncryptionKeySet->count(), 1, 'The encryption key set must have at least one key.');
         $this->jweLoader = $jweLoader;
         $this->requireEncryption = $requireEncryption;
         $this->keyEncryptionKeySet = $keyEncryptionKeySet;
     }
     /**
      * @return bool

884) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:175    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enableEncryptedRequestObjectSupport(JWELoader $jweLoader, JWKSet $keyEncryptionKeySet, bool $requireEncryption)
+    protected function enableEncryptedRequestObjectSupport(JWELoader $jweLoader, JWKSet $keyEncryptionKeySet, bool $requireEncryption)
     {
         Assertion::true($this->isRequestObjectSupportEnabled(), 'Request object support must be enabled first.');
         Assertion::greaterThan($keyEncryptionKeySet->count(), 0, 'The encryption key set must have at least one key.');
         $this->jweLoader = $jweLoader;
         $this->requireEncryption = $requireEncryption;
         $this->keyEncryptionKeySet = $keyEncryptionKeySet;

885) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:189    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        return null !== $this->keyEncryptionKeySet;
+        return null === $this->keyEncryptionKeySet;
     }
     /**
      * @param ServerRequestInterface $request
      *
      * @return array
      */

886) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:187    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isEncryptedRequestsSupportEnabled() : bool
+    protected function isEncryptedRequestsSupportEnabled() : bool
     {
         return null !== $this->keyEncryptionKeySet;
     }
     /**
      * @param ServerRequestInterface $request
      *

887) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:197    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function loadParametersFromRequest(ServerRequestInterface $request) : array
+    protected function loadParametersFromRequest(ServerRequestInterface $request) : array
     {
         $params = $request->getQueryParams();
         if (array_key_exists('request', $params)) {
             $params = $this->createFromRequestParameter($params);
         } elseif (array_key_exists('request_uri', $params)) {
             $params = $this->createFromRequestUriParameter($params);

888) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:223    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        if (false === $this->isRequestObjectSupportEnabled()) {
+        if (true === $this->isRequestObjectSupportEnabled()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_REQUEST_NOT_SUPPORTED, 'The parameter "request" is not supported.');
         }
         $request = $params['request'];
         Assertion::string($request);
         $jws = $this->loadRequest($params, $request, $client);
         $claims = json_decode($jws->getPayload(), true);

889) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:223    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (false === $this->isRequestObjectSupportEnabled()) {
+        if (false !== $this->isRequestObjectSupportEnabled()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_REQUEST_NOT_SUPPORTED, 'The parameter "request" is not supported.');
         }
         $request = $params['request'];
         Assertion::string($request);
         $jws = $this->loadRequest($params, $request, $client);
         $claims = json_decode($jws->getPayload(), true);

890) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:230    [M] TrueValue

--- Original
+++ New
@@ @@
         $jws = $this->loadRequest($params, $request, $client);
-        $claims = json_decode($jws->getPayload(), true);
+        $claims = json_decode($jws->getPayload(), false);
         $params = array_merge($params, $claims, ['client' => $client]);
         $this->checkIssuerAndClientId($params);
         return $params;
     }
     /**
      * @param array $params

891) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:258    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        if (false === $this->isRequestObjectReferenceSupportEnabled()) {
+        if (true === $this->isRequestObjectReferenceSupportEnabled()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_REQUEST_URI_NOT_SUPPORTED, 'The parameter "request_uri" is not supported.');
         }
         $requestUri = $params['request_uri'];
         $content = $this->downloadContent($requestUri);
         $jws = $this->loadRequest($params, $content, $client);
         if (true === $this->isRequestUriRegistrationRequired()) {

892) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:258    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (false === $this->isRequestObjectReferenceSupportEnabled()) {
+        if (false !== $this->isRequestObjectReferenceSupportEnabled()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_REQUEST_URI_NOT_SUPPORTED, 'The parameter "request_uri" is not supported.');
         }
         $requestUri = $params['request_uri'];
         $content = $this->downloadContent($requestUri);
         $jws = $this->loadRequest($params, $content, $client);
         if (true === $this->isRequestUriRegistrationRequired()) {

893) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:265    [M] TrueValue

--- Original
+++ New
@@ @@
         $jws = $this->loadRequest($params, $content, $client);
-        if (true === $this->isRequestUriRegistrationRequired()) {
+        if (false === $this->isRequestUriRegistrationRequired()) {
             $this->checkRequestUri($client, $requestUri);
         }
         $claims = json_decode($jws->getPayload(), true);
         $params = array_merge($params, $claims, ['client' => $client]);
         $this->checkIssuerAndClientId($params);
         return $params;

894) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:265    [M] Identical

--- Original
+++ New
@@ @@
         $jws = $this->loadRequest($params, $content, $client);
-        if (true === $this->isRequestUriRegistrationRequired()) {
+        if (true !== $this->isRequestUriRegistrationRequired()) {
             $this->checkRequestUri($client, $requestUri);
         }
         $claims = json_decode($jws->getPayload(), true);
         $params = array_merge($params, $claims, ['client' => $client]);
         $this->checkIssuerAndClientId($params);
         return $params;

895) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:268    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        $claims = json_decode($jws->getPayload(), true);
+        $claims = json_decode($jws->getPayload(), false);
         $params = array_merge($params, $claims, ['client' => $client]);
         $this->checkIssuerAndClientId($params);
         return $params;
     }
     /**
      * @param array $params

896) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:282    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
-        if (array_key_exists('iss', $params) && array_key_exists('client_id', $params)) {
+        if (array_key_exists('iss', $params) || array_key_exists('client_id', $params)) {
             Assertion::eq($params['iss'], $params['client_id'], 'The issuer of the request object is not the client who requests the authorization.');
         }
     }
     /**
      * @param Client $client
      * @param string $requestUri

897) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:299    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         foreach ($stored_request_uris as $stored_request_uri) {
-            if (0 === strcasecmp(mb_substr($requestUri, 0, mb_strlen($stored_request_uri, '8bit'), '8bit'), $stored_request_uri)) {
+            if (1 === strcasecmp(mb_substr($requestUri, 0, mb_strlen($stored_request_uri, '8bit'), '8bit'), $stored_request_uri)) {
                 return;
             }
         }
         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_URI, 'The request Uri is not allowed.');
     }
     /**

898) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:299    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         foreach ($stored_request_uris as $stored_request_uri) {
-            if (0 === strcasecmp(mb_substr($requestUri, 0, mb_strlen($stored_request_uri, '8bit'), '8bit'), $stored_request_uri)) {
+            if (0 === strcasecmp(mb_substr($requestUri, 1, mb_strlen($stored_request_uri, '8bit'), '8bit'), $stored_request_uri)) {
                 return;
             }
         }
         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_URI, 'The request Uri is not allowed.');
     }
     /**

899) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:299    [M] Identical

--- Original
+++ New
@@ @@
         foreach ($stored_request_uris as $stored_request_uri) {
-            if (0 === strcasecmp(mb_substr($requestUri, 0, mb_strlen($stored_request_uri, '8bit'), '8bit'), $stored_request_uri)) {
+            if (0 !== strcasecmp(mb_substr($requestUri, 0, mb_strlen($stored_request_uri, '8bit'), '8bit'), $stored_request_uri)) {
                 return;
             }
         }
         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_URI, 'The request Uri is not allowed.');
     }
     /**

900) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:298    [M] Foreach_

--- Original
+++ New
@@ @@
         $stored_request_uris = $this->getClientRequestUris($client);
-        foreach ($stored_request_uris as $stored_request_uri) {
+        foreach (array() as $stored_request_uri) {
             if (0 === strcasecmp(mb_substr($requestUri, 0, mb_strlen($stored_request_uri, '8bit'), '8bit'), $stored_request_uri)) {
                 return;
             }
         }
         throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_URI, 'The request Uri is not allowed.');
     }

901) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:314    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        if (false === Uri::checkUrl($requestUri, false)) {
+        if (true === Uri::checkUrl($requestUri, false)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'The request Uri must not contain path traversal.');
         }
     }
     /**
      * @param Client $client
      *

902) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:314    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        if (false === Uri::checkUrl($requestUri, false)) {
+        if (false === Uri::checkUrl($requestUri, true)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'The request Uri must not contain path traversal.');
         }
     }
     /**
      * @param Client $client
      *

903) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:314    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (false === Uri::checkUrl($requestUri, false)) {
+        if (false !== Uri::checkUrl($requestUri, false)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'The request Uri must not contain path traversal.');
         }
     }
     /**
      * @param Client $client
      *

904) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:328    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        if (false === $client->has('request_uris') || empty($requestUris = $client->get('request_uris'))) {
+        if (true === $client->has('request_uris') || empty($requestUris = $client->get('request_uris'))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'The client must register at least one request Uri.');
         }
         return $requestUris;
     }
     /**
      * @param array       $params

905) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:328    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (false === $client->has('request_uris') || empty($requestUris = $client->get('request_uris'))) {
+        if (false !== $client->has('request_uris') || empty($requestUris = $client->get('request_uris'))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'The client must register at least one request Uri.');
         }
         return $requestUris;
     }
     /**
      * @param array       $params

906) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:328    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (false === $client->has('request_uris') || empty($requestUris = $client->get('request_uris'))) {
+        if (false === $client->has('request_uris') && empty($requestUris = $client->get('request_uris'))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'The client must register at least one request Uri.');
         }
         return $requestUris;
     }
     /**
      * @param array       $params

907) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:351    [M] TrueValue

--- Original
+++ New
@@ @@
             $this->claimCheckerManager->check($jwt);
-            $claims = json_decode($jwt->getPayload(), true);
+            $claims = json_decode($jwt->getPayload(), false);
             $client = $this->getClient(array_merge($params, $claims));
             $public_key_set = $client->getPublicKeySet();
             Assertion::notNull($public_key_set, 'The client does not have signature capabilities.');
             $index = $this->jwsLoader->verifyWithKeySet($jwt, $public_key_set);
             $this->checkAlgorithms($jwt, $index, $client);
             $missing_claims = array_keys(array_diff_key(array_flip($this->mandatoryClaims), $claims));

908) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:359    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $missing_claims = array_keys(array_diff_key(array_flip($this->mandatoryClaims), $claims));
-            Assertion::true(0 === count($missing_claims), 'The following mandatory claims are missing: %s.', implode(', ', $missing_claims));
+            Assertion::true(1 === count($missing_claims), 'The following mandatory claims are missing: %s.', implode(', ', $missing_claims));
         } catch (\Exception $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_OBJECT, $e->getMessage());
         }
         return $jwt;
     }
     /**

909) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:359    [M] Identical

--- Original
+++ New
@@ @@
             $missing_claims = array_keys(array_diff_key(array_flip($this->mandatoryClaims), $claims));
-            Assertion::true(0 === count($missing_claims), 'The following mandatory claims are missing: %s.', implode(', ', $missing_claims));
+            Assertion::true(0 !== count($missing_claims), 'The following mandatory claims are missing: %s.', implode(', ', $missing_claims));
         } catch (\Exception $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_OBJECT, $e->getMessage());
         }
         return $jwt;
     }
     /**

910) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:376    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $this->jweLoader) {
+        if (null !== $this->jweLoader) {
             return $request;
         }
         try {
             $jwe = $this->jweLoader->load($request);
             $jwe = $this->jweLoader->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet);
             return $jwe->getPayload();

911) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:386    [M] TrueValue

--- Original
+++ New
@@ @@
         } catch (\Exception $e) {
-            if (true === $this->requireEncryption) {
+            if (false === $this->requireEncryption) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_OBJECT, $e->getMessage());
             }
             return $request;
         }
     }
     /**

912) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:386    [M] Identical

--- Original
+++ New
@@ @@
         } catch (\Exception $e) {
-            if (true === $this->requireEncryption) {
+            if (true !== $this->requireEncryption) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_OBJECT, $e->getMessage());
             }
             return $request;
         }
     }
     /**

913) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:419    [M] LogicalNot

--- Original
+++ New
@@ @@
         $content = $response->getBody()->getContents();
-        if (!is_string($content)) {
+        if (is_string($content)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST_URI, 'Unable to get content.');
         }
         return $content;
     }
     /**
      * @param array $params

914) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:436    [M] LogicalNot

--- Original
+++ New
@@ @@
         $client = array_key_exists('client_id', $params) ? $this->clientRepository->find(ClientId::create($params['client_id'])) : null;
-        if (!$client instanceof Client || true === $client->isDeleted()) {
+        if ($client instanceof Client || true === $client->isDeleted()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Parameter "client_id" missing or invalid.');
         }
         return $client;
     }
 }


915) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:436    [M] TrueValue

--- Original
+++ New
@@ @@
         $client = array_key_exists('client_id', $params) ? $this->clientRepository->find(ClientId::create($params['client_id'])) : null;
-        if (!$client instanceof Client || true === $client->isDeleted()) {
+        if (!$client instanceof Client || false === $client->isDeleted()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Parameter "client_id" missing or invalid.');
         }
         return $client;
     }
 }


916) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:436    [M] Identical

--- Original
+++ New
@@ @@
         $client = array_key_exists('client_id', $params) ? $this->clientRepository->find(ClientId::create($params['client_id'])) : null;
-        if (!$client instanceof Client || true === $client->isDeleted()) {
+        if (!$client instanceof Client || true !== $client->isDeleted()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Parameter "client_id" missing or invalid.');
         }
         return $client;
     }
 }


917) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/AuthorizationRequestLoader.php:436    [M] LogicalOr

--- Original
+++ New
@@ @@
         $client = array_key_exists('client_id', $params) ? $this->clientRepository->find(ClientId::create($params['client_id'])) : null;
-        if (!$client instanceof Client || true === $client->isDeleted()) {
+        if (!$client instanceof Client && true === $client->isDeleted()) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Parameter "client_id" missing or invalid.');
         }
         return $client;
     }
 }


918) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/BeforeConsentScreen/BeforeConsentScreenManager.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(BeforeConsentScreen $extension)
+    protected function add(BeforeConsentScreen $extension)
     {
         $this->extensions[] = $extension;
     }
     /**
      * @param ServerRequestInterface $request
      * @param Authorization          $authorization

919) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/BeforeConsentScreen/BeforeConsentScreenManager.php:42    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($this->extensions as $extension) {
+        foreach (array() as $extension) {
             $authorization = $extension->process($request, $authorization);
         }
         return $authorization;
     }
 }


920) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/BeforeConsentScreen/BeforeConsentScreenManager.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
+    protected function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
     {
         foreach ($this->extensions as $extension) {
             $authorization = $extension->process($request, $authorization);
         }
         return $authorization;
     }

921) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/BeforeConsentScreen/PreConfiguredAuthorizationExtension.php:48    [M] NotIdentical

--- Original
+++ New
@@ @@
         $preConfiguredAuthorization = $this->findPreConfiguredAuthorization($authorization);
-        if (null !== $preConfiguredAuthorization) {
+        if (null === $preConfiguredAuthorization) {
             if ($authorization->hasPrompt('consent')) {
                 throw new ShowConsentScreenException($authorization);
             }
             $authorization = $authorization->allow();
             throw new ProcessAuthorizationException($authorization);
         } else {

922) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/BeforeConsentScreen/PreConfiguredAuthorizationExtension.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
+    protected function process(ServerRequestInterface $request, Authorization $authorization) : Authorization
     {
         $preConfiguredAuthorization = $this->findPreConfiguredAuthorization($authorization);
         if (null !== $preConfiguredAuthorization) {
             if ($authorization->hasPrompt('consent')) {
                 throw new ShowConsentScreenException($authorization);
             }

923) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/BeforeConsentScreen/PreConfiguredAuthorizationExtension.php:72    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (null !== $this->preConfiguredAuthorizationRepository) {
+        if (null === $this->preConfiguredAuthorizationRepository) {
             return $this->preConfiguredAuthorizationRepository->find($authorization->getUserAccount()->getPublicId(), $authorization->getClient()->getPublicId(), $authorization->getScopes(), $authorization->getResourceServer() ? $authorization->getResourceServer()->getResourceServerId() : null);
         }
     }
 }


924) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/CreatePreConfiguredAuthorizationCommand.php:57    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function __construct(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?ResourceServerId $resourceServerId)
+    private function __construct(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?ResourceServerId $resourceServerId)
     {
         $this->preConfiguredAuthorizationId = $preConfiguredAuthorizationId;
         $this->clientId = $clientId;
         $this->userAccountId = $userAccountId;
         $this->resourceServerId = $resourceServerId;
         $this->scopes = $scopes;

925) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/CreatePreConfiguredAuthorizationCommand.php:75    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?ResourceServerId $resourceServerId) : self
+    protected static function create(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?ResourceServerId $resourceServerId) : self
     {
         return new self($preConfiguredAuthorizationId, $clientId, $userAccountId, $scopes, $resourceServerId);
     }
     /**
      * @return PreConfiguredAuthorizationId
      */

926) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/CreatePreConfiguredAuthorizationCommand.php:83    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPreConfiguredAuthorizationId() : PreConfiguredAuthorizationId
+    protected function getPreConfiguredAuthorizationId() : PreConfiguredAuthorizationId
     {
         return $this->preConfiguredAuthorizationId;
     }
     /**
      * @return UserAccountId
      */

927) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/CreatePreConfiguredAuthorizationCommand.php:91    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return ClientId
      */

928) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/CreatePreConfiguredAuthorizationCommand.php:99    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return array
      */

929) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/CreatePreConfiguredAuthorizationCommand.php:107    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return null|ResourceServerId
      */

930) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/CreatePreConfiguredAuthorizationCommand.php:115    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
 }


931) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/CreatePreConfiguredAuthorizationCommandHandler.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(CreatePreConfiguredAuthorizationCommand $command)
+    protected function handle(CreatePreConfiguredAuthorizationCommand $command)
     {
         $PreConfiguredAuthorization = $this->preConfiguredAuthorizationRepository->create($command->getUserAccountId(), $command->getClientId(), $command->getScopes(), $command->getResourceServerId());
         $this->preConfiguredAuthorizationRepository->save($PreConfiguredAuthorization);
     }
 }


932) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommand.php:50    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function __construct(ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?ResourceServerId $resourceServerId)
+    private function __construct(ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?ResourceServerId $resourceServerId)
     {
         $this->clientId = $clientId;
         $this->userAccountId = $userAccountId;
         $this->resourceServerId = $resourceServerId;
         $this->scopes = $scopes;
     }

933) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommand.php:66    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?ResourceServerId $resourceServerId) : self
+    protected static function create(ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?ResourceServerId $resourceServerId) : self
     {
         return new self($clientId, $userAccountId, $scopes, $resourceServerId);
     }
     /**
      * @return UserAccountId
      */

934) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommand.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return ClientId
      */

935) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommand.php:82    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return array
      */

936) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommand.php:90    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return null|ResourceServerId
      */

937) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommand.php:98    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResourceServerId() : ?ResourceServerId
+    protected function getResourceServerId() : ?ResourceServerId
     {
         return $this->resourceServerId;
     }
 }


938) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommandHandler.php:47    [M] NotIdentical

--- Original
+++ New
@@ @@
         $preConfiguredAuthorization = $this->preConfiguredAuthorizationRepository->find($command->getUserAccountId(), $command->getClientId(), $command->getScopes(), $command->getResourceServerId());
-        if (null !== $preConfiguredAuthorization && !$preConfiguredAuthorization->isRevoked()) {
+        if (null === $preConfiguredAuthorization && !$preConfiguredAuthorization->isRevoked()) {
             $preConfiguredAuthorization = $preConfiguredAuthorization->markAsRevoked();
             $this->preConfiguredAuthorizationRepository->save($preConfiguredAuthorization);
         }
     }
 }


939) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommandHandler.php:47    [M] LogicalNot

--- Original
+++ New
@@ @@
         $preConfiguredAuthorization = $this->preConfiguredAuthorizationRepository->find($command->getUserAccountId(), $command->getClientId(), $command->getScopes(), $command->getResourceServerId());
-        if (null !== $preConfiguredAuthorization && !$preConfiguredAuthorization->isRevoked()) {
+        if (null !== $preConfiguredAuthorization && $preConfiguredAuthorization->isRevoked()) {
             $preConfiguredAuthorization = $preConfiguredAuthorization->markAsRevoked();
             $this->preConfiguredAuthorizationRepository->save($preConfiguredAuthorization);
         }
     }
 }


940) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommandHandler.php:47    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $preConfiguredAuthorization = $this->preConfiguredAuthorizationRepository->find($command->getUserAccountId(), $command->getClientId(), $command->getScopes(), $command->getResourceServerId());
-        if (null !== $preConfiguredAuthorization && !$preConfiguredAuthorization->isRevoked()) {
+        if (null !== $preConfiguredAuthorization || !$preConfiguredAuthorization->isRevoked()) {
             $preConfiguredAuthorization = $preConfiguredAuthorization->markAsRevoked();
             $this->preConfiguredAuthorizationRepository->save($preConfiguredAuthorization);
         }
     }
 }


941) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Command/RevokePreConfiguredAuthorizationCommandHandler.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(RevokePreConfiguredAuthorizationCommand $command)
+    protected function handle(RevokePreConfiguredAuthorizationCommand $command)
     {
         $preConfiguredAuthorization = $this->preConfiguredAuthorizationRepository->find($command->getUserAccountId(), $command->getClientId(), $command->getScopes(), $command->getResourceServerId());
         if (null !== $preConfiguredAuthorization && !$preConfiguredAuthorization->isRevoked()) {
             $preConfiguredAuthorization = $preConfiguredAuthorization->markAsRevoked();
             $this->preConfiguredAuthorizationRepository->save($preConfiguredAuthorization);
         }

942) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:56    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function __construct(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ClientId $clientId, UserAccountId $userAccountId, array $scopes, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->preConfiguredAuthorizationId = $preConfiguredAuthorizationId;
         $this->clientId = $clientId;
         $this->userAccountId = $userAccountId;
         $this->scopes = $scopes;

943) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:68    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/pre-configured-authorization/created/1.0/schema';
     }
     /**
      * @param PreConfiguredAuthorizationId $preConfiguredAuthorizationId
      * @param ClientId                     $clientId

944) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ClientId $clientId, UserAccountId $userAccountId, array $scopes) : self
+    protected static function create(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ClientId $clientId, UserAccountId $userAccountId, array $scopes) : self
     {
         return new self($preConfiguredAuthorizationId, $clientId, $userAccountId, $scopes, null, null);
     }
     /**
      * @return PreConfiguredAuthorizationId
      */

945) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:89    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPreConfiguredAuthorizationId() : PreConfiguredAuthorizationId
+    protected function getPreConfiguredAuthorizationId() : PreConfiguredAuthorizationId
     {
         return $this->preConfiguredAuthorizationId;
     }
     /**
      * @return ClientId
      */

946) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:97    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return UserAccountId
      */

947) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:105    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return \string[]
      */

948) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:113    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * {@inheritdoc}
      */

949) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:121    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getPreConfiguredAuthorizationId();
     }
     /**
      * {@inheritdoc}
      */

950) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:129    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['pre_configured_authorization_id' => $this->preConfiguredAuthorizationId->getValue(), 'client_id' => $this->clientId->getValue(), 'user_account_id' => $this->userAccountId->getValue(), 'scopes' => $this->scopes];
     }
     /**
      * {@inheritdoc}
      */

951) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationCreatedEvent.php:142    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $preConfiguredAuthorization = PreConfiguredAuthorizationId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         $clientId = ClientId::create($json->payload->client_id);
         $userAccountId = UserAccountId::create($json->payload->user_account_id);

952) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationRevokedEvent.php:36    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function __construct(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
+    private function __construct(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, ?\DateTimeImmutable $recordedOn, ?EventId $eventId)
     {
         parent::__construct($recordedOn, $eventId);
         $this->preConfiguredAuthorizationId = $preConfiguredAuthorizationId;
     }
     /**
      * {@inheritdoc}

953) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationRevokedEvent.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/pre-configured-authorization/revoked/1.0/schema';
     }
     /**
      * @param PreConfiguredAuthorizationId $preConfiguredAuthorizationId
      *

954) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationRevokedEvent.php:55    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(PreConfiguredAuthorizationId $preConfiguredAuthorizationId) : self
+    protected static function create(PreConfiguredAuthorizationId $preConfiguredAuthorizationId) : self
     {
         return new self($preConfiguredAuthorizationId, null, null);
     }
     /**
      * @return PreConfiguredAuthorizationId
      */

955) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationRevokedEvent.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPreConfiguredAuthorizationId() : PreConfiguredAuthorizationId
+    protected function getPreConfiguredAuthorizationId() : PreConfiguredAuthorizationId
     {
         return $this->preConfiguredAuthorizationId;
     }
     /**
      * {@inheritdoc}
      */

956) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationRevokedEvent.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getPreConfiguredAuthorizationId();
     }
     /**
      * {@inheritdoc}
      */

957) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationRevokedEvent.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
     }
     /**
      * {@inheritdoc}
      */
     public static function createFromJson(\stdClass $json) : DomainObject

958) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Event/PreConfiguredAuthorizationRevokedEvent.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $preConfiguredAuthorizationId = PreConfiguredAuthorizationId::create($json->domain_id);
         $eventId = EventId::create($json->event_id);
         $recordedOn = \DateTimeImmutable::createFromFormat('U', (string) $json->recorded_on);
         return new self($preConfiguredAuthorizationId, $recordedOn, $eventId);
     }

959) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Exception/CreateRedirectionException.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAuthorization() : Authorization
+    protected function getAuthorization() : Authorization
     {
         return $this->authorization;
     }
     /**
      * @return null|string
      */

960) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Exception/CreateRedirectionException.php:55    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getDescription() : ?string
+    protected function getDescription() : ?string
     {
         return $this->description;
     }
 }


961) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Exception/ProcessAuthorizationException.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAuthorization() : Authorization
+    protected function getAuthorization() : Authorization
     {
         return $this->authorization;
     }
 }


962) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Exception/RedirectToLoginPageException.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAuthorization() : Authorization
+    protected function getAuthorization() : Authorization
     {
         return $this->authorization;
     }
 }


963) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/Exception/ShowConsentScreenException.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAuthorization() : Authorization
+    protected function getAuthorization() : Authorization
     {
         return $this->authorization;
     }
 }


964) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/DisplayParameterChecker.php:36    [M] BitwiseOr

--- Original
+++ New
@@ @@
             if ($authorization->hasQueryParam('display')) {
-                Assertion::true(in_array($authorization->getQueryParam('display'), $this->getAllowedDisplayValues()), sprintf('Invalid parameter "display". Allowed values are %s', json_encode($this->getAllowedDisplayValues(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));
+                Assertion::true(in_array($authorization->getQueryParam('display'), $this->getAllowedDisplayValues()), sprintf('Invalid parameter "display". Allowed values are %s', json_encode($this->getAllowedDisplayValues(), JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES)));
             }
             return $next($authorization);
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);
         }
     }

965) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/DisplayParameterChecker.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         try {
             if ($authorization->hasQueryParam('display')) {
                 Assertion::true(in_array($authorization->getQueryParam('display'), $this->getAllowedDisplayValues()), sprintf('Invalid parameter "display". Allowed values are %s', json_encode($this->getAllowedDisplayValues(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES)));
             }
             return $next($authorization);

966) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/NonceParameterChecker.php:33    [M] FalseValue

--- Original
+++ New
@@ @@
             $authorization = $next($authorization);
-            if (false !== strpos($authorization->getQueryParam('response_type'), 'id_token')) {
+            if (true !== strpos($authorization->getQueryParam('response_type'), 'id_token')) {
                 Assertion::true($authorization->hasQueryParam('nonce'), 'The parameter "nonce" is mandatory.');
             }
             return $authorization;
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);
         }

967) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/NonceParameterChecker.php:33    [M] NotIdentical

--- Original
+++ New
@@ @@
             $authorization = $next($authorization);
-            if (false !== strpos($authorization->getQueryParam('response_type'), 'id_token')) {
+            if (false === strpos($authorization->getQueryParam('response_type'), 'id_token')) {
                 Assertion::true($authorization->hasQueryParam('nonce'), 'The parameter "nonce" is mandatory.');
             }
             return $authorization;
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);
         }

968) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/NonceParameterChecker.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         try {
             $authorization = $next($authorization);
             if (false !== strpos($authorization->getQueryParam('response_type'), 'id_token')) {
                 Assertion::true($authorization->hasQueryParam('nonce'), 'The parameter "nonce" is mandatory.');
             }

969) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ParameterCheckerManager.php:30    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(ParameterChecker $parameterChecker) : self
+    protected function add(ParameterChecker $parameterChecker) : self
     {
         $this->parameterCheckers[] = $parameterChecker;
         return $this;
     }
     /**
      * @param Authorization $authorization

970) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ParameterCheckerManager.php:44    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        return call_user_func($this->callableForNextExtension(0), $authorization, []);
+        return call_user_func($this->callableForNextExtension(1), $authorization, []);
     }
     /**
      * @param int $index
      *
      * @return \Closure
      */

971) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ParameterCheckerManager.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization) : Authorization
+    protected function process(Authorization $authorization) : Authorization
     {
         return call_user_func($this->callableForNextExtension(0), $authorization, []);
     }
     /**
      * @param int $index
      *

972) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ParameterCheckerManager.php:54    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!array_key_exists($index, $this->parameterCheckers)) {
+        if (array_key_exists($index, $this->parameterCheckers)) {
             return function (Authorization $authorization) : Authorization {
                 return $authorization;
             };
         }
         $parameterChecker = $this->parameterCheckers[$index];
         return function (Authorization $authorization) use($parameterChecker, $index) : Authorization {

973) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ParameterCheckerManager.php:62    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         return function (Authorization $authorization) use($parameterChecker, $index) : Authorization {
-            return $parameterChecker->process($authorization, $this->callableForNextExtension($index + 1));
+            return $parameterChecker->process($authorization, $this->callableForNextExtension($index + 0));
         };
     }
 }


974) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ParameterCheckerManager.php:62    [M] Plus

--- Original
+++ New
@@ @@
         return function (Authorization $authorization) use($parameterChecker, $index) : Authorization {
-            return $parameterChecker->process($authorization, $this->callableForNextExtension($index + 1));
+            return $parameterChecker->process($authorization, $this->callableForNextExtension($index - 1));
         };
     }
 }


975) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/PromptParameterChecker.php:38    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 Assertion::true(empty(array_diff($prompt, $this->getAllowedPromptValues())), sprintf('Invalid parameter "prompt". Allowed values are %s', implode(', ', $this->getAllowedPromptValues())));
-                Assertion::false(in_array('none', $prompt) && 1 !== count($prompt), 'Invalid parameter "prompt". Prompt value "none" must be used alone.');
+                Assertion::false(in_array('none', $prompt) && 0 !== count($prompt), 'Invalid parameter "prompt". Prompt value "none" must be used alone.');
             }
             return $next($authorization);
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);
         }
     }

976) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/PromptParameterChecker.php:38    [M] NotIdentical

--- Original
+++ New
@@ @@
                 Assertion::true(empty(array_diff($prompt, $this->getAllowedPromptValues())), sprintf('Invalid parameter "prompt". Allowed values are %s', implode(', ', $this->getAllowedPromptValues())));
-                Assertion::false(in_array('none', $prompt) && 1 !== count($prompt), 'Invalid parameter "prompt". Prompt value "none" must be used alone.');
+                Assertion::false(in_array('none', $prompt) && 1 === count($prompt), 'Invalid parameter "prompt". Prompt value "none" must be used alone.');
             }
             return $next($authorization);
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);
         }
     }

977) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/PromptParameterChecker.php:38    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 Assertion::true(empty(array_diff($prompt, $this->getAllowedPromptValues())), sprintf('Invalid parameter "prompt". Allowed values are %s', implode(', ', $this->getAllowedPromptValues())));
-                Assertion::false(in_array('none', $prompt) && 1 !== count($prompt), 'Invalid parameter "prompt". Prompt value "none" must be used alone.');
+                Assertion::false(in_array('none', $prompt) || 1 !== count($prompt), 'Invalid parameter "prompt". Prompt value "none" must be used alone.');
             }
             return $next($authorization);
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);
         }
     }

978) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/PromptParameterChecker.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         try {
             if ($authorization->hasQueryParam('prompt')) {
                 $prompt = $authorization->getPrompt();
                 Assertion::true(empty(array_diff($prompt, $this->getAllowedPromptValues())), sprintf('Invalid parameter "prompt". Allowed values are %s', implode(', ', $this->getAllowedPromptValues())));
                 Assertion::false(in_array('none', $prompt) && 1 !== count($prompt), 'Invalid parameter "prompt". Prompt value "none" must be used alone.');

979) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         try {
             Assertion::true($authorization->hasQueryParam('redirect_uri'), 'The parameter "redirect_uri" is mandatory.');
             $redirectUri = $authorization->getQueryParam('redirect_uri');
             $this->checkRedirectUriHasNoFragment($redirectUri);
             $this->checkIfRedirectUriIsSecuredIfNeeded($redirectUri);

980) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:89    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        if (false === $this->isSecuredRedirectUriEnforced()) {
+        if (true === $this->isSecuredRedirectUriEnforced()) {
             return;
         }
         if (true === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
             Assertion::true($this->isALocalUriOrAnUrn($redirectUri), 'The parameter "redirect_uri" must be a secured URI.');
         }
     }

981) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:89    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (false === $this->isSecuredRedirectUriEnforced()) {
+        if (false !== $this->isSecuredRedirectUriEnforced()) {
             return;
         }
         if (true === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
             Assertion::true($this->isALocalUriOrAnUrn($redirectUri), 'The parameter "redirect_uri" must be a secured URI.');
         }
     }

982) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:92    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        if (true === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
+        if (false === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
             Assertion::true($this->isALocalUriOrAnUrn($redirectUri), 'The parameter "redirect_uri" must be a secured URI.');
         }
     }
     /**
      * Redirection to an URN or a local host is allowed if the https is required.
      *

983) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:92    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if (true === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
+        if (true !== $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
             Assertion::true($this->isALocalUriOrAnUrn($redirectUri), 'The parameter "redirect_uri" must be a secured URI.');
         }
     }
     /**
      * Redirection to an URN or a local host is allowed if the https is required.
      *

984) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:92    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         }
-        if (true === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
+        if (true === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 1, 5, '8bit')) {
             Assertion::true($this->isALocalUriOrAnUrn($redirectUri), 'The parameter "redirect_uri" must be a secured URI.');
         }
     }
     /**
      * Redirection to an URN or a local host is allowed if the https is required.
      *

985) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:92    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (true === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
+        if (true === $this->isSecuredRedirectUriEnforced() && 'https' === mb_substr($redirectUri, 0, 5, '8bit')) {
             Assertion::true($this->isALocalUriOrAnUrn($redirectUri), 'The parameter "redirect_uri" must be a secured URI.');
         }
     }
     /**
      * Redirection to an URN or a local host is allowed if the https is required.
      *

986) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:92    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if (true === $this->isSecuredRedirectUriEnforced() && 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
+        if (true === $this->isSecuredRedirectUriEnforced() || 'https' !== mb_substr($redirectUri, 0, 5, '8bit')) {
             Assertion::true($this->isALocalUriOrAnUrn($redirectUri), 'The parameter "redirect_uri" must be a secured URI.');
         }
     }
     /**
      * Redirection to an URN or a local host is allowed if the https is required.
      *

987) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:108    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $parsed = parse_url($redirectUri);
-        return array_key_exists('scheme', $parsed) && array_key_exists('host', $parsed) && 'http' === $parsed['scheme'] && in_array($parsed['host'], ['[::1]', '127.0.0.1']);
+        return (array_key_exists('scheme', $parsed) || array_key_exists('host', $parsed)) && 'http' === $parsed['scheme'] && in_array($parsed['host'], ['[::1]', '127.0.0.1']);
     }
     /**
      * @param Client $client
      * @param string $redirectUri
      * @param array  $queryParameters
      */

988) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:108    [M] Identical

--- Original
+++ New
@@ @@
         $parsed = parse_url($redirectUri);
-        return array_key_exists('scheme', $parsed) && array_key_exists('host', $parsed) && 'http' === $parsed['scheme'] && in_array($parsed['host'], ['[::1]', '127.0.0.1']);
+        return array_key_exists('scheme', $parsed) && array_key_exists('host', $parsed) && 'http' !== $parsed['scheme'] && in_array($parsed['host'], ['[::1]', '127.0.0.1']);
     }
     /**
      * @param Client $client
      * @param string $redirectUri
      * @param array  $queryParameters
      */

989) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:108    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $parsed = parse_url($redirectUri);
-        return array_key_exists('scheme', $parsed) && array_key_exists('host', $parsed) && 'http' === $parsed['scheme'] && in_array($parsed['host'], ['[::1]', '127.0.0.1']);
+        return (array_key_exists('scheme', $parsed) && array_key_exists('host', $parsed) || 'http' === $parsed['scheme']) && in_array($parsed['host'], ['[::1]', '127.0.0.1']);
     }
     /**
      * @param Client $client
      * @param string $redirectUri
      * @param array  $queryParameters
      */

990) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:108    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $parsed = parse_url($redirectUri);
-        return array_key_exists('scheme', $parsed) && array_key_exists('host', $parsed) && 'http' === $parsed['scheme'] && in_array($parsed['host'], ['[::1]', '127.0.0.1']);
+        return array_key_exists('scheme', $parsed) && array_key_exists('host', $parsed) && 'http' === $parsed['scheme'] || in_array($parsed['host'], ['[::1]', '127.0.0.1']);
     }
     /**
      * @param Client $client
      * @param string $redirectUri
      * @param array  $queryParameters
      */

991) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:120    [M] LogicalNot

--- Original
+++ New
@@ @@
         $client_redirect_uris = $this->getClientRedirectUris($client, $queryParameters);
-        Assertion::false(!empty($client_redirect_uris) && false === Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
+        Assertion::false(empty($client_redirect_uris) && false === Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
     }
     /**
      * Check if the redirect URIs stored by the client.
      *
      * @param Client $client
      * @param array  $queryParameters

992) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:120    [M] FalseValue

--- Original
+++ New
@@ @@
         $client_redirect_uris = $this->getClientRedirectUris($client, $queryParameters);
-        Assertion::false(!empty($client_redirect_uris) && false === Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
+        Assertion::false(!empty($client_redirect_uris) && true === Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
     }
     /**
      * Check if the redirect URIs stored by the client.
      *
      * @param Client $client
      * @param array  $queryParameters

993) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:120    [M] Identical

--- Original
+++ New
@@ @@
         $client_redirect_uris = $this->getClientRedirectUris($client, $queryParameters);
-        Assertion::false(!empty($client_redirect_uris) && false === Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
+        Assertion::false(!empty($client_redirect_uris) && false !== Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
     }
     /**
      * Check if the redirect URIs stored by the client.
      *
      * @param Client $client
      * @param array  $queryParameters

994) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:120    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $client_redirect_uris = $this->getClientRedirectUris($client, $queryParameters);
-        Assertion::false(!empty($client_redirect_uris) && false === Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
+        Assertion::false(!empty($client_redirect_uris) || false === Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
     }
     /**
      * Check if the redirect URIs stored by the client.
      *
      * @param Client $client
      * @param array  $queryParameters

995) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:116    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function checkRedirectUriForTheClient(Client $client, $redirectUri, array $queryParameters)
+    protected function checkRedirectUriForTheClient(Client $client, $redirectUri, array $queryParameters)
     {
         $client_redirect_uris = $this->getClientRedirectUris($client, $queryParameters);
         Assertion::false(!empty($client_redirect_uris) && false === Uri::isRedirectUriAllowed($redirectUri, $client_redirect_uris), 'The specified redirect URI is not valid.');
     }
     /**
      * Check if the redirect URIs stored by the client.

996) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:137    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$client->has('redirect_uris') || empty($redirectUris = $client->get('redirect_uris'))) {
+        if ($client->has('redirect_uris') || empty($redirectUris = $client->get('redirect_uris'))) {
             Assertion::false($this->isRedirectUriStorageEnforced(), 'Clients must register at least one redirect URI.');
             Assertion::false($client->isPublic(), 'Non-confidential clients must register at least one redirect URI.');
             Assertion::false(!$client->isPublic() && array_key_exists('response_type', $queryParameters) && 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
             return [];
         }
         return $redirectUris;

997) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:137    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
-        if (!$client->has('redirect_uris') || empty($redirectUris = $client->get('redirect_uris'))) {
+        if (!$client->has('redirect_uris') && empty($redirectUris = $client->get('redirect_uris'))) {
             Assertion::false($this->isRedirectUriStorageEnforced(), 'Clients must register at least one redirect URI.');
             Assertion::false($client->isPublic(), 'Non-confidential clients must register at least one redirect URI.');
             Assertion::false(!$client->isPublic() && array_key_exists('response_type', $queryParameters) && 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
             return [];
         }
         return $redirectUris;

998) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:140    [M] LogicalNot

--- Original
+++ New
@@ @@
             Assertion::false($client->isPublic(), 'Non-confidential clients must register at least one redirect URI.');
-            Assertion::false(!$client->isPublic() && array_key_exists('response_type', $queryParameters) && 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
+            Assertion::false($client->isPublic() && array_key_exists('response_type', $queryParameters) && 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
             return [];
         }
         return $redirectUris;
     }
     /**
      * @return bool

999) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:140    [M] LogicalAnd

--- Original
+++ New
@@ @@
             Assertion::false($client->isPublic(), 'Non-confidential clients must register at least one redirect URI.');
-            Assertion::false(!$client->isPublic() && array_key_exists('response_type', $queryParameters) && 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
+            Assertion::false((!$client->isPublic() || array_key_exists('response_type', $queryParameters)) && 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
             return [];
         }
         return $redirectUris;
     }
     /**
      * @return bool

1000) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:140    [M] Identical

--- Original
+++ New
@@ @@
             Assertion::false($client->isPublic(), 'Non-confidential clients must register at least one redirect URI.');
-            Assertion::false(!$client->isPublic() && array_key_exists('response_type', $queryParameters) && 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
+            Assertion::false(!$client->isPublic() && array_key_exists('response_type', $queryParameters) && 'token' !== $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
             return [];
         }
         return $redirectUris;
     }
     /**
      * @return bool

1001) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/RedirectUriParameterChecker.php:140    [M] LogicalAnd

--- Original
+++ New
@@ @@
             Assertion::false($client->isPublic(), 'Non-confidential clients must register at least one redirect URI.');
-            Assertion::false(!$client->isPublic() && array_key_exists('response_type', $queryParameters) && 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
+            Assertion::false(!$client->isPublic() && array_key_exists('response_type', $queryParameters) || 'token' === $queryParameters['response_type'], 'Confidential clients must register at least one redirect URI when using "token" response type.');
             return [];
         }
         return $redirectUris;
     }
     /**
      * @return bool

1002) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:67    [M] TrueValue

--- Original
+++ New
@@ @@
             $authorization = $authorization->withResponseTypes($responseTypes);
-            if (true === $authorization->hasQueryParam('response_mode') && $this->isResponseModeParameterInAuthorizationRequestAllowed()) {
+            if (false === $authorization->hasQueryParam('response_mode') && $this->isResponseModeParameterInAuthorizationRequestAllowed()) {
                 $responseMode = $authorization->getQueryParam('response_mode');
             } else {
                 $responseMode = $this->findResponseMode($responseTypes, $responseType);
             }
             Assertion::true($this->responseModeManager->has($responseMode), sprintf('The response mode "%s" is supported. Please use one of the following values: %s.', $responseMode, implode(', ', $this->responseModeManager->list())));
             $authorization = $authorization->withResponseMode($this->responseModeManager->get($responseMode));

1003) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:67    [M] Identical

--- Original
+++ New
@@ @@
             $authorization = $authorization->withResponseTypes($responseTypes);
-            if (true === $authorization->hasQueryParam('response_mode') && $this->isResponseModeParameterInAuthorizationRequestAllowed()) {
+            if (true !== $authorization->hasQueryParam('response_mode') && $this->isResponseModeParameterInAuthorizationRequestAllowed()) {
                 $responseMode = $authorization->getQueryParam('response_mode');
             } else {
                 $responseMode = $this->findResponseMode($responseTypes, $responseType);
             }
             Assertion::true($this->responseModeManager->has($responseMode), sprintf('The response mode "%s" is supported. Please use one of the following values: %s.', $responseMode, implode(', ', $this->responseModeManager->list())));
             $authorization = $authorization->withResponseMode($this->responseModeManager->get($responseMode));

1004) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:67    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $authorization = $authorization->withResponseTypes($responseTypes);
-            if (true === $authorization->hasQueryParam('response_mode') && $this->isResponseModeParameterInAuthorizationRequestAllowed()) {
+            if (true === $authorization->hasQueryParam('response_mode') || $this->isResponseModeParameterInAuthorizationRequestAllowed()) {
                 $responseMode = $authorization->getQueryParam('response_mode');
             } else {
                 $responseMode = $this->findResponseMode($responseTypes, $responseType);
             }
             Assertion::true($this->responseModeManager->has($responseMode), sprintf('The response mode "%s" is supported. Please use one of the following values: %s.', $responseMode, implode(', ', $this->responseModeManager->list())));
             $authorization = $authorization->withResponseMode($this->responseModeManager->get($responseMode));

1005) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:56    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         try {
             /*
              * @see http://tools.ietf.org/html/rfc6749#section-3.1.1
              */
             Assertion::true($authorization->hasQueryParam('response_type'), 'The parameter "response_type" is mandatory.');

1006) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:100    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isResponseModeParameterInAuthorizationRequestAllowed() : bool
+    protected function isResponseModeParameterInAuthorizationRequestAllowed() : bool
     {
         return $this->responseModeParameterInAuthorizationRequestAllowed;
     }
     /**
      * @param array  $types
      * @param string $responseType

1007) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:113    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        if (1 === count($types)) {
+        if (0 === count($types)) {
             // There is only one type (OAuth2 request)
             return $types[0]->getResponseMode();
         }
         //There are multiple response types
         switch ($responseType) {
             case 'code token':

1008) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:113    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (1 === count($types)) {
+        if (1 !== count($types)) {
             // There is only one type (OAuth2 request)
             return $types[0]->getResponseMode();
         }
         //There are multiple response types
         switch ($responseType) {
             case 'code token':

1009) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:115    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             // There is only one type (OAuth2 request)
-            return $types[0]->getResponseMode();
+            return $types[1]->getResponseMode();
         }
         //There are multiple response types
         switch ($responseType) {
             case 'code token':
             case 'code id_token':
             case 'id_token token':

1010) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ResponseTypeAndResponseModeParameterChecker.php:111    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function findResponseMode(array $types, string $responseType) : string
+    protected function findResponseMode(array $types, string $responseType) : string
     {
         if (1 === count($types)) {
             // There is only one type (OAuth2 request)
             return $types[0]->getResponseMode();
         }
         //There are multiple response types

1011) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ScopeParameterChecker.php:57    [M] NotIdentical

--- Original
+++ New
@@ @@
             }
-            if (null !== $this->scopePolicyManager) {
+            if (null === $this->scopePolicyManager) {
                 $scope = $this->scopePolicyManager->check($scope, $authorization->getClient());
             }
             $availableScope = $this->scopeRepository->getAvailableScopesForClient($authorization->getClient());
             Assertion::true($this->scopeRepository->areRequestedScopesAvailable($scope, $availableScope), sprintf('An unsupported scope was requested. Available scopes for the client are %s.', implode(', ', $availableScope)));
             $authorization = $authorization->withScopes($scope);
             return $next($authorization);

1012) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/ScopeParameterChecker.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         try {
             if ($authorization->hasQueryParam('scope')) {
                 Assertion::regex($authorization->getQueryParam('scope'), '/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', 'Invalid characters found in the \'scope\' parameter.');
                 $scope = explode(' ', $authorization->getQueryParam('scope'));
             } else {

1013) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/StateParameterChecker.php:47    [M] TrueValue

--- Original
+++ New
@@ @@
         try {
-            if (true === $this->stateParameterEnforced && !$authorization->hasQueryParam('state')) {
+            if (false === $this->stateParameterEnforced && !$authorization->hasQueryParam('state')) {
                 throw new \InvalidArgumentException('The parameter "state" is mandatory.');
             }
             if (true === $authorization->hasQueryParam('state')) {
                 $authorization = $authorization->withResponseParameter('state', $authorization->getQueryParam('state'));
             }
             return $next($authorization);

1014) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/StateParameterChecker.php:47    [M] Identical

--- Original
+++ New
@@ @@
         try {
-            if (true === $this->stateParameterEnforced && !$authorization->hasQueryParam('state')) {
+            if (true !== $this->stateParameterEnforced && !$authorization->hasQueryParam('state')) {
                 throw new \InvalidArgumentException('The parameter "state" is mandatory.');
             }
             if (true === $authorization->hasQueryParam('state')) {
                 $authorization = $authorization->withResponseParameter('state', $authorization->getQueryParam('state'));
             }
             return $next($authorization);

1015) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/StateParameterChecker.php:47    [M] LogicalNot

--- Original
+++ New
@@ @@
         try {
-            if (true === $this->stateParameterEnforced && !$authorization->hasQueryParam('state')) {
+            if (true === $this->stateParameterEnforced && $authorization->hasQueryParam('state')) {
                 throw new \InvalidArgumentException('The parameter "state" is mandatory.');
             }
             if (true === $authorization->hasQueryParam('state')) {
                 $authorization = $authorization->withResponseParameter('state', $authorization->getQueryParam('state'));
             }
             return $next($authorization);

1016) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/StateParameterChecker.php:47    [M] LogicalAnd

--- Original
+++ New
@@ @@
         try {
-            if (true === $this->stateParameterEnforced && !$authorization->hasQueryParam('state')) {
+            if (true === $this->stateParameterEnforced || !$authorization->hasQueryParam('state')) {
                 throw new \InvalidArgumentException('The parameter "state" is mandatory.');
             }
             if (true === $authorization->hasQueryParam('state')) {
                 $authorization = $authorization->withResponseParameter('state', $authorization->getQueryParam('state'));
             }
             return $next($authorization);

1017) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/StateParameterChecker.php:50    [M] TrueValue

--- Original
+++ New
@@ @@
             }
-            if (true === $authorization->hasQueryParam('state')) {
+            if (false === $authorization->hasQueryParam('state')) {
                 $authorization = $authorization->withResponseParameter('state', $authorization->getQueryParam('state'));
             }
             return $next($authorization);
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);
         }

1018) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/StateParameterChecker.php:50    [M] Identical

--- Original
+++ New
@@ @@
             }
-            if (true === $authorization->hasQueryParam('state')) {
+            if (true !== $authorization->hasQueryParam('state')) {
                 $authorization = $authorization->withResponseParameter('state', $authorization->getQueryParam('state'));
             }
             return $next($authorization);
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);
         }

1019) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/StateParameterChecker.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         try {
             if (true === $this->stateParameterEnforced && !$authorization->hasQueryParam('state')) {
                 throw new \InvalidArgumentException('The parameter "state" is mandatory.');
             }
             if (true === $authorization->hasQueryParam('state')) {

1020) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/TokenTypeParameterChecker.php:50    [M] TrueValue

--- Original
+++ New
@@ @@
         try {
-            if (true === $this->tokenTypeParameterAllowed && $authorization->hasQueryParam('token_type')) {
+            if (false === $this->tokenTypeParameterAllowed && $authorization->hasQueryParam('token_type')) {
                 $tokenType = $this->tokenTypeManager->get($authorization->getQueryParam('token_type'));
             } else {
                 $tokenType = $this->tokenTypeManager->getDefault();
             }
             if (!$authorization->getClient()->isTokenTypeAllowed($tokenType->name())) {
                 throw new \InvalidArgumentException(sprintf('The token type "%s" is not allowed for the client.', $tokenType->name()));

1021) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/TokenTypeParameterChecker.php:50    [M] Identical

--- Original
+++ New
@@ @@
         try {
-            if (true === $this->tokenTypeParameterAllowed && $authorization->hasQueryParam('token_type')) {
+            if (true !== $this->tokenTypeParameterAllowed && $authorization->hasQueryParam('token_type')) {
                 $tokenType = $this->tokenTypeManager->get($authorization->getQueryParam('token_type'));
             } else {
                 $tokenType = $this->tokenTypeManager->getDefault();
             }
             if (!$authorization->getClient()->isTokenTypeAllowed($tokenType->name())) {
                 throw new \InvalidArgumentException(sprintf('The token type "%s" is not allowed for the client.', $tokenType->name()));

1022) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/TokenTypeParameterChecker.php:50    [M] LogicalAnd

--- Original
+++ New
@@ @@
         try {
-            if (true === $this->tokenTypeParameterAllowed && $authorization->hasQueryParam('token_type')) {
+            if (true === $this->tokenTypeParameterAllowed || $authorization->hasQueryParam('token_type')) {
                 $tokenType = $this->tokenTypeManager->get($authorization->getQueryParam('token_type'));
             } else {
                 $tokenType = $this->tokenTypeManager->getDefault();
             }
             if (!$authorization->getClient()->isTokenTypeAllowed($tokenType->name())) {
                 throw new \InvalidArgumentException(sprintf('The token type "%s" is not allowed for the client.', $tokenType->name()));

1023) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/TokenTypeParameterChecker.php:55    [M] LogicalNot

--- Original
+++ New
@@ @@
             }
-            if (!$authorization->getClient()->isTokenTypeAllowed($tokenType->name())) {
+            if ($authorization->getClient()->isTokenTypeAllowed($tokenType->name())) {
                 throw new \InvalidArgumentException(sprintf('The token type "%s" is not allowed for the client.', $tokenType->name()));
             }
             $authorization = $authorization->withTokenType($tokenType);
             return $next($authorization);
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), $authorization, $e);

1024) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ParameterChecker/TokenTypeParameterChecker.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         try {
             if (true === $this->tokenTypeParameterAllowed && $authorization->hasQueryParam('token_type')) {
                 $tokenType = $this->tokenTypeManager->get($authorization->getQueryParam('token_type'));
             } else {
                 $tokenType = $this->tokenTypeManager->getDefault();

1025) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function create(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, UserAccountId $userAccountId, ClientId $clientId, array $scopes) : self
+    protected function create(PreConfiguredAuthorizationId $preConfiguredAuthorizationId, UserAccountId $userAccountId, ClientId $clientId, array $scopes) : self
     {
         $clone = clone $this;
         $clone->preConfiguredAuthorizationId = $preConfiguredAuthorizationId;
         $clone->userAccountId = $userAccountId;
         $clone->clientId = $clientId;
         $clone->scopes = implode(' ', $scopes);

1026) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function createEmpty() : self
+    protected static function createEmpty() : self
     {
         return new self();
     }
     /**
      * @return PreConfiguredAuthorizationId
      */

1027) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:89    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPreConfiguredAuthorizationId() : PreConfiguredAuthorizationId
+    protected function getPreConfiguredAuthorizationId() : PreConfiguredAuthorizationId
     {
         return $this->preConfiguredAuthorizationId;
     }
     /**
      * @return UserAccountId
      */

1028) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:97    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         return $this->userAccountId;
     }
     /**
      * @return ClientId
      */

1029) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:105    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         return $this->clientId;
     }
     /**
      * @return array
      */

1030) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:113    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return explode(' ', $this->scopes);
     }
     /**
      * @return bool
      */

1031) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:121    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isRevoked() : bool
+    protected function isRevoked() : bool
     {
         return $this->revoked;
     }
     /**
      * @return PreConfiguredAuthorization
      */

1032) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:132    [M] TrueValue

--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         $event = PreConfiguredAuthorizationRevokedEvent::create($clone->getPreConfiguredAuthorizationId());
         $clone->record($event);
         return $clone;
     }
     /**
      * @param Event $event

1033) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:129    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function markAsRevoked() : self
+    protected function markAsRevoked() : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         $event = PreConfiguredAuthorizationRevokedEvent::create($clone->getPreConfiguredAuthorizationId());
         $clone->record($event);
         return $clone;

1034) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:147    [M] LogicalNot

--- Original
+++ New
@@ @@
         $map = $this->getEventMap();
-        if (!array_key_exists($event->getType(), $map)) {
+        if (array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->preConfiguredAuthorizationId && $this->preConfiguredAuthorizationId !== $event->getDomainId()) {
             throw new \InvalidArgumentException('Event not applicable for this initial access token.');
         }
         $method = $map[$event->getType()];

1035) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:150    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $this->preConfiguredAuthorizationId && $this->preConfiguredAuthorizationId !== $event->getDomainId()) {
+        if (null === $this->preConfiguredAuthorizationId && $this->preConfiguredAuthorizationId !== $event->getDomainId()) {
             throw new \InvalidArgumentException('Event not applicable for this initial access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**

1036) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:150    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $this->preConfiguredAuthorizationId && $this->preConfiguredAuthorizationId !== $event->getDomainId()) {
+        if (null !== $this->preConfiguredAuthorizationId && $this->preConfiguredAuthorizationId === $event->getDomainId()) {
             throw new \InvalidArgumentException('Event not applicable for this initial access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**

1037) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:150    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if (null !== $this->preConfiguredAuthorizationId && $this->preConfiguredAuthorizationId !== $event->getDomainId()) {
+        if (null !== $this->preConfiguredAuthorizationId || $this->preConfiguredAuthorizationId !== $event->getDomainId()) {
             throw new \InvalidArgumentException('Event not applicable for this initial access token.');
         }
         $method = $map[$event->getType()];
         return $this->{$method}($event);
     }
     /**

1038) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:144    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function apply(Event $event) : self
+    protected function apply(Event $event) : self
     {
         $map = $this->getEventMap();
         if (!array_key_exists($event->getType(), $map)) {
             throw new \InvalidArgumentException('Unsupported event.');
         }
         if (null !== $this->preConfiguredAuthorizationId && $this->preConfiguredAuthorizationId !== $event->getDomainId()) {

1039) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:161    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/model/pre-configured-authorization/1.0/schema';
     }
     /**
      * {@inheritdoc}
      */

1040) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:169    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function createFromJson(\stdClass $json) : DomainObject
+    protected static function createFromJson(\stdClass $json) : DomainObject
     {
         $preConfiguredAuthorizationId = PreConfiguredAuthorizationId::create($json->pre_configured_authorization_id);
         $userAccountId = UserAccountId::create($json->user_account_id);
         $clientId = ClientId::create($json->client_id);
         $scopes = implode(' ', (array) $json->scopes);
         $revoked = $json->is_revoked;

1041) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:190    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         $data = ['$schema' => $this->getSchema(), 'type' => get_class($this), 'pre_configured_authorization_id' => $this->getPreConfiguredAuthorizationId()->getValue(), 'user_account_id' => $this->getUserAccountId()->getValue(), 'client_id' => $this->getClientId()->getValue(), 'scopes' => $this->getScopes(), 'is_revoked' => $this->isRevoked()];
         return $data;
     }
     /**
      * @return array

1042) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:221    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function applyPreConfiguredAuthorizationCreatedEvent(PreConfiguredAuthorizationCreatedEvent $event) : self
+    private function applyPreConfiguredAuthorizationCreatedEvent(PreConfiguredAuthorizationCreatedEvent $event) : self
     {
         $clone = clone $this;
         $clone->preConfiguredAuthorizationId = $event->getPreConfiguredAuthorizationId();
         $clone->userAccountId = $event->getUserAccountId();
         $clone->clientId = $event->getClientId();
         $clone->scopes = implode(' ', $event->getScopes());

1043) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:240    [M] TrueValue

--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->revoked = true;
+        $clone->revoked = false;
         return $clone;
     }
 }


1044) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorization.php:237    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function applyPreConfiguredAuthorizationRevokedEvent(PreConfiguredAuthorizationRevokedEvent $event) : self
+    private function applyPreConfiguredAuthorizationRevokedEvent(PreConfiguredAuthorizationRevokedEvent $event) : self
     {
         $clone = clone $this;
         $clone->revoked = true;
         return $clone;
     }
 }

1045) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/PreConfiguredAuthorizationId.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }


1046) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/FormPostResponseMode.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return ResponseType::RESPONSE_TYPE_MODE_FORM_POST;
     }
     /**
      * {@inheritdoc}
      */

1047) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/FormPostResponseMode.php:55    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function buildResponse(string $redirectUri, array $data) : ResponseInterface
+    protected function buildResponse(string $redirectUri, array $data) : ResponseInterface
     {
         $template = $this->renderer->render($redirectUri, $data);
         $response = $this->responseFactory->createResponse();
         $response = $response->withHeader('Content-Type', 'text/html');
         $response->getBody()->write($template);
         return $response;

1048) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/FragmentResponseMode.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return ResponseType::RESPONSE_TYPE_MODE_FRAGMENT;
     }
     /**
      * {@inheritdoc}
      */

1049) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/FragmentResponseMode.php:60    [M] PlusEqual

--- Original
+++ New
@@ @@
         parse_str($uri->getFragment(), $fragmentParams);
-        $fragmentParams += $data;
+        $fragmentParams -= $data;
         $uri = $uri->withFragment(http_build_query($fragmentParams));
         $response = $this->responseFactory->createResponse(302);
         $response = $response->withHeader('Location', $uri->__toString());
         return $response;
     }
 }

1050) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/FragmentResponseMode.php:56    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function buildResponse(string $redirectUri, array $data) : ResponseInterface
+    protected function buildResponse(string $redirectUri, array $data) : ResponseInterface
     {
         $uri = $this->uriFactory->createUri($redirectUri);
         parse_str($uri->getFragment(), $fragmentParams);
         $fragmentParams += $data;
         $uri = $uri->withFragment(http_build_query($fragmentParams));
         $response = $this->responseFactory->createResponse(302);

1051) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/QueryResponseMode.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function name() : string
+    protected function name() : string
     {
         return ResponseType::RESPONSE_TYPE_MODE_QUERY;
     }
     /**
      * {@inheritdoc}
      */

1052) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/QueryResponseMode.php:61    [M] PlusEqual

--- Original
+++ New
@@ @@
         parse_str($uri->getQuery(), $queryParams);
-        $queryParams += $data;
+        $queryParams -= $data;
         $uri = $uri->withQuery(http_build_query($queryParams));
         $response = $this->responseFactory->createResponse(302);
         $response = $response->withHeader('Location', $uri->__toString());
         return $response;
     }
 }

1053) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/QueryResponseMode.php:56    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function buildResponse(string $redirectUri, array $data) : ResponseInterface
+    protected function buildResponse(string $redirectUri, array $data) : ResponseInterface
     {
         $uri = $this->uriFactory->createUri($redirectUri);
         $uri = $uri->withFragment('_=_');
         parse_str($uri->getQuery(), $queryParams);
         $queryParams += $data;
         $uri = $uri->withQuery(http_build_query($queryParams));

1054) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/ResponseModeManager.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         return array_keys($this->responseModes);
     }
     /**
      * @param ResponseMode $responseMode
      *

1055) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/ResponseModeManager.php:40    [M] This

--- Original
+++ New
@@ @@
         $this->responseModes[$responseMode->name()] = $responseMode;
-        return $this;
+        return null;
     }
     /**
      * @param string $name
      *
      * @return bool
      */

1056) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/ResponseModeManager.php:36    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(ResponseMode $responseMode)
+    protected function add(ResponseMode $responseMode)
     {
         $this->responseModes[$responseMode->name()] = $responseMode;
         return $this;
     }
     /**
      * @param string $name

1057) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/ResponseModeManager.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function has(string $name) : bool
+    protected function has(string $name) : bool
     {
         return array_key_exists($name, $this->responseModes);
     }
     /**
      * @param string $name
      *

1058) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/ResponseModeManager.php:62    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->has($name)) {
+        if ($this->has($name)) {
             throw new \InvalidArgumentException(sprintf('The response mode with name "%s" is not supported.', $name));
         }
         return $this->responseModes[$name];
     }
     /**
      * @return string[]

1059) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/ResponseModeManager.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function get(string $name) : ResponseMode
+    protected function get(string $name) : ResponseMode
     {
         if (!$this->has($name)) {
             throw new \InvalidArgumentException(sprintf('The response mode with name "%s" is not supported.', $name));
         }
         return $this->responseModes[$name];
     }

1060) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseMode/ResponseModeManager.php:72    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function list() : array
+    protected function list() : array
     {
         return array_keys($this->responseModes);
     }
 }


1061) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeManager.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function has(string $name) : bool
+    protected function has(string $name) : bool
     {
         return array_key_exists($name, $this->responseTypes);
     }
     /**
      * @param string $names
      *

1062) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeProcessor.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(Authorization $authorization) : self
+    protected static function create(Authorization $authorization) : self
     {
         return new self($authorization);
     }
     /**
      * @return Authorization
      */

1063) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeProcessor.php:54    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        return call_user_func($this->callableForNextRule(0), $this->authorization);
+        return call_user_func($this->callableForNextRule(1), $this->authorization);
     }
     /**
      * @param int $index
      *
      * @return \Closure
      */

1064) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeProcessor.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process() : Authorization
+    protected function process() : Authorization
     {
         return call_user_func($this->callableForNextRule(0), $this->authorization);
     }
     /**
      * @param int $index
      *

1065) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeProcessor.php:64    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!isset($this->responseTypes[$index])) {
+        if (isset($this->responseTypes[$index])) {
             return function (Authorization $authorization) {
                 return $authorization;
             };
         }
         $responseType = $this->responseTypes[$index];
         return function (Authorization $authorization) use($responseType, $index) : Authorization {

1066) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeProcessor.php:72    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         return function (Authorization $authorization) use($responseType, $index) : Authorization {
-            return $responseType->process($authorization, $this->callableForNextRule($index + 1));
+            return $responseType->process($authorization, $this->callableForNextRule($index + 0));
         };
     }
 }


1067) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/ResponseTypeProcessor.php:72    [M] Plus

--- Original
+++ New
@@ @@
         return function (Authorization $authorization) use($responseType, $index) : Authorization {
-            return $responseType->process($authorization, $this->callableForNextRule($index + 1));
+            return $responseType->process($authorization, $this->callableForNextRule($index - 1));
         };
     }
 }


1068) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/IdTokenHintDiscovery.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enablePairwiseSubject(PairwiseSubjectIdentifierAlgorithm $pairwiseAlgorithm)
+    protected function enablePairwiseSubject(PairwiseSubjectIdentifierAlgorithm $pairwiseAlgorithm)
     {
         $this->pairwiseAlgorithm = $pairwiseAlgorithm;
     }
     /**
      * {@inheritdoc}
      */

1069) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/IdTokenHintDiscovery.php:75    [M] LogicalNot

--- Original
+++ New
@@ @@
                 $idToken = $this->idTokenLoader->load($idTokenId);
-                if (!$idToken instanceof IdToken) {
+                if ($idToken instanceof IdToken) {
                     throw new \InvalidArgumentException('The parameter "id_token_hint" does not contain a valid ID Token.');
                 }
                 $userAccountId = $idToken->getUserAccountId();
                 if (null !== $this->pairwiseAlgorithm) {
                     $publicId = $this->pairwiseAlgorithm->getPublicIdFromSubjectIdentifier($userAccountId->getValue());
                     if (null === $publicId) {

1070) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/IdTokenHintDiscovery.php:79    [M] NotIdentical

--- Original
+++ New
@@ @@
                 $userAccountId = $idToken->getUserAccountId();
-                if (null !== $this->pairwiseAlgorithm) {
+                if (null === $this->pairwiseAlgorithm) {
                     $publicId = $this->pairwiseAlgorithm->getPublicIdFromSubjectIdentifier($userAccountId->getValue());
                     if (null === $publicId) {
                         throw new \InvalidArgumentException('Unable to retrieve the user account using the "id_token_hint" parameter.');
                     }
                 } else {
                     $publicId = $userAccountId->getValue();

1071) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/IdTokenHintDiscovery.php:81    [M] Identical

--- Original
+++ New
@@ @@
                     $publicId = $this->pairwiseAlgorithm->getPublicIdFromSubjectIdentifier($userAccountId->getValue());
-                    if (null === $publicId) {
+                    if (null !== $publicId) {
                         throw new \InvalidArgumentException('Unable to retrieve the user account using the "id_token_hint" parameter.');
                     }
                 } else {
                     $publicId = $userAccountId->getValue();
                 }
                 $realUserAccountId = UserAccountId::create($publicId);

1072) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/IdTokenHintDiscovery.php:90    [M] NotIdentical

--- Original
+++ New
@@ @@
                 $tmp = $this->userAccountRepository->find($realUserAccountId);
-                if (null !== $tmp) {
+                if (null === $tmp) {
                     if (null !== $authorization->getUserAccount()) {
                         if ($tmp->getPublicId()->getValue() !== $authorization->getUserAccount()->getPublicId()->getValue()) {
                             throw new RedirectToLoginPageException($authorization);
                         }
                     }
                 }

1073) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/IdTokenHintDiscovery.php:91    [M] NotIdentical

--- Original
+++ New
@@ @@
                 if (null !== $tmp) {
-                    if (null !== $authorization->getUserAccount()) {
+                    if (null === $authorization->getUserAccount()) {
                         if ($tmp->getPublicId()->getValue() !== $authorization->getUserAccount()->getPublicId()->getValue()) {
                             throw new RedirectToLoginPageException($authorization);
                         }
                     }
                 }
             } catch (\InvalidArgumentException $e) {

1074) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/IdTokenHintDiscovery.php:92    [M] NotIdentical

--- Original
+++ New
@@ @@
                     if (null !== $authorization->getUserAccount()) {
-                        if ($tmp->getPublicId()->getValue() !== $authorization->getUserAccount()->getPublicId()->getValue()) {
+                        if ($tmp->getPublicId()->getValue() === $authorization->getUserAccount()->getPublicId()->getValue()) {
                             throw new RedirectToLoginPageException($authorization);
                         }
                     }
                 }
             } catch (\InvalidArgumentException $e) {
                 throw new CreateRedirectionException($authorization, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage());

1075) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/IdTokenHintDiscovery.php:68    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
+    protected function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
     {
         $authorization = $next($request, $authorization);
         if ($authorization->hasQueryParam('id_token_hint')) {
             try {
                 $idTokenId = IdTokenId::create($authorization->getQueryParam('id_token_hint'));
                 $idToken = $this->idTokenLoader->load($idTokenId);

1076) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/LoginParameterChecker.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
         $authorization = $next($request, $authorization);
-        if ($authorization->hasPrompt('login') && !$authorization->isUserAccountFullyAuthenticated()) {
+        if ($authorization->hasPrompt('login') && $authorization->isUserAccountFullyAuthenticated()) {
             throw new RedirectToLoginPageException($authorization);
         }
         return $authorization;
     }
 }


1077) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/LoginParameterChecker.php:28    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $authorization = $next($request, $authorization);
-        if ($authorization->hasPrompt('login') && !$authorization->isUserAccountFullyAuthenticated()) {
+        if ($authorization->hasPrompt('login') || !$authorization->isUserAccountFullyAuthenticated()) {
             throw new RedirectToLoginPageException($authorization);
         }
         return $authorization;
     }
 }


1078) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/LoginParameterChecker.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
+    protected function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
     {
         $authorization = $next($request, $authorization);
         if ($authorization->hasPrompt('login') && !$authorization->isUserAccountFullyAuthenticated()) {
             throw new RedirectToLoginPageException($authorization);
         }
         return $authorization;

1079) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/MaxAgeParameterChecker.php:29    [M] NotIdentical

--- Original
+++ New
@@ @@
         $userAccount = $authorization->getUserAccount();
-        if (null !== $userAccount) {
+        if (null === $userAccount) {
             // Whatever the prompt is, if the max_age constraint is not satisfied, the user is redirected to the login page
             if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
                 //FIXME: check if the client has a default_max_age parameter
                 throw new RedirectToLoginPageException($authorization);
             }
         }

1080) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/MaxAgeParameterChecker.php:31    [M] NotIdentical

--- Original
+++ New
@@ @@
             // Whatever the prompt is, if the max_age constraint is not satisfied, the user is redirected to the login page
-            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
+            if ($authorization->hasQueryParam('max_age') && null === $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
                 //FIXME: check if the client has a default_max_age parameter
                 throw new RedirectToLoginPageException($authorization);
             }
         }
         return $authorization;
     }

1081) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/MaxAgeParameterChecker.php:31    [M] LogicalAnd

--- Original
+++ New
@@ @@
             // Whatever the prompt is, if the max_age constraint is not satisfied, the user is redirected to the login page
-            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
+            if (($authorization->hasQueryParam('max_age') || null !== $userAccount->getLastLoginAt()) && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
                 //FIXME: check if the client has a default_max_age parameter
                 throw new RedirectToLoginPageException($authorization);
             }
         }
         return $authorization;
     }

1082) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/MaxAgeParameterChecker.php:31    [M] Minus

--- Original
+++ New
@@ @@
             // Whatever the prompt is, if the max_age constraint is not satisfied, the user is redirected to the login page
-            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
+            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() + $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
                 //FIXME: check if the client has a default_max_age parameter
                 throw new RedirectToLoginPageException($authorization);
             }
         }
         return $authorization;
     }

1083) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/MaxAgeParameterChecker.php:31    [M] GreaterThan

--- Original
+++ New
@@ @@
             // Whatever the prompt is, if the max_age constraint is not satisfied, the user is redirected to the login page
-            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
+            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() >= (int) $authorization->getQueryParam('max_age')) {
                 //FIXME: check if the client has a default_max_age parameter
                 throw new RedirectToLoginPageException($authorization);
             }
         }
         return $authorization;
     }

1084) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/MaxAgeParameterChecker.php:31    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
             // Whatever the prompt is, if the max_age constraint is not satisfied, the user is redirected to the login page
-            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
+            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() <= (int) $authorization->getQueryParam('max_age')) {
                 //FIXME: check if the client has a default_max_age parameter
                 throw new RedirectToLoginPageException($authorization);
             }
         }
         return $authorization;
     }

1085) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/MaxAgeParameterChecker.php:31    [M] LogicalAnd

--- Original
+++ New
@@ @@
             // Whatever the prompt is, if the max_age constraint is not satisfied, the user is redirected to the login page
-            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
+            if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() || time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {
                 //FIXME: check if the client has a default_max_age parameter
                 throw new RedirectToLoginPageException($authorization);
             }
         }
         return $authorization;
     }

1086) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/MaxAgeParameterChecker.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
+    protected function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
     {
         $authorization = $next($request, $authorization);
         $userAccount = $authorization->getUserAccount();
         if (null !== $userAccount) {
             // Whatever the prompt is, if the max_age constraint is not satisfied, the user is redirected to the login page
             if ($authorization->hasQueryParam('max_age') && null !== $userAccount->getLastLoginAt() && time() - $userAccount->getLastLoginAt()->getTimestamp() > (int) $authorization->getQueryParam('max_age')) {

1087) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/PromptNoneParameterChecker.php:30    [M] Identical

--- Original
+++ New
@@ @@
         $userAccount = $authorization->getUserAccount();
-        if (null === $userAccount && $authorization->hasPrompt('none')) {
+        if (null !== $userAccount && $authorization->hasPrompt('none')) {
             throw new CreateRedirectionException($authorization, OAuth2Exception::ERROR_LOGIN_REQUIRED, 'The resource owner is not logged in.');
         }
         return $authorization;
     }
 }


1088) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/PromptNoneParameterChecker.php:30    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $userAccount = $authorization->getUserAccount();
-        if (null === $userAccount && $authorization->hasPrompt('none')) {
+        if (null === $userAccount || $authorization->hasPrompt('none')) {
             throw new CreateRedirectionException($authorization, OAuth2Exception::ERROR_LOGIN_REQUIRED, 'The resource owner is not logged in.');
         }
         return $authorization;
     }
 }


1089) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/PromptNoneParameterChecker.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
+    protected function find(ServerRequestInterface $request, Authorization $authorization, callable $next) : Authorization
     {
         $authorization = $next($request, $authorization);
         $userAccount = $authorization->getUserAccount();
         if (null === $userAccount && $authorization->hasPrompt('none')) {
             throw new CreateRedirectionException($authorization, OAuth2Exception::ERROR_LOGIN_REQUIRED, 'The resource owner is not logged in.');
         }

1090) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/UserAccountDiscoveryManager.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(UserAccountDiscovery $extension)
+    protected function add(UserAccountDiscovery $extension)
     {
         $this->extensions[] = $extension;
     }
     /**
      * @param ServerRequestInterface $request
      * @param Authorization          $authorization

1091) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/UserAccountDiscoveryManager.php:42    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        return call_user_func($this->callableForNextRule(0), $request, $authorization);
+        return call_user_func($this->callableForNextRule(1), $request, $authorization);
     }
     /**
      * @param int $index
      *
      * @return \Closure
      */

1092) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/UserAccountDiscoveryManager.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function find(ServerRequestInterface $request, Authorization $authorization) : Authorization
+    protected function find(ServerRequestInterface $request, Authorization $authorization) : Authorization
     {
         return call_user_func($this->callableForNextRule(0), $request, $authorization);
     }
     /**
      * @param int $index
      *

1093) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/UserAccountDiscoveryManager.php:52    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!isset($this->extensions[$index])) {
+        if (isset($this->extensions[$index])) {
             return function (ServerRequestInterface $request, Authorization $authorization) : Authorization {
                 return $authorization;
             };
         }
         $extension = $this->extensions[$index];
         return function (ServerRequestInterface $request, Authorization $authorization) use($extension, $index) : Authorization {

1094) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/UserAccountDiscoveryManager.php:60    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         return function (ServerRequestInterface $request, Authorization $authorization) use($extension, $index) : Authorization {
-            return $extension->find($request, $authorization, $this->callableForNextRule($index + 1));
+            return $extension->find($request, $authorization, $this->callableForNextRule($index + 0));
         };
     }
 }


1095) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/AuthorizationEndpoint/UserAccountDiscovery/UserAccountDiscoveryManager.php:60    [M] Plus

--- Original
+++ New
@@ @@
         return function (ServerRequestInterface $request, Authorization $authorization) use($extension, $index) : Authorization {
-            return $extension->find($request, $authorization, $this->callableForNextRule($index + 1));
+            return $extension->find($request, $authorization, $this->callableForNextRule($index - 1));
         };
     }
 }


1096) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/BearerTokenType/BearerToken.php:134    [M] FalseValue

--- Original
+++ New
@@ @@
         if (!$accessToken->hasParameter('token_type')) {
-            return false;
+            return true;
         }
         return $accessToken->getParameter('token_type') === $this->name();
     }
     /**
      * Get the token from the authorization header.
      *

1097) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/initial-access-token/created/1.0/schema';
     }
     /**
      * @param InitialAccessTokenId    $initialAccessTokenId
      * @param UserAccountId           $userAccountId

1098) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:104    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getInitialAccessTokenId();
     }
     /**
      * {@inheritdoc}
      */

1099) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenCreatedEvent.php:112    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['user_account_id' => $this->userAccountId ? $this->userAccountId->getValue() : null, 'expires_at' => $this->expiresAt ? $this->expiresAt->getTimestamp() : null];
     }
     /**
      * {@inheritdoc}
      */

1100) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenRevokedEvent.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/initial-access-token/revoked/1.0/schema';
     }
     /**
      * @param InitialAccessTokenId $initialAccessTokenId
      *

1101) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/Event/InitialAccessTokenRevokedEvent.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
     }
     /**
      * {@inheritdoc}
      */
     public static function createFromJson(\stdClass $json) : DomainObject

1102) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:112    [M] LessThan

--- Original
+++ New
@@ @@
     {
-        return $this->expiresAt->getTimestamp() < time();
+        return $this->expiresAt->getTimestamp() <= time();
     }
     /**
      * @return bool
      */
     public function isRevoked() : bool
     {

1103) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:112    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     {
-        return $this->expiresAt->getTimestamp() < time();
+        return $this->expiresAt->getTimestamp() >= time();
     }
     /**
      * @return bool
      */
     public function isRevoked() : bool
     {

1104) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/ClientRegistrationEndpoint/InitialAccessToken.php:110    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasExpired() : bool
+    protected function hasExpired() : bool
     {
         return $this->expiresAt->getTimestamp() < time();
     }
     /**
      * @return bool
      */

1105) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/AccessTokenTypeHint.php:74    [M] FalseValue

--- Original
+++ New
@@ @@
         if (!$token instanceof AccessToken || true === $token->isRevoked()) {
-            return ['active' => false];
+            return ['active' => true];
         }
         $values = ['active' => !$token->hasExpired(), 'client_id' => $token->getClientId(), 'resource_owner' => $token->getResourceOwnerId(), 'expires_in' => $token->getExpiresIn()];
         if (!empty($token->getScopes())) {
             $values['scope'] = implode(' ', $token->getScopes());
         }
         return $values + $token->getParameters()->all();

1106) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:98    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/access-token/created/1.0/schema';
     }
     /**
      * @param AccessTokenId         $accessTokenId
      * @param ResourceOwnerId       $resourceOwnerId

1107) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:207    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getAccessTokenId();
     }
     /**
      * {@inheritdoc}
      */

1108) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenCreatedEvent.php:215    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['resource_owner_id' => $this->resourceOwnerId->getValue(), 'resource_owner_class' => get_class($this->resourceOwnerId), 'client_id' => $this->clientId->getValue(), 'parameters' => (object) $this->parameters->all(), 'metadatas' => (object) $this->metadatas->all(), 'scopes' => $this->scopes, 'expires_at' => $this->expiresAt->getTimestamp(), 'resource_server_id' => $this->resourceServerId ? $this->resourceServerId->getValue() : null];
     }
 }


1109) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenRevokedEvent.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/access-token/revoked/1.0/schema';
     }
     /**
      * @param AccessTokenId $accessTokenId
      *

1110) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/AccessToken/Event/AccessTokenRevokedEvent.php:91    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
     }
 }


1111) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:174    [M] LogicalNot

--- Original
+++ New
@@ @@
         $grant_types = $this->has('grant_types') ? $this->get('grant_types') : [];
-        if (!is_array($grant_types)) {
+        if (is_array($grant_types)) {
             throw new \InvalidArgumentException('The metadata "grant_types" must be an array.');
         }
         return in_array($grant_type, $grant_types);
     }
     /**
      * @param string $response_type

1112) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:171    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isGrantTypeAllowed(string $grant_type) : bool
+    protected function isGrantTypeAllowed(string $grant_type) : bool
     {
         $grant_types = $this->has('grant_types') ? $this->get('grant_types') : [];
         if (!is_array($grant_types)) {
             throw new \InvalidArgumentException('The metadata "grant_types" must be an array.');
         }
         return in_array($grant_type, $grant_types);

1113) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:189    [M] LogicalNot

--- Original
+++ New
@@ @@
         $response_types = $this->has('response_types') ? $this->get('response_types') : [];
-        if (!is_array($response_type)) {
+        if (is_array($response_type)) {
             throw new \InvalidArgumentException('The metadata "response_types" must be an array.');
         }
         return in_array($response_type, $response_types);
     }
     /**
      * @param string $token_type

1114) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:186    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isResponseTypeAllowed(string $response_type) : bool
+    protected function isResponseTypeAllowed(string $response_type) : bool
     {
         $response_types = $this->has('response_types') ? $this->get('response_types') : [];
         if (!is_array($response_type)) {
             throw new \InvalidArgumentException('The metadata "response_types" must be an array.');
         }
         return in_array($response_type, $response_types);

1115) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:203    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->has('token_types')) {
+        if ($this->has('token_types')) {
             return true;
         }
         $token_types = $this->get('token_types');
         if (!is_array($token_types)) {
             throw new \InvalidArgumentException('The metadata "token_types" must be an array.');
         }

1116) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:204    [M] TrueValue

--- Original
+++ New
@@ @@
         if (!$this->has('token_types')) {
-            return true;
+            return false;
         }
         $token_types = $this->get('token_types');
         if (!is_array($token_types)) {
             throw new \InvalidArgumentException('The metadata "token_types" must be an array.');
         }
         return in_array($token_type, $token_types);

1117) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:207    [M] LogicalNot

--- Original
+++ New
@@ @@
         $token_types = $this->get('token_types');
-        if (!is_array($token_types)) {
+        if (is_array($token_types)) {
             throw new \InvalidArgumentException('The metadata "token_types" must be an array.');
         }
         return in_array($token_type, $token_types);
     }
     /**
      * @return bool

1118) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:201    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isTokenTypeAllowed(string $token_type) : bool
+    protected function isTokenTypeAllowed(string $token_type) : bool
     {
         if (!$this->has('token_types')) {
             return true;
         }
         $token_types = $this->get('token_types');
         if (!is_array($token_types)) {

1119) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:243    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         }
-        return 0;
+        return 1;
     }
     /**
      * @return bool
      */
     public function areClientCredentialsExpired() : bool
     {

1120) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:237    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClientCredentialsExpiresAt() : int
+    protected function getClientCredentialsExpiresAt() : int
     {
         if ($this->has('client_secret_expires_at')) {
             return $this->get('client_secret_expires_at');
         }
         return 0;
     }

1121) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:251    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        if (0 === $this->getClientCredentialsExpiresAt()) {
+        if (1 === $this->getClientCredentialsExpiresAt()) {
             return false;
         }
         return time() > $this->getClientCredentialsExpiresAt();
     }
     /**
      * @return bool

1122) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:251    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (0 === $this->getClientCredentialsExpiresAt()) {
+        if (0 !== $this->getClientCredentialsExpiresAt()) {
             return false;
         }
         return time() > $this->getClientCredentialsExpiresAt();
     }
     /**
      * @return bool

1123) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:252    [M] FalseValue

--- Original
+++ New
@@ @@
         if (0 === $this->getClientCredentialsExpiresAt()) {
-            return false;
+            return true;
         }
         return time() > $this->getClientCredentialsExpiresAt();
     }
     /**
      * @return bool
      */

1124) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:255    [M] GreaterThan

--- Original
+++ New
@@ @@
         }
-        return time() > $this->getClientCredentialsExpiresAt();
+        return time() >= $this->getClientCredentialsExpiresAt();
     }
     /**
      * @return bool
      */
     public function hasPublicKeySet() : bool
     {

1125) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:255    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         }
-        return time() > $this->getClientCredentialsExpiresAt();
+        return time() <= $this->getClientCredentialsExpiresAt();
     }
     /**
      * @return bool
      */
     public function hasPublicKeySet() : bool
     {

1126) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:249    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function areClientCredentialsExpired() : bool
+    protected function areClientCredentialsExpired() : bool
     {
         if (0 === $this->getClientCredentialsExpiresAt()) {
             return false;
         }
         return time() > $this->getClientCredentialsExpiresAt();
     }

1127) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Client.php:289    [M] Identical

--- Original
+++ New
@@ @@
             $key = JWK::create(['kty' => 'oct', 'use' => 'sig', 'k' => $this->get('client_secret')]);
-            if (null === $jwkset) {
+            if (null !== $jwkset) {
                 $jwkset = JWKSet::createFromKeys([]);
                 $jwkset = $jwkset->with($key);
                 return $jwkset;
             } else {
                 $jwkset = $jwkset->with($key);
             }

1128) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:93    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/client/created/1.0/schema';
     }
     /**
      * {@inheritdoc}
      */

1129) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:101    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->clientId;
     }
     /**
      * {@inheritdoc}
      */

1130) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientCreatedEvent.php:109    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['user_account_id' => $this->userAccountId ? $this->userAccountId->getValue() : null, 'parameters' => (object) $this->parameters->all()];
     }
     /**
      * @return ClientId
      */

1131) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientDeletedEvent.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/client/deleted/1.0/schema';
     }
     /**
      * @param ClientId $clientId
      *

1132) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientDeletedEvent.php:87    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
     }
     /**
      * @return ClientId
      */
     public function getClientId() : ClientId

1133) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/client/owner-changed/1.0/schema';
     }
     /**
      * @param ClientId      $clientId
      * @param UserAccountId $newOwnerId

1134) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientOwnerChangedEvent.php:114    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['new_owner_id' => $this->newOwnerId->getValue()];
     }
 }


1135) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientParametersUpdatedEvent.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/client/parameters-updated/1.0/schema';
     }
     /**
      * @param ClientId $clientId
      * @param DataBag  $parameters

1136) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Event/ClientParametersUpdatedEvent.php:96    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['parameters' => (object) $this->parameters->all()];
     }
     /**
      * {@inheritdoc}
      */

1137) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RuleManager.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(Rule $rule) : self
+    protected function add(Rule $rule) : self
     {
         $this->rules[] = $rule;
         return $this;
     }
     /**
      * @return Rule[]

1138) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RuleManager.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         return $this->rules;
     }
     /**
      * @param ClientId $clientId
      * @param DataBag  $commandParameters

1139) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RuleManager.php:74    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         return function (ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters) use($rule, $index) : DataBag {
-            return $rule->handle($clientId, $commandParameters, $validatedParameters, $this->callableForNextRule($index + 1));
+            return $rule->handle($clientId, $commandParameters, $validatedParameters, $this->callableForNextRule($index + 0));
         };
     }
 }


1140) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/RuleManager.php:74    [M] Plus

--- Original
+++ New
@@ @@
         return function (ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters) use($rule, $index) : DataBag {
-            return $rule->handle($clientId, $commandParameters, $validatedParameters, $this->callableForNextRule($index + 1));
+            return $rule->handle($clientId, $commandParameters, $validatedParameters, $this->callableForNextRule($index - 1));
         };
     }
 }


1141) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopeRule.php:42    [M] LogicalNot

--- Original
+++ New
@@ @@
             $defaultScope = $commandParameters->get('scope');
-            if (!is_string($defaultScope)) {
+            if (is_string($defaultScope)) {
                 throw new \InvalidArgumentException('The parameter "scope" must be a string.');
             }
             if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
                 throw new \InvalidArgumentException('Invalid characters found in the "scope" parameter.');
             }
             $validatedParameters = $validatedParameters->with('scope', $commandParameters->get('scope'));

1142) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopeRule.php:45    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             }
-            if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
+            if (0 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
                 throw new \InvalidArgumentException('Invalid characters found in the "scope" parameter.');
             }
             $validatedParameters = $validatedParameters->with('scope', $commandParameters->get('scope'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);
     }

1143) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopeRule.php:45    [M] NotIdentical

--- Original
+++ New
@@ @@
             }
-            if (1 !== preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
+            if (1 === preg_match('/^[\\x20\\x23-\\x5B\\x5D-\\x7E]+$/', $defaultScope)) {
                 throw new \InvalidArgumentException('Invalid characters found in the "scope" parameter.');
             }
             $validatedParameters = $validatedParameters->with('scope', $commandParameters->get('scope'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);
     }

1144) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/ScopeRule.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('scope')) {
             $defaultScope = $commandParameters->get('scope');
             if (!is_string($defaultScope)) {
                 throw new \InvalidArgumentException('The parameter "scope" must be a string.');
             }

1145) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SectorIdentifierUriRule.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('sector_identifier_uri')) {
             Assertion::url($commandParameters->get('sector_identifier_uri'), sprintf('The sector identifier URI "%s" is not valid.', $commandParameters->get('sector_identifier_uri')));
             $this->checkSectorIdentifierUri($commandParameters->get('sector_identifier_uri'));
             $validatedParameters = $validatedParameters->with('sector_identifier_uri', $commandParameters->get('sector_identifier_uri'));
         }

1146) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SectorIdentifierUriRule.php:67    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $allowedProtocols = ['https'];
-        Assertion::inArray(mb_substr($url, 0, mb_strpos($url, '://', 0, '8bit'), '8bit'), $allowedProtocols, sprintf('The provided sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
+        Assertion::inArray(mb_substr($url, 1, mb_strpos($url, '://', 0, '8bit'), '8bit'), $allowedProtocols, sprintf('The provided sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
         $request = $this->responseFactory->createRequest('GET', $url);
         $response = $this->client->sendRequest($request);
         Assertion::eq(200, $response->getStatusCode(), sprintf('Unable to get Uris from the Sector Identifier Uri "%s".', $url));
         $body = $response->getBody()->getContents();
         $data = json_decode($body, true);
         Assertion::isArray($data, 'The provided sector identifier URI is not valid: bad response.');

1147) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SectorIdentifierUriRule.php:67    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $allowedProtocols = ['https'];
-        Assertion::inArray(mb_substr($url, 0, mb_strpos($url, '://', 0, '8bit'), '8bit'), $allowedProtocols, sprintf('The provided sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
+        Assertion::inArray(mb_substr($url, 0, mb_strpos($url, '://', 1, '8bit'), '8bit'), $allowedProtocols, sprintf('The provided sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
         $request = $this->responseFactory->createRequest('GET', $url);
         $response = $this->client->sendRequest($request);
         Assertion::eq(200, $response->getStatusCode(), sprintf('Unable to get Uris from the Sector Identifier Uri "%s".', $url));
         $body = $response->getBody()->getContents();
         $data = json_decode($body, true);
         Assertion::isArray($data, 'The provided sector identifier URI is not valid: bad response.');

1148) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SectorIdentifierUriRule.php:73    [M] TrueValue

--- Original
+++ New
@@ @@
         $body = $response->getBody()->getContents();
-        $data = json_decode($body, true);
+        $data = json_decode($body, false);
         Assertion::isArray($data, 'The provided sector identifier URI is not valid: bad response.');
         Assertion::notEmpty($data, 'The provided sector identifier URI is not valid: it must contain at least one URI.');
         foreach ($data as $sector_url) {
             Assertion::url($sector_url, 'The provided sector identifier URI is not valid: it must contain only URIs.');
             Assertion::inArray(mb_substr($sector_url, 0, mb_strpos($sector_url, '://', 0, '8bit'), '8bit'), $allowedProtocols, sprintf('An URL provided in the sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
         }

1149) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SectorIdentifierUriRule.php:78    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             Assertion::url($sector_url, 'The provided sector identifier URI is not valid: it must contain only URIs.');
-            Assertion::inArray(mb_substr($sector_url, 0, mb_strpos($sector_url, '://', 0, '8bit'), '8bit'), $allowedProtocols, sprintf('An URL provided in the sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
+            Assertion::inArray(mb_substr($sector_url, 1, mb_strpos($sector_url, '://', 0, '8bit'), '8bit'), $allowedProtocols, sprintf('An URL provided in the sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
         }
     }
 }


1150) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SectorIdentifierUriRule.php:78    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             Assertion::url($sector_url, 'The provided sector identifier URI is not valid: it must contain only URIs.');
-            Assertion::inArray(mb_substr($sector_url, 0, mb_strpos($sector_url, '://', 0, '8bit'), '8bit'), $allowedProtocols, sprintf('An URL provided in the sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
+            Assertion::inArray(mb_substr($sector_url, 0, mb_strpos($sector_url, '://', 1, '8bit'), '8bit'), $allowedProtocols, sprintf('An URL provided in the sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
         }
     }
 }


1151) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SectorIdentifierUriRule.php:76    [M] Foreach_

--- Original
+++ New
@@ @@
         Assertion::notEmpty($data, 'The provided sector identifier URI is not valid: it must contain at least one URI.');
-        foreach ($data as $sector_url) {
+        foreach (array() as $sector_url) {
             Assertion::url($sector_url, 'The provided sector identifier URI is not valid: it must contain only URIs.');
             Assertion::inArray(mb_substr($sector_url, 0, mb_strpos($sector_url, '://', 0, '8bit'), '8bit'), $allowedProtocols, sprintf('An URL provided in the sector identifier URI is not valid: scheme must be one of the following: %s.', implode(', ', $allowedProtocols)));
         }
     }
 }


1152) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SoftwareRule.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isSoftwareStatementRequired() : bool
+    protected function isSoftwareStatementRequired() : bool
     {
         return $this->isSoftwareStatementRequired;
     }
     /**
      * {@inheritdoc}
      */

1153) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SoftwareRule.php:70    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        Assertion::false($this->isSoftwareStatementRequired() && !$commandParameters->has('software_statement'), 'The parameter "software_statement" is mandatory.');
+        Assertion::false($this->isSoftwareStatementRequired() && $commandParameters->has('software_statement'), 'The parameter "software_statement" is mandatory.');
         if ($commandParameters->has('software_statement')) {
             $statement = $commandParameters->get('software_statement');
             Assertion::string($statement, 'The software statement should be a string.');
             $software_statement = $this->loadSoftwareStatement($statement);
             $validatedParameters = $validatedParameters->with('software_statement', $commandParameters->get('software_statement'));
         } else {

1154) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SoftwareRule.php:70    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
-        Assertion::false($this->isSoftwareStatementRequired() && !$commandParameters->has('software_statement'), 'The parameter "software_statement" is mandatory.');
+        Assertion::false($this->isSoftwareStatementRequired() || !$commandParameters->has('software_statement'), 'The parameter "software_statement" is mandatory.');
         if ($commandParameters->has('software_statement')) {
             $statement = $commandParameters->get('software_statement');
             Assertion::string($statement, 'The software statement should be a string.');
             $software_statement = $this->loadSoftwareStatement($statement);
             $validatedParameters = $validatedParameters->with('software_statement', $commandParameters->get('software_statement'));
         } else {

1155) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SoftwareRule.php:80    [M] Foreach_

--- Original
+++ New
@@ @@
         }
-        foreach (['software_id', 'software_version'] as $key) {
+        foreach (array() as $key) {
             if ($commandParameters->has($key)) {
                 $validatedParameters = $validatedParameters->with($key, $commandParameters->get($key));
             }
         }
         $validatedParameters = $next($clientId, $commandParameters, $validatedParameters);
         $validatedParameters = $validatedParameters->withParameters($software_statement);

1156) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SoftwareRule.php:68    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         Assertion::false($this->isSoftwareStatementRequired() && !$commandParameters->has('software_statement'), 'The parameter "software_statement" is mandatory.');
         if ($commandParameters->has('software_statement')) {
             $statement = $commandParameters->get('software_statement');
             Assertion::string($statement, 'The software statement should be a string.');
             $software_statement = $this->loadSoftwareStatement($statement);

1157) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SoftwareRule.php:103    [M] TrueValue

--- Original
+++ New
@@ @@
             Assertion::inArray($jws->getSignature($signatureVerified)->getProtectedHeader('alg'), $this->allowedSignatureAlgorithms);
-            $claims = json_decode($jws->getPayload(), true);
+            $claims = json_decode($jws->getPayload(), false);
             Assertion::isArray($claims, 'Invalid Software Statement.');
             return $claims;
         } catch (\Exception $e) {
             throw new \InvalidArgumentException('Invalid Software Statement.', $e->getCode(), $e);
         }
     }

1158) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/SubjectTypeRule.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('subject_type')) {
             $subjectType = $commandParameters->get('subject_type');
             Assertion::string($subjectType, 'Invalid parameter "subject_type". The value must be a string.');
             $supported_types = ['public'];
             if ($this->userinfo->isPairwiseSubjectIdentifierSupported()) {

1159) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/TokenEndpointAuthenticationMethodEndpointRule.php:42    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$commandParameters->has('token_endpoint_auth_method')) {
+        if ($commandParameters->has('token_endpoint_auth_method')) {
             $commandParameters = $commandParameters->with('token_endpoint_auth_method', 'client_secret_basic');
         }
         Assertion::string($commandParameters->get('token_endpoint_auth_method'), 'The parameter "token_endpoint_auth_method" must be a string.');
         Assertion::true($this->tokenEndpointAuthenticationMethodManager->has($commandParameters->get('token_endpoint_auth_method')), sprintf('The token endpoint authentication method "%s" is not supported. Please use one of the following values: %s', $commandParameters->get('token_endpoint_auth_method'), implode(', ', $this->tokenEndpointAuthenticationMethodManager->all())));
         $tokenEndpointAuthenticationMethod = $this->tokenEndpointAuthenticationMethodManager->get($commandParameters->get('token_endpoint_auth_method'));
         $validatedParameters = $tokenEndpointAuthenticationMethod->checkClientConfiguration($commandParameters, $validatedParameters);

1160) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/TokenEndpointAuthenticationMethodEndpointRule.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if (!$commandParameters->has('token_endpoint_auth_method')) {
             $commandParameters = $commandParameters->with('token_endpoint_auth_method', 'client_secret_basic');
         }
         Assertion::string($commandParameters->get('token_endpoint_auth_method'), 'The parameter "token_endpoint_auth_method" must be a string.');
         Assertion::true($this->tokenEndpointAuthenticationMethodManager->has($commandParameters->get('token_endpoint_auth_method')), sprintf('The token endpoint authentication method "%s" is not supported. Please use one of the following values: %s', $commandParameters->get('token_endpoint_auth_method'), implode(', ', $this->tokenEndpointAuthenticationMethodManager->all())));

1161) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:50    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if ($commandParameters->has('userinfo_signed_response_alg') && null !== $this->jwsBuilder) {
+        if ($commandParameters->has('userinfo_signed_response_alg') && null === $this->jwsBuilder) {
             $this->checkAlgorithms('userinfo_signed_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_signed_response_alg', $commandParameters->get('userinfo_signed_response_alg'));
         }
         if ($commandParameters->has('userinfo_encrypted_response_alg') && $commandParameters->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
             $this->checkAlgorithms('userinfo_encrypted_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_encrypted_response_alg', $commandParameters->get('userinfo_encrypted_response_alg'));

1162) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:50    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
-        if ($commandParameters->has('userinfo_signed_response_alg') && null !== $this->jwsBuilder) {
+        if ($commandParameters->has('userinfo_signed_response_alg') || null !== $this->jwsBuilder) {
             $this->checkAlgorithms('userinfo_signed_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_signed_response_alg', $commandParameters->get('userinfo_signed_response_alg'));
         }
         if ($commandParameters->has('userinfo_encrypted_response_alg') && $commandParameters->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
             $this->checkAlgorithms('userinfo_encrypted_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_encrypted_response_alg', $commandParameters->get('userinfo_encrypted_response_alg'));

1163) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:55    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if ($commandParameters->has('userinfo_encrypted_response_alg') && $commandParameters->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if (($commandParameters->has('userinfo_encrypted_response_alg') || $commandParameters->has('userinfo_encrypted_response_enc')) && null !== $this->jweBuilder) {
             $this->checkAlgorithms('userinfo_encrypted_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_encrypted_response_alg', $commandParameters->get('userinfo_encrypted_response_alg'));
             $this->checkAlgorithms('userinfo_encrypted_response_enc', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_encrypted_response_enc', $commandParameters->get('userinfo_encrypted_response_enc'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);

1164) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:55    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if ($commandParameters->has('userinfo_encrypted_response_alg') && $commandParameters->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if ($commandParameters->has('userinfo_encrypted_response_alg') && $commandParameters->has('userinfo_encrypted_response_enc') && null === $this->jweBuilder) {
             $this->checkAlgorithms('userinfo_encrypted_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_encrypted_response_alg', $commandParameters->get('userinfo_encrypted_response_alg'));
             $this->checkAlgorithms('userinfo_encrypted_response_enc', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_encrypted_response_enc', $commandParameters->get('userinfo_encrypted_response_enc'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);

1165) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:55    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if ($commandParameters->has('userinfo_encrypted_response_alg') && $commandParameters->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if ($commandParameters->has('userinfo_encrypted_response_alg') && $commandParameters->has('userinfo_encrypted_response_enc') || null !== $this->jweBuilder) {
             $this->checkAlgorithms('userinfo_encrypted_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_encrypted_response_alg', $commandParameters->get('userinfo_encrypted_response_alg'));
             $this->checkAlgorithms('userinfo_encrypted_response_enc', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_encrypted_response_enc', $commandParameters->get('userinfo_encrypted_response_enc'));
         }
         return $next($clientId, $commandParameters, $validatedParameters);

1166) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('userinfo_signed_response_alg') && null !== $this->jwsBuilder) {
             $this->checkAlgorithms('userinfo_signed_response_alg', $commandParameters, $this->jwsBuilder->getSignatureAlgorithmManager()->list());
             $validatedParameters = $validatedParameters->with('userinfo_signed_response_alg', $commandParameters->get('userinfo_signed_response_alg'));
         }
         if ($commandParameters->has('userinfo_encrypted_response_alg') && $commandParameters->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {

1167) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:73    [M] LogicalNot

--- Original
+++ New
@@ @@
         $algorithm = $commandParameters->get($parameter);
-        if (!is_string($algorithm) || !in_array($algorithm, $allowedAlgorithms)) {
+        if (is_string($algorithm) || !in_array($algorithm, $allowedAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The parameter "%s" must be an algorithm supported by this server. Please choose one of the following value(s): %s', $parameter, implode(', ', $allowedAlgorithms)));
         }
     }
 }


1168) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:73    [M] LogicalNot

--- Original
+++ New
@@ @@
         $algorithm = $commandParameters->get($parameter);
-        if (!is_string($algorithm) || !in_array($algorithm, $allowedAlgorithms)) {
+        if (!is_string($algorithm) || in_array($algorithm, $allowedAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The parameter "%s" must be an algorithm supported by this server. Please choose one of the following value(s): %s', $parameter, implode(', ', $allowedAlgorithms)));
         }
     }
 }


1169) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserinfoEndpointAlgorithmsRule.php:73    [M] LogicalOr

--- Original
+++ New
@@ @@
         $algorithm = $commandParameters->get($parameter);
-        if (!is_string($algorithm) || !in_array($algorithm, $allowedAlgorithms)) {
+        if (!is_string($algorithm) && !in_array($algorithm, $allowedAlgorithms)) {
             throw new \InvalidArgumentException(sprintf('The parameter "%s" must be an algorithm supported by this server. Please choose one of the following value(s): %s', $parameter, implode(', ', $allowedAlgorithms)));
         }
     }
 }


1170) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserParametersRule.php:28    [M] LogicalNot

--- Original
+++ New
@@ @@
             $require_auth_time = $commandParameters->get('require_auth_time');
-            if (!is_bool($require_auth_time)) {
+            if (is_bool($require_auth_time)) {
                 throw new \InvalidArgumentException('The parameter "require_auth_time" must be a boolean.');
             }
             $validatedParameters = $validatedParameters->with('require_auth_time', $require_auth_time);
         }
         if ($commandParameters->has('default_max_age')) {
             $default_max_age = $commandParameters->get('default_max_age');

1171) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserParametersRule.php:35    [M] LogicalNot

--- Original
+++ New
@@ @@
             $default_max_age = $commandParameters->get('default_max_age');
-            if (!is_int($default_max_age) || $default_max_age < 0) {
+            if (is_int($default_max_age) || $default_max_age < 0) {
                 throw new \InvalidArgumentException('The parameter "default_max_age" must be a positive integer.');
             }
             $validatedParameters = $validatedParameters->with('default_max_age', $default_max_age);
         }
         if ($commandParameters->has('default_acr_values')) {
             $default_acr_values = $commandParameters->get('default_acr_values');

1172) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserParametersRule.php:35    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $default_max_age = $commandParameters->get('default_max_age');
-            if (!is_int($default_max_age) || $default_max_age < 0) {
+            if (!is_int($default_max_age) || $default_max_age < 1) {
                 throw new \InvalidArgumentException('The parameter "default_max_age" must be a positive integer.');
             }
             $validatedParameters = $validatedParameters->with('default_max_age', $default_max_age);
         }
         if ($commandParameters->has('default_acr_values')) {
             $default_acr_values = $commandParameters->get('default_acr_values');

1173) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserParametersRule.php:35    [M] LessThan

--- Original
+++ New
@@ @@
             $default_max_age = $commandParameters->get('default_max_age');
-            if (!is_int($default_max_age) || $default_max_age < 0) {
+            if (!is_int($default_max_age) || $default_max_age <= 0) {
                 throw new \InvalidArgumentException('The parameter "default_max_age" must be a positive integer.');
             }
             $validatedParameters = $validatedParameters->with('default_max_age', $default_max_age);
         }
         if ($commandParameters->has('default_acr_values')) {
             $default_acr_values = $commandParameters->get('default_acr_values');

1174) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserParametersRule.php:35    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
             $default_max_age = $commandParameters->get('default_max_age');
-            if (!is_int($default_max_age) || $default_max_age < 0) {
+            if (!is_int($default_max_age) || $default_max_age >= 0) {
                 throw new \InvalidArgumentException('The parameter "default_max_age" must be a positive integer.');
             }
             $validatedParameters = $validatedParameters->with('default_max_age', $default_max_age);
         }
         if ($commandParameters->has('default_acr_values')) {
             $default_acr_values = $commandParameters->get('default_acr_values');

1175) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserParametersRule.php:35    [M] LogicalOr

--- Original
+++ New
@@ @@
             $default_max_age = $commandParameters->get('default_max_age');
-            if (!is_int($default_max_age) || $default_max_age < 0) {
+            if (!is_int($default_max_age) && $default_max_age < 0) {
                 throw new \InvalidArgumentException('The parameter "default_max_age" must be a positive integer.');
             }
             $validatedParameters = $validatedParameters->with('default_max_age', $default_max_age);
         }
         if ($commandParameters->has('default_acr_values')) {
             $default_acr_values = $commandParameters->get('default_acr_values');

1176) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Client/Rule/UserParametersRule.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
+    protected function handle(ClientId $clientId, DataBag $commandParameters, DataBag $validatedParameters, callable $next) : DataBag
     {
         if ($commandParameters->has('require_auth_time')) {
             $require_auth_time = $commandParameters->get('require_auth_time');
             if (!is_bool($require_auth_time)) {
                 throw new \InvalidArgumentException('The parameter "require_auth_time" must be a boolean.');
             }

1177) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getEventId() : EventId
+    protected function getEventId() : EventId
     {
         return $this->eventId;
     }
     /**
      * @return mixed
      */

1178) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public abstract function getPayload();
+    protected abstract function getPayload();
     /**
      * @return Id
      */
     public abstract function getDomainId() : Id;
     /**
      * @return \DateTimeImmutable

1179) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:65    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public abstract function getDomainId() : Id;
+    protected abstract function getDomainId() : Id;
     /**
      * @return \DateTimeImmutable
      */
     public function getRecordedOn() : \DateTimeImmutable
     {
         return $this->recordedOn;

1180) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:70    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getRecordedOn() : \DateTimeImmutable
+    protected function getRecordedOn() : \DateTimeImmutable
     {
         return $this->recordedOn;
     }
     /**
      * @return string
      */

1181) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:96    [M] NotIdentical

--- Original
+++ New
@@ @@
         $payload = $this->getPayload();
-        if (null !== $payload) {
+        if (null === $payload) {
             $data['payload'] = $payload;
         }
         return $data;
     }
 }


1182) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Event/Event.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function jsonSerialize()
+    protected function jsonSerialize()
     {
         $data = ['$schema' => $this->getSchema(), 'event_id' => $this->getEventId()->getValue(), 'type' => get_class($this), 'domain_id' => $this->getDomainId()->getValue(), 'recorded_on' => $this->getRecordedOn()->getTimestamp()];
         $payload = $this->getPayload();
         if (null !== $payload) {
             $data['payload'] = $payload;
         }

1183) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AccessDeniedResponseFactory.php:27    [M] IntegerNegation

--- Original
+++ New
@@ @@
     {
-        return 403;
+        return -403;
     }
     /**
      * {@inheritdoc}
      */
     public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {

1184) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AccessDeniedResponseFactory.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedCode() : int
+    protected function getSupportedCode() : int
     {
         return 403;
     }
     /**
      * {@inheritdoc}
      */

1185) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AccessDeniedResponseFactory.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
+    protected function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {
         return new OAuth2Error(403, $data, $response);
     }
 }


1186) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:42    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function getHeaders() : array
+    private function getHeaders() : array
     {
         $headers = parent::getHeaders();
         unset($headers['Content-Type']);
         $schemes = $this->computeSchemes($this->getData());
         $headers['WWW-Authenticate'] = $schemes;
         return $headers;

1187) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:56    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function getBody() : string
+    private function getBody() : string
     {
         return '';
     }
     /**
      * @param array $data
      *

1188) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:69    [M] Foreach_

--- Original
+++ New
@@ @@
         $schemes = [];
-        foreach ($this->schemes as $id => $scheme) {
+        foreach (array() as $id => $scheme) {
             $scheme = $this->appendParameters($scheme, $data);
             $schemes[$id] = $scheme;
         }
         return $schemes;
     }
     /**

1189) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:85    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        $position = mb_strpos($scheme, ' ', 0, 'utf-8');
+        $position = mb_strpos($scheme, ' ', 1, 'utf-8');
         $add_comma = false === $position ? false : true;
         foreach ($parameters as $key => $value) {
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {

1190) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:86    [M] FalseValue

--- Original
+++ New
@@ @@
         $position = mb_strpos($scheme, ' ', 0, 'utf-8');
-        $add_comma = false === $position ? false : true;
+        $add_comma = true === $position ? false : true;
         foreach ($parameters as $key => $value) {
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $this->quote($value));

1191) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:86    [M] Identical

--- Original
+++ New
@@ @@
         $position = mb_strpos($scheme, ' ', 0, 'utf-8');
-        $add_comma = false === $position ? false : true;
+        $add_comma = false !== $position ? false : true;
         foreach ($parameters as $key => $value) {
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $this->quote($value));

1192) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:86    [M] FalseValue

--- Original
+++ New
@@ @@
         $position = mb_strpos($scheme, ' ', 0, 'utf-8');
-        $add_comma = false === $position ? false : true;
+        $add_comma = false === $position ? true : true;
         foreach ($parameters as $key => $value) {
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $this->quote($value));

1193) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:86    [M] TrueValue

--- Original
+++ New
@@ @@
         $position = mb_strpos($scheme, ' ', 0, 'utf-8');
-        $add_comma = false === $position ? false : true;
+        $add_comma = false === $position ? false : false;
         foreach ($parameters as $key => $value) {
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $this->quote($value));

1194) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:89    [M] FalseValue

--- Original
+++ New
@@ @@
         foreach ($parameters as $key => $value) {
-            if (false === $add_comma) {
+            if (true === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $this->quote($value));
             }
         }

1195) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:89    [M] Identical

--- Original
+++ New
@@ @@
         foreach ($parameters as $key => $value) {
-            if (false === $add_comma) {
+            if (false !== $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $this->quote($value));
             }
         }

1196) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:90    [M] TrueValue

--- Original
+++ New
@@ @@
             if (false === $add_comma) {
-                $add_comma = true;
+                $add_comma = false;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $this->quote($value));
             }
         }
         return $scheme;

1197) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponse.php:88    [M] Foreach_

--- Original
+++ New
@@ @@
         $add_comma = false === $position ? false : true;
-        foreach ($parameters as $key => $value) {
+        foreach (array() as $key => $value) {
             if (false === $add_comma) {
                 $add_comma = true;
                 $scheme = sprintf('%s %s=%s', $scheme, $key, $this->quote($value));
             } else {
                 $scheme = sprintf('%s,%s=%s', $scheme, $key, $this->quote($value));
             }

1198) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponseFactory.php:26    [M] IntegerNegation

--- Original
+++ New
@@ @@
     {
-        return 401;
+        return -401;
     }
     /**
      * {@inheritdoc}
      */
     public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {

1199) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponseFactory.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedCode() : int
+    protected function getSupportedCode() : int
     {
         return 401;
     }
     /**
      * {@inheritdoc}
      */

1200) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/AuthenticateResponseFactory.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
+    protected function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {
         $schemes = $this->getSchemes();
         return new AuthenticateResponse(401, $data, $response, $schemes);
     }
     /**
      * @return array

1201) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/BadRequestResponseFactory.php:27    [M] IntegerNegation

--- Original
+++ New
@@ @@
     {
-        return 400;
+        return -400;
     }
     /**
      * {@inheritdoc}
      */
     public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {

1202) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/BadRequestResponseFactory.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedCode() : int
+    protected function getSupportedCode() : int
     {
         return 400;
     }
     /**
      * {@inheritdoc}
      */

1203) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/BadRequestResponseFactory.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
+    protected function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {
         return new OAuth2Error(400, $data, $response);
     }
 }


1204) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/MethodNotAllowedResponseFactory.php:27    [M] IntegerNegation

--- Original
+++ New
@@ @@
     {
-        return 405;
+        return -405;
     }
     /**
      * {@inheritdoc}
      */
     public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {

1205) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/MethodNotAllowedResponseFactory.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedCode() : int
+    protected function getSupportedCode() : int
     {
         return 405;
     }
     /**
      * {@inheritdoc}
      */

1206) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/MethodNotAllowedResponseFactory.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
+    protected function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {
         return new OAuth2Error(405, $data, $response);
     }
 }


1207) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/NotImplementedResponseFactory.php:27    [M] IntegerNegation

--- Original
+++ New
@@ @@
     {
-        return 501;
+        return -501;
     }
     /**
      * {@inheritdoc}
      */
     public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {

1208) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/NotImplementedResponseFactory.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedCode() : int
+    protected function getSupportedCode() : int
     {
         return 501;
     }
     /**
      * {@inheritdoc}
      */

1209) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/NotImplementedResponseFactory.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
+    protected function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {
         return new OAuth2Error(501, $data, $response);
     }
 }


1210) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/RedirectResponseFactory.php:28    [M] IntegerNegation

--- Original
+++ New
@@ @@
     {
-        return 302;
+        return -302;
     }
     /**
      * {@inheritdoc}
      */
     public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {

1211) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/RedirectResponseFactory.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedCode() : int
+    protected function getSupportedCode() : int
     {
         return 302;
     }
     /**
      * {@inheritdoc}
      */

1212) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/Factory/RedirectResponseFactory.php:34    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
+    protected function createResponse(array $data, ResponseInterface &$response) : OAuth2ResponseInterface
     {
         Assertion::keyExists($data, 'response_mode', 'The "response_mode" parameter is missing.');
         Assertion::keyExists($data, 'redirect_uri', 'The "redirect_uri" parameter is missing.');
         Assertion::isInstanceOf($data['response_mode'], ResponseModeInterface::class, 'The "response_mode" parameter is invalid.');
         Assertion::string($data['redirect_uri'], 'The "redirect_uri" parameter is invalid.');
         $responseMode = $data['response_mode'];

1213) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2RedirectError.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponse() : ResponseInterface
+    protected function getResponse() : ResponseInterface
     {
         return $this->responseMode->buildResponse($this->redirectUri, $this->getData());
     }
 }


1214) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Response.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getCode() : int
+    protected function getCode() : int
     {
         return $this->code;
     }
     /**
      * {@inheritdoc}
      */

1215) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Response.php:64    [M] Foreach_

--- Original
+++ New
@@ @@
         $this->response = $this->response->withStatus($this->getCode());
-        foreach ($this->getHeaders() as $header => $value) {
+        foreach (array() as $header => $value) {
             $this->response = $this->response->withHeader($header, $value);
         }
         return $this->response;
     }
     /**
      * @return array

1216) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Response.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponse() : ResponseInterface
+    protected function getResponse() : ResponseInterface
     {
         $this->response->getBody()->write($this->getBody());
         $this->response = $this->response->withStatus($this->getCode());
         foreach ($this->getHeaders() as $header => $value) {
             $this->response = $this->response->withHeader($header, $value);
         }

1217) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Response.php:74    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function getHeaders() : array
+    private function getHeaders() : array
     {
         return ['Content-Type' => 'application/json', 'Cache-Control' => 'no-store, private', 'Pragma' => 'no-cache'];
     }
     /**
      * @return string
      */

1218) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Response.php:86    [M] BitwiseOr

--- Original
+++ New
@@ @@
         $data = $this->getData();
-        return json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
+        return json_encode($data, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES);
     }
     /**
      * {@inheritdoc}
      */
     public function getData()
     {

1219) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Response.php:82    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      */
-    protected function getBody() : string
+    private function getBody() : string
     {
         $data = $this->getData();
         return json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
     }
     /**
      * {@inheritdoc}

1220) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2Response.php:92    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getData()
+    protected function getData()
     {
         return $this->data;
     }
 }


1221) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2ResponseFactoryManager.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addResponseFactory(ResponseFactory $responseFactory) : self
+    protected function addResponseFactory(ResponseFactory $responseFactory) : self
     {
         $this->responseFactories[$responseFactory->getSupportedCode()] = $responseFactory;
         return $this;
     }
     /**
      * @param Extension $extension

1222) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2ResponseFactoryManager.php:62    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addExtension(Extension $extension)
+    protected function addExtension(Extension $extension)
     {
         $this->extensions[] = $extension;
     }
     /**
      * @param int   $code The code of the response
      * @param array $data Data sent to the response

1223) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2ResponseFactoryManager.php:75    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach ($this->extensions as $extension) {
+        foreach (array() as $extension) {
             $data = $extension->process($code, $data);
         }
         $factory = $this->getResponseFactory($code);
         $response = $this->psr7responseFactory->createResponse($code);
         return $factory->createResponse($data, $response);
     }

1224) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2ResponseFactoryManager.php:73    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponse(int $code, array $data) : OAuth2ResponseInterface
+    protected function getResponse(int $code, array $data) : OAuth2ResponseInterface
     {
         foreach ($this->extensions as $extension) {
             $data = $extension->process($code, $data);
         }
         $factory = $this->getResponseFactory($code);
         $response = $this->psr7responseFactory->createResponse($code);

1225) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2ResponseFactoryManager.php:90    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isResponseCodeSupported(int $code) : bool
+    protected function isResponseCodeSupported(int $code) : bool
     {
         return array_key_exists($code, $this->responseFactories);
     }
     /**
      * @param int $code
      *

1226) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Response/OAuth2ResponseFactoryManager.php:104    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->isResponseCodeSupported($code)) {
+        if ($this->isResponseCodeSupported($code)) {
             throw new \InvalidArgumentException(sprintf('The response code "%d" is not supported', $code));
         }
         return $this->responseFactories[$code];
     }
 }


1227) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Scope/ScopePolicyManager.php:36    [M] FalseValue

--- Original
+++ New
@@ @@
      */
-    public function add(ScopePolicy $scopePolicy, bool $isDefault = false) : self
+    public function add(ScopePolicy $scopePolicy, bool $isDefault = true) : self
     {
         $name = $scopePolicy->name();
         $this->scopePolicies[$name] = $scopePolicy;
         if (true === $isDefault || 1 === count($this->scopePolicies)) {
             $this->defaultScopePolicy = $name;
         }

1228) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:80    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public abstract function getTokenId() : TokenId;
+    protected abstract function getTokenId() : TokenId;
     /**
      * @return ResourceOwnerId
      */
     public function getResourceOwnerId() : ResourceOwnerId
     {
         return $this->resourceOwnerId;

1229) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:113    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         if (null === $expiresAt) {
-            return 0;
+            return 1;
         }
         return $this->expiresAt->getTimestamp() - time() < 0 ? 0 : $this->expiresAt->getTimestamp() - time();
     }
     /**
      * @return ClientId
      */

1230) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:132    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasScope(string $scope) : bool
+    protected function hasScope(string $scope) : bool
     {
         return in_array($scope, $this->getScopes());
     }
     /**
      * @return string[]
      */

1231) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:200    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasMetadata(string $key) : bool
+    protected function hasMetadata(string $key) : bool
     {
         return $this->metadatas->has($key);
     }
     /**
      * @param string $key
      *

1232) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:214    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->hasMetadata($key)) {
+        if ($this->hasMetadata($key)) {
             throw new \InvalidArgumentException(sprintf('The metadata "%s" does not exist.', $key));
         }
         return $this->metadatas->get($key);
     }
     /**
      * @return null|ResourceServerId

1233) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Core/Token/Token.php:212    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getMetadata(string $key)
+    protected function getMetadata(string $key)
     {
         if (!$this->hasMetadata($key)) {
             throw new \InvalidArgumentException(sprintf('The metadata "%s" does not exist.', $key));
         }
         return $this->metadatas->get($key);
     }

1234) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:242    [M] NotIdentical

--- Original
+++ New
@@ @@
                 $grantTypeData = $grantTypeData->withClient($client);
-            } elseif ($grantTypeData->getClient()->getPublicId()->getValue() !== $client->getPublicId()->getValue()) {
+            } elseif ($grantTypeData->getClient()->getPublicId()->getValue() === $client->getPublicId()->getValue()) {
                 throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
             }
             $grantTypeData = $grantTypeData->withResourceOwnerId($client->getPublicId());
             $allowedSignatureAlgorithms = $this->jwsVerifier->getSignatureAlgorithmManager()->list();
             $signatureKeys = $client->getPublicKeySet();
         } elseif ($this->trustedIssuerManager->has($iss)) {

1235) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:262    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         if (!$jws->getSignature(0)->hasProtectedHeaderParameter('alg') || !in_array($jws->getSignature(0)->getProtectedHeaderParameter('alg'), $allowedSignatureAlgorithms)) {
-            throw new \InvalidArgumentException(sprintf('The signature algorithm "%s" is not allowed.', $jws->getSignature(0)->getProtectedHeaderParameter('alg')));
+            throw new \InvalidArgumentException(sprintf('The signature algorithm "%s" is not allowed.', $jws->getSignature(1)->getProtectedHeaderParameter('alg')));
         }
         $this->jwsVerifier->verifyWithKeySet($jws, $signatureKeys, 0);
         $grantTypeData = $grantTypeData->withMetadata('jwt', $jws);
         $grantTypeData = $grantTypeData->withMetadata('claims', $claims);
         return $grantTypeData;
     }

1236) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/JwtBearerGrant/JwtBearerGrantType.php:284    [M] NotIdentical

--- Original
+++ New
@@ @@
         $client = $this->clientRepository->find(ClientId::create($subject));
-        if (null !== $client) {
+        if (null === $client) {
             return $client->getPublicId();
         }
         return null;
     }
 }


1237) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:113    [M] FalseValue

--- Original
+++ New
@@ @@
         if ($accessToken->getParameter('token_type') !== $this->name()) {
-            return false;
+            return true;
         }
         foreach ($this->getParametersToCheck() as $key => $closure) {
             if (!array_key_exists($key, $additionalCredentialValues) || false === $closure($additionalCredentialValues[$key], $accessToken)) {
                 return false;
             }
         }

1238) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:205    [M] FalseValue

--- Original
+++ New
@@ @@
             if (!is_array($matches)) {
-                return false;
+                return true;
             }
             $values = [];
             foreach ($matches as $match) {
                 $values[$match[1]] = isset($match[4]) ? $match[4] : $match[3];
             }
             if (array_key_exists('id', $values)) {

1239) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MacTokenType/MacToken.php:222    [M] FalseValue

--- Original
+++ New
@@ @@
         }
-        return false;
+        return true;
     }
     /**
      * @return string
      */
     protected abstract function generateMacKey() : string;
 }

1240) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/MetadataEndpoint.php:70    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enableSignedMetadata(JWSBuilder $jwsBuilder, string $signatureAlgorithm, JWK $signatureKey)
+    protected function enableSignedMetadata(JWSBuilder $jwsBuilder, string $signatureAlgorithm, JWK $signatureKey)
     {
         $this->jwsBuilder = $jwsBuilder;
         $this->signatureKey = $signatureKey;
         $this->signatureAlgorithm = $signatureAlgorithm;
     }
     /**

1241) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/MetadataEndpoint.php:87    [M] BitwiseOr

--- Original
+++ New
@@ @@
         $response = $this->responseFactory->createResponse();
-        $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+        $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
         $response = $response->withHeader('Content-Type', 'application/json; charset=UTF-8');
         return $response;
     }
     /**
      * @return bool
      */

1242) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/MetadataEndpoint.php:80    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $data = $this->metadata->jsonSerialize();
         if ($this->isSignedMetadataEnabled()) {
             $data['signed_metadata'] = $this->signMetadata($data);
         }
         $response = $this->responseFactory->createResponse();

1243) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/MetadataEndpoint.php:98    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        return null !== $this->jwsBuilder;
+        return null === $this->jwsBuilder;
     }
     /**
      * @param array $metadata
      *
      * @return string
      */

1244) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/MetadataEndpoint/MetadataEndpoint.php:118    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $serializer = new CompactSerializer($jsonConverter);
-        $assertion = $serializer->serialize($jws, 0);
+        $assertion = $serializer->serialize($jws, 1);
         return $assertion;
     }
 }


1245) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/AccessTokenMiddleware.php:56    [M] NotIdentical

--- Original
+++ New
@@ @@
         $token = $this->tokenTypeManager->findToken($request, $additional_credential_values, $type);
-        if (null !== $token) {
+        if (null === $token) {
             $tokenId = AccessTokenId::create($token);
             $accessToken = $this->accessTokenRepository->find($tokenId);
             if (null === $accessToken || false === $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);

1246) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/AccessTokenMiddleware.php:59    [M] Identical

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenRepository->find($tokenId);
-            if (null === $accessToken || false === $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
+            if (null !== $accessToken || false === $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }
         return $handler->handle($request);
     }

1247) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/AccessTokenMiddleware.php:59    [M] FalseValue

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenRepository->find($tokenId);
-            if (null === $accessToken || false === $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
+            if (null === $accessToken || true === $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }
         return $handler->handle($request);
     }

1248) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/AccessTokenMiddleware.php:59    [M] Identical

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenRepository->find($tokenId);
-            if (null === $accessToken || false === $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
+            if (null === $accessToken || false !== $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }
         return $handler->handle($request);
     }

1249) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/AccessTokenMiddleware.php:59    [M] LogicalOr

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenRepository->find($tokenId);
-            if (null === $accessToken || false === $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
+            if (null === $accessToken && false === $type->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }
         return $handler->handle($request);
     }

1250) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/AccessTokenMiddleware.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $additional_credential_values = [];
         $token = $this->tokenTypeManager->findToken($request, $additional_credential_values, $type);
         if (null !== $token) {
             $tokenId = AccessTokenId::create($token);
             $accessToken = $this->accessTokenRepository->find($tokenId);

1251) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/BearerTokenMiddleware.php:56    [M] NotIdentical

--- Original
+++ New
@@ @@
         $token = $this->bearerToken->findToken($request, $additional_credential_values);
-        if (null !== $token) {
+        if (null === $token) {
             $accessToken = $this->accessTokenRepository->find(AccessTokenId::create($token));
             if (null === $accessToken || false === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }

1252) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/BearerTokenMiddleware.php:58    [M] Identical

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenRepository->find(AccessTokenId::create($token));
-            if (null === $accessToken || false === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
+            if (null !== $accessToken || false === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }
         return $handler->handle($request);
     }

1253) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/BearerTokenMiddleware.php:58    [M] FalseValue

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenRepository->find(AccessTokenId::create($token));
-            if (null === $accessToken || false === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
+            if (null === $accessToken || true === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }
         return $handler->handle($request);
     }

1254) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/BearerTokenMiddleware.php:58    [M] Identical

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenRepository->find(AccessTokenId::create($token));
-            if (null === $accessToken || false === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
+            if (null === $accessToken || false !== $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }
         return $handler->handle($request);
     }

1255) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/BearerTokenMiddleware.php:58    [M] LogicalOr

--- Original
+++ New
@@ @@
             $accessToken = $this->accessTokenRepository->find(AccessTokenId::create($token));
-            if (null === $accessToken || false === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
+            if (null === $accessToken && false === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'Invalid access token.');
             }
             $request = $request->withAttribute('access_token', $accessToken);
         }
         return $handler->handle($request);
     }

1256) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/BearerTokenMiddleware.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $additional_credential_values = [];
         $token = $this->bearerToken->findToken($request, $additional_credential_values);
         if (null !== $token) {
             $accessToken = $this->accessTokenRepository->find(AccessTokenId::create($token));
             if (null === $accessToken || false === $this->bearerToken->isTokenRequestValid($accessToken, $request, $additional_credential_values)) {

1257) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:62    [M] NotIdentical

--- Original
+++ New
@@ @@
         $client = null;
-        if (null !== $clientId) {
+        if (null === $clientId) {
             $client = $this->clientRepository->find($clientId);
         }
         if (null !== $client && false === $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
             $client = null;
         }
         if (true === $this->authenticationRequired && null === $client) {

1258) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:65    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $client && false === $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
+        if (null === $client && false === $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
             $client = null;
         }
         if (true === $this->authenticationRequired && null === $client) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         if (null !== $client) {

1259) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:65    [M] FalseValue

--- Original
+++ New
@@ @@
         }
-        if (null !== $client && false === $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
+        if (null !== $client && true === $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
             $client = null;
         }
         if (true === $this->authenticationRequired && null === $client) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         if (null !== $client) {

1260) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:65    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if (null !== $client && false === $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
+        if (null !== $client && false !== $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
             $client = null;
         }
         if (true === $this->authenticationRequired && null === $client) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         if (null !== $client) {

1261) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:65    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if (null !== $client && false === $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
+        if (null !== $client || false === $this->tokenEndpointAuthenticationMethodManager->isClientAuthenticated($request, $client, $authentication_method, $client_credentials)) {
             $client = null;
         }
         if (true === $this->authenticationRequired && null === $client) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         if (null !== $client) {

1262) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:68    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        if (true === $this->authenticationRequired && null === $client) {
+        if (false === $this->authenticationRequired && null === $client) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         if (null !== $client) {
             $request = $request->withAttribute('client', $client);
         }
         return $handler->handle($request);

1263) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:68    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if (true === $this->authenticationRequired && null === $client) {
+        if (true !== $this->authenticationRequired && null === $client) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         if (null !== $client) {
             $request = $request->withAttribute('client', $client);
         }
         return $handler->handle($request);

1264) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:68    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if (true === $this->authenticationRequired && null === $client) {
+        if (true === $this->authenticationRequired && null !== $client) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         if (null !== $client) {
             $request = $request->withAttribute('client', $client);
         }
         return $handler->handle($request);

1265) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:68    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if (true === $this->authenticationRequired && null === $client) {
+        if (true === $this->authenticationRequired || null === $client) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         if (null !== $client) {
             $request = $request->withAttribute('client', $client);
         }
         return $handler->handle($request);

1266) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:75    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $client) {
+        if (null === $client) {
             $request = $request->withAttribute('client', $client);
         }
         return $handler->handle($request);
     }
 }


1267) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ClientAuthenticationMiddleware.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $clientId = $this->tokenEndpointAuthenticationMethodManager->findClientInformationInTheRequest($request, $authentication_method, $client_credentials);
         $client = null;
         if (null !== $clientId) {
             $client = $this->clientRepository->find($clientId);
         }

1268) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/FormPostBodyParserMiddleware.php:30    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         foreach ($headers as $header) {
-            if ('application/x-www-form-urlencoded' === substr($header, 0, 33)) {
+            if ('application/x-www-form-urlencoded' === substr($header, 1, 33)) {
                 $request->getBody()->rewind();
                 $body = $request->getBody()->getContents();
                 if (true === parse_str($body, $parsed)) {
                     $request = $request->withParsedBody($parsed);
                 }
             }

1269) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/FormPostBodyParserMiddleware.php:30    [M] Identical

--- Original
+++ New
@@ @@
         foreach ($headers as $header) {
-            if ('application/x-www-form-urlencoded' === substr($header, 0, 33)) {
+            if ('application/x-www-form-urlencoded' !== substr($header, 0, 33)) {
                 $request->getBody()->rewind();
                 $body = $request->getBody()->getContents();
                 if (true === parse_str($body, $parsed)) {
                     $request = $request->withParsedBody($parsed);
                 }
             }

1270) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/FormPostBodyParserMiddleware.php:33    [M] TrueValue

--- Original
+++ New
@@ @@
                 $body = $request->getBody()->getContents();
-                if (true === parse_str($body, $parsed)) {
+                if (false === parse_str($body, $parsed)) {
                     $request = $request->withParsedBody($parsed);
                 }
             }
         }
         return $handler->handle($request);
     }

1271) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/FormPostBodyParserMiddleware.php:33    [M] Identical

--- Original
+++ New
@@ @@
                 $body = $request->getBody()->getContents();
-                if (true === parse_str($body, $parsed)) {
+                if (true !== parse_str($body, $parsed)) {
                     $request = $request->withParsedBody($parsed);
                 }
             }
         }
         return $handler->handle($request);
     }

1272) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/FormPostBodyParserMiddleware.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
         $headers = $request->getHeader('content-type');
-        foreach ($headers as $header) {
+        foreach (array() as $header) {
             if ('application/x-www-form-urlencoded' === substr($header, 0, 33)) {
                 $request->getBody()->rewind();
                 $body = $request->getBody()->getContents();
                 if (true === parse_str($body, $parsed)) {
                     $request = $request->withParsedBody($parsed);
                 }

1273) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/FormPostBodyParserMiddleware.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $headers = $request->getHeader('content-type');
         foreach ($headers as $header) {
             if ('application/x-www-form-urlencoded' === substr($header, 0, 33)) {
                 $request->getBody()->rewind();
                 $body = $request->getBody()->getContents();

1274) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/GrantTypeMiddleware.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         try {
             $requestParameters = $request->getParsedBody() ?? [];
             Assertion::keyExists($requestParameters, 'grant_type', 'The \'grant_type\' parameter is missing.');
             $grant_type = $requestParameters['grant_type'];
             Assertion::true($this->grantTypeManager->has($grant_type), sprintf('The grant type \'%s\' is not supported by this server.', $grant_type));

1275) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpMethod.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addMiddleware(string $method, MiddlewareInterface $middleware)
+    protected function addMiddleware(string $method, MiddlewareInterface $middleware)
     {
         Assertion::keyNotExists($this->methodMap, $method, sprintf('The method \'%s\' is already defined.', $method));
         $this->methodMap[$method] = $middleware;
     }
     /**
      * {@inheritdoc}

1276) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpMethod.php:46    [M] LogicalNot

--- Original
+++ New
@@ @@
         $method = $request->getMethod();
-        if (!array_key_exists($method, $this->methodMap)) {
+        if (array_key_exists($method, $this->methodMap)) {
             throw new OAuth2Exception(405, 'not_implemented', sprintf('The method \'%s\' is not supported.', $method));
         }
         $middleware = $this->methodMap[$method];
         return $middleware->process($request, $handler);
     }
 }

1277) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpMethod.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $method = $request->getMethod();
         if (!array_key_exists($method, $this->methodMap)) {
             throw new OAuth2Exception(405, 'not_implemented', sprintf('The method \'%s\' is not supported.', $method));
         }
         $middleware = $this->methodMap[$method];

1278) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsError.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->isRequestSecured($request)) {
+        if ($this->isRequestSecured($request)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The request must be secured.');
         }
         return $handler->handle($request);
     }
     /**
      * @param \Psr\Http\Message\ServerRequestInterface $request

1279) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsError.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         if (!$this->isRequestSecured($request)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The request must be secured.');
         }
         return $handler->handle($request);
     }

1280) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsError.php:49    [M] LogicalNot

--- Original
+++ New
@@ @@
         $server_params = $request->getServerParams();
-        return !empty($server_params['HTTPS']) && 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
+        return empty($server_params['HTTPS']) && 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
     }
 }


1281) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsError.php:49    [M] Identical

--- Original
+++ New
@@ @@
         $server_params = $request->getServerParams();
-        return !empty($server_params['HTTPS']) && 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
+        return !empty($server_params['HTTPS']) && 'on' !== mb_strtolower($server_params['HTTPS'], '8bit');
     }
 }


1282) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsError.php:49    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $server_params = $request->getServerParams();
-        return !empty($server_params['HTTPS']) && 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
+        return !empty($server_params['HTTPS']) || 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
     }
 }


1283) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsRedirection.php:44    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->isRequestSecured($request)) {
+        if ($this->isRequestSecured($request)) {
             $response = $this->messageFactory->createResponse(302);
             $uri = $request->getUri();
             $uri = $uri->withScheme('https');
             $response->withHeader('Location', $uri->__toString());
             return $response;
         }

1284) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsRedirection.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         if (!$this->isRequestSecured($request)) {
             $response = $this->messageFactory->createResponse(302);
             $uri = $request->getUri();
             $uri = $uri->withScheme('https');
             $response->withHeader('Location', $uri->__toString());

1285) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsRedirection.php:65    [M] LogicalNot

--- Original
+++ New
@@ @@
         $server_params = $request->getServerParams();
-        return !empty($server_params['HTTPS']) && 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
+        return empty($server_params['HTTPS']) && 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
     }
 }


1286) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsRedirection.php:65    [M] Identical

--- Original
+++ New
@@ @@
         $server_params = $request->getServerParams();
-        return !empty($server_params['HTTPS']) && 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
+        return !empty($server_params['HTTPS']) && 'on' !== mb_strtolower($server_params['HTTPS'], '8bit');
     }
 }


1287) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/HttpsRedirection.php:65    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $server_params = $request->getServerParams();
-        return !empty($server_params['HTTPS']) && 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
+        return !empty($server_params['HTTPS']) || 'on' === mb_strtolower($server_params['HTTPS'], '8bit');
     }
 }


1288) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/InitialAccessTokenMiddleware.php:50    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         try {
             $values = [];
             $token = $this->bearerToken->findToken($request, $values);
             Assertion::notNull($token, 'Initial Access Token is missing or invalid.');
             $initialAccessToken = $this->initialAccessTokenRepository->find(InitialAccessTokenId::create($token));

1289) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/JsonBodyParserMiddleware.php:30    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         foreach ($headers as $header) {
-            if ('application/json' === substr($header, 0, 16)) {
+            if ('application/json' === substr($header, 1, 16)) {
                 $request->getBody()->rewind();
                 $body = $request->getBody()->getContents();
                 $json = json_decode($body, true);
                 if (is_array($json)) {
                     $request = $request->withParsedBody($json);
                 }

1290) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/JsonBodyParserMiddleware.php:30    [M] Identical

--- Original
+++ New
@@ @@
         foreach ($headers as $header) {
-            if ('application/json' === substr($header, 0, 16)) {
+            if ('application/json' !== substr($header, 0, 16)) {
                 $request->getBody()->rewind();
                 $body = $request->getBody()->getContents();
                 $json = json_decode($body, true);
                 if (is_array($json)) {
                     $request = $request->withParsedBody($json);
                 }

1291) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/JsonBodyParserMiddleware.php:33    [M] TrueValue

--- Original
+++ New
@@ @@
                 $body = $request->getBody()->getContents();
-                $json = json_decode($body, true);
+                $json = json_decode($body, false);
                 if (is_array($json)) {
                     $request = $request->withParsedBody($json);
                 }
             }
         }
         return $handler->handle($request);

1292) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/JsonBodyParserMiddleware.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
         $headers = $request->getHeader('content-type');
-        foreach ($headers as $header) {
+        foreach (array() as $header) {
             if ('application/json' === substr($header, 0, 16)) {
                 $request->getBody()->rewind();
                 $body = $request->getBody()->getContents();
                 $json = json_decode($body, true);
                 if (is_array($json)) {
                     $request = $request->withParsedBody($json);

1293) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/JsonBodyParserMiddleware.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $headers = $request->getHeader('content-type');
         foreach ($headers as $header) {
             if ('application/json' === substr($header, 0, 16)) {
                 $request->getBody()->rewind();
                 $body = $request->getBody()->getContents();

1294) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2ResponseMiddleware.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         try {
             return $handler->handle($request);
         } catch (OAuth2Exception $e) {
             $oauth2Response = $this->auth2messageFactoryManager->getResponse($e->getCode(), $e->getData());
             return $oauth2Response->getResponse();

1295) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:73    [M] Identical

--- Original
+++ New
@@ @@
         $token = $this->tokenTypeManager->findToken($request, $additionalCredentialValues, $type);
-        if (null === $token) {
+        if (null !== $token) {
             throw $this->getOAuth2Exception(401, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token required.');
         }
         $accessToken = $this->accessTokenHandlerManager->find(AccessTokenId::create($token));
         if (null === $accessToken) {
             throw $this->getOAuth2Exception(401, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token does not exist or is not valid.');
         }

1296) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:77    [M] Identical

--- Original
+++ New
@@ @@
         $accessToken = $this->accessTokenHandlerManager->find(AccessTokenId::create($token));
-        if (null === $accessToken) {
+        if (null !== $accessToken) {
             throw $this->getOAuth2Exception(401, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token does not exist or is not valid.');
         }
         $this->checkAccessToken($type, $accessToken, $request, $additionalCredentialValues);
         $request = $request->withAttribute('access_token', $accessToken);
         return $handler->handle($request);
     }

1297) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:69    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $additionalCredentialValues = [];
         $token = $this->tokenTypeManager->findToken($request, $additionalCredentialValues, $type);
         if (null === $token) {
             throw $this->getOAuth2Exception(401, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token required.');
         }

1298) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:97    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        if (false === $type->isTokenRequestValid($accessToken, $request, $additionalCredentialValues)) {
+        if (true === $type->isTokenRequestValid($accessToken, $request, $additionalCredentialValues)) {
             throw $this->getOAuth2Exception(401, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token does not exist or is not valid.');
         }
         if (true === $accessToken->hasExpired()) {
             throw $this->getOAuth2Exception(403, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token has expired.');
         }
         if (!empty($this->scope)) {

1299) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:97    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (false === $type->isTokenRequestValid($accessToken, $request, $additionalCredentialValues)) {
+        if (false !== $type->isTokenRequestValid($accessToken, $request, $additionalCredentialValues)) {
             throw $this->getOAuth2Exception(401, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token does not exist or is not valid.');
         }
         if (true === $accessToken->hasExpired()) {
             throw $this->getOAuth2Exception(403, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token has expired.');
         }
         if (!empty($this->scope)) {

1300) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:100    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        if (true === $accessToken->hasExpired()) {
+        if (false === $accessToken->hasExpired()) {
             throw $this->getOAuth2Exception(403, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token has expired.');
         }
         if (!empty($this->scope)) {
             $diff = array_diff($this->scope, $accessToken->getScopes());
             if (!empty($diff)) {
                 throw $this->getOAuth2Exception(403, OAuth2Exception::ERROR_INVALID_TOKEN, 'Insufficient scope.');

1301) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:100    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if (true === $accessToken->hasExpired()) {
+        if (true !== $accessToken->hasExpired()) {
             throw $this->getOAuth2Exception(403, OAuth2Exception::ERROR_INVALID_TOKEN, 'Access token has expired.');
         }
         if (!empty($this->scope)) {
             $diff = array_diff($this->scope, $accessToken->getScopes());
             if (!empty($diff)) {
                 throw $this->getOAuth2Exception(403, OAuth2Exception::ERROR_INVALID_TOKEN, 'Insufficient scope.');

1302) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:103    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
-        if (!empty($this->scope)) {
+        if (empty($this->scope)) {
             $diff = array_diff($this->scope, $accessToken->getScopes());
             if (!empty($diff)) {
                 throw $this->getOAuth2Exception(403, OAuth2Exception::ERROR_INVALID_TOKEN, 'Insufficient scope.');
             }
         }
     }

1303) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:109    [M] LogicalNot

--- Original
+++ New
@@ @@
             $diff = array_diff($this->scope, $accessToken->getScopes());
-            if (!empty($diff)) {
+            if (empty($diff)) {
                 throw $this->getOAuth2Exception(403, OAuth2Exception::ERROR_INVALID_TOKEN, 'Insufficient scope.');
             }
         }
     }
     /**
      * @param int    $code

1304) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:125    [M] NotIdentical

--- Original
+++ New
@@ @@
         $data = [];
-        if (null !== $this->scope) {
+        if (null === $this->scope) {
             $data['scope'] = implode(' ', $this->scope);
         }
         return new OAuth2Exception($code, $error, $errorDescription, $data);
     }
 }


1305) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/OAuth2SecurityMiddleware.php:129    [M] NewObject

--- Original
+++ New
@@ @@
         }
-        return new OAuth2Exception($code, $error, $errorDescription, $data);
+        new OAuth2Exception($code, $error, $errorDescription, $data);
+        return null;
     }
 }


1306) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function appendMiddleware(MiddlewareInterface $middleware)
+    protected function appendMiddleware(MiddlewareInterface $middleware)
     {
         $this->middlewares[] = $middleware;
     }
     /**
      * Prepends new middleware for this message bus. Should only be used at configuration time.
      *

1307) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function prependMiddleware(MiddlewareInterface $middleware)
+    protected function prependMiddleware(MiddlewareInterface $middleware)
     {
         array_unshift($this->middlewares, $middleware);
     }
     /**
      * @param MiddlewareInterface $middleware
      */

1308) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:64    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $count = count($this->middlewares);
-        $temp = array_slice($this->middlewares, 1, $count);
+        $temp = array_slice($this->middlewares, 0, $count);
         array_unshift($temp, $middleware);
         array_unshift($temp, $this->middlewares[0]);
         $this->middlewares = $temp;
     }
     /**
      * @param MiddlewareInterface $middleware

1309) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:66    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         array_unshift($temp, $middleware);
-        array_unshift($temp, $this->middlewares[0]);
+        array_unshift($temp, $this->middlewares[1]);
         $this->middlewares = $temp;
     }
     /**
      * @param MiddlewareInterface $middleware
      */
     public function addMiddlewareBeforeLastOne(MiddlewareInterface $middleware)

1310) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:61    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addMiddlewareAfterFirstOne(MiddlewareInterface $middleware)
+    protected function addMiddlewareAfterFirstOne(MiddlewareInterface $middleware)
     {
         $count = count($this->middlewares);
         $temp = array_slice($this->middlewares, 1, $count);
         array_unshift($temp, $middleware);
         array_unshift($temp, $this->middlewares[0]);
         $this->middlewares = $temp;

1311) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:76    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $count = count($this->middlewares);
-        $temp = array_slice($this->middlewares, 0, $count - 1);
+        $temp = array_slice($this->middlewares, 1, $count - 1);
         $temp[] = $middleware;
         $temp[] = $this->middlewares[$count - 1];
         $this->middlewares = $temp;
     }
     /**
      * {@inheritdoc}

1312) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:76    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $count = count($this->middlewares);
-        $temp = array_slice($this->middlewares, 0, $count - 1);
+        $temp = array_slice($this->middlewares, 0, $count - 0);
         $temp[] = $middleware;
         $temp[] = $this->middlewares[$count - 1];
         $this->middlewares = $temp;
     }
     /**
      * {@inheritdoc}

1313) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:76    [M] Minus

--- Original
+++ New
@@ @@
         $count = count($this->middlewares);
-        $temp = array_slice($this->middlewares, 0, $count - 1);
+        $temp = array_slice($this->middlewares, 0, $count + 1);
         $temp[] = $middleware;
         $temp[] = $this->middlewares[$count - 1];
         $this->middlewares = $temp;
     }
     /**
      * {@inheritdoc}

1314) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:78    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $temp[] = $middleware;
-        $temp[] = $this->middlewares[$count - 1];
+        $temp[] = $this->middlewares[$count - 0];
         $this->middlewares = $temp;
     }
     /**
      * {@inheritdoc}
      */
     public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface

1315) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:78    [M] Minus

--- Original
+++ New
@@ @@
         $temp[] = $middleware;
-        $temp[] = $this->middlewares[$count - 1];
+        $temp[] = $this->middlewares[$count + 1];
         $this->middlewares = $temp;
     }
     /**
      * {@inheritdoc}
      */
     public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface

1316) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:73    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function addMiddlewareBeforeLastOne(MiddlewareInterface $middleware)
+    protected function addMiddlewareBeforeLastOne(MiddlewareInterface $middleware)
     {
         $count = count($this->middlewares);
         $temp = array_slice($this->middlewares, 0, $count - 1);
         $temp[] = $middleware;
         $temp[] = $this->middlewares[$count - 1];
         $this->middlewares = $temp;

1317) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:85    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $this->middlewares[] = new RequestHandler(function (ServerRequestInterface $request) use($handler) {
             return $handler->handle($request);
         });
         $response = $this->dispatch($request);
         array_pop($this->middlewares);

1318) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:109    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        $resolved = $this->resolve(0);
+        $resolved = $this->resolve(1);
         return $resolved->handle($request);
     }
     /**
      * @param int $index Middleware index
      *
      * @return RequestHandlerInterface

1319) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:107    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function dispatch(ServerRequestInterface $request)
+    protected function dispatch(ServerRequestInterface $request)
     {
         $resolved = $this->resolve(0);
         return $resolved->handle($request);
     }
     /**
      * @param int $index Middleware index

1320) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:125    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             return new RequestHandler(function (ServerRequestInterface $request) use($middleware, $index) {
-                return $middleware->process($request, $this->resolve($index + 1));
+                return $middleware->process($request, $this->resolve($index + 0));
             });
         }
         return new RequestHandler(function () {
             throw new \LogicException('Unresolved request: middleware exhausted with no result.');
         });
     }

1321) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/Pipe.php:125    [M] Plus

--- Original
+++ New
@@ @@
             return new RequestHandler(function (ServerRequestInterface $request) use($middleware, $index) {
-                return $middleware->process($request, $this->resolve($index + 1));
+                return $middleware->process($request, $this->resolve($index - 1));
             });
         }
         return new RequestHandler(function () {
             throw new \LogicException('Unresolved request: middleware exhausted with no result.');
         });
     }

1322) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/RequestHandler.php:41    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ServerRequestInterface $request) : ResponseInterface
+    protected function handle(ServerRequestInterface $request) : ResponseInterface
     {
         return call_user_func($this->callback, $request);
     }
 }


1323) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ResourceServerAuthenticationMiddleware.php:53    [M] Identical

--- Original
+++ New
@@ @@
         $resourceServerId = $this->tokenIntrospectionEndpointAuthenticationMethodManager->findResourceServerInformationInTheRequest($request, $authenticationMethod, $resourceServerCredentials);
-        if (null === $resourceServerId) {
+        if (null !== $resourceServerId) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_RESOURCE_SERVER, 'Resource Server authentication failed.');
         }
         $resourceServer = $this->resourceServerRepository->find($resourceServerId);
         if (null === $resourceServer || false === $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_RESOURCE_SERVER, 'Resource Server authentication failed.');
         }

1324) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ResourceServerAuthenticationMiddleware.php:58    [M] Identical

--- Original
+++ New
@@ @@
         $resourceServer = $this->resourceServerRepository->find($resourceServerId);
-        if (null === $resourceServer || false === $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
+        if (null !== $resourceServer || false === $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_RESOURCE_SERVER, 'Resource Server authentication failed.');
         }
         $request = $request->withAttribute('resource_server', $resourceServer);
         return $handler->handle($request);
     }
 }

1325) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ResourceServerAuthenticationMiddleware.php:58    [M] FalseValue

--- Original
+++ New
@@ @@
         $resourceServer = $this->resourceServerRepository->find($resourceServerId);
-        if (null === $resourceServer || false === $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
+        if (null === $resourceServer || true === $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_RESOURCE_SERVER, 'Resource Server authentication failed.');
         }
         $request = $request->withAttribute('resource_server', $resourceServer);
         return $handler->handle($request);
     }
 }

1326) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ResourceServerAuthenticationMiddleware.php:58    [M] Identical

--- Original
+++ New
@@ @@
         $resourceServer = $this->resourceServerRepository->find($resourceServerId);
-        if (null === $resourceServer || false === $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
+        if (null === $resourceServer || false !== $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_RESOURCE_SERVER, 'Resource Server authentication failed.');
         }
         $request = $request->withAttribute('resource_server', $resourceServer);
         return $handler->handle($request);
     }
 }

1327) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ResourceServerAuthenticationMiddleware.php:58    [M] LogicalOr

--- Original
+++ New
@@ @@
         $resourceServer = $this->resourceServerRepository->find($resourceServerId);
-        if (null === $resourceServer || false === $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
+        if (null === $resourceServer && false === $this->tokenIntrospectionEndpointAuthenticationMethodManager->isResourceServerAuthenticated($request, $resourceServer, $authenticationMethod, $resourceServerCredentials)) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_RESOURCE_SERVER, 'Resource Server authentication failed.');
         }
         $request = $request->withAttribute('resource_server', $resourceServer);
         return $handler->handle($request);
     }
 }

1328) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/ResourceServerAuthenticationMiddleware.php:50    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $resourceServerId = $this->tokenIntrospectionEndpointAuthenticationMethodManager->findResourceServerInformationInTheRequest($request, $authenticationMethod, $resourceServerCredentials);
         if (null === $resourceServerId) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_RESOURCE_SERVER, 'Resource Server authentication failed.');
         }
         $resourceServer = $this->resourceServerRepository->find($resourceServerId);

1329) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/TokenTypeMiddleware.php:50    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $tokenType = $this->findTokenType($request);
         $request = $request->withAttribute('token_type', $tokenType);
         return $handler->handle($request);
     }
     /**

1330) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/TokenTypeMiddleware.php:66    [M] TrueValue

--- Original
+++ New
@@ @@
         $params = $request->getParsedBody() ?? [];
-        if (true === $this->tokenTypeParameterAllowed && array_key_exists('token_type', $params)) {
+        if (false === $this->tokenTypeParameterAllowed && array_key_exists('token_type', $params)) {
             return $this->tokenTypeManager->get($params['token_type']);
         } else {
             return $this->tokenTypeManager->getDefault();
         }
     }
 }

1331) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/TokenTypeMiddleware.php:66    [M] Identical

--- Original
+++ New
@@ @@
         $params = $request->getParsedBody() ?? [];
-        if (true === $this->tokenTypeParameterAllowed && array_key_exists('token_type', $params)) {
+        if (true !== $this->tokenTypeParameterAllowed && array_key_exists('token_type', $params)) {
             return $this->tokenTypeManager->get($params['token_type']);
         } else {
             return $this->tokenTypeManager->getDefault();
         }
     }
 }

1332) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/Middleware/TokenTypeMiddleware.php:66    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $params = $request->getParsedBody() ?? [];
-        if (true === $this->tokenTypeParameterAllowed && array_key_exists('token_type', $params)) {
+        if (true === $this->tokenTypeParameterAllowed || array_key_exists('token_type', $params)) {
             return $this->tokenTypeManager->get($params['token_type']);
         } else {
             return $this->tokenTypeManager->getDefault();
         }
     }
 }

1333) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/NoneGrant/NoneResponseType.php:35    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAssociatedGrantTypes() : array
+    protected function getAssociatedGrantTypes() : array
     {
         return [];
     }
     /**
      * {@inheritdoc}
      */

1334) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/NoneGrant/NoneResponseType.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponseType() : string
+    protected function getResponseType() : string
     {
         return 'none';
     }
     /**
      * {@inheritdoc}
      */

1335) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/NoneGrant/NoneResponseType.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponseMode() : string
+    protected function getResponseMode() : string
     {
         return self::RESPONSE_TYPE_MODE_QUERY;
     }
     /**
      * {@inheritdoc}
      */

1336) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/NoneGrant/NoneResponseType.php:61    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        if (1 !== count($authorization->getResponseTypes())) {
+        if (0 !== count($authorization->getResponseTypes())) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The response type "none" cannot be used with another response type.', $authorization);
         }
         return $next($authorization);
     }
 }


1337) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/NoneGrant/NoneResponseType.php:61    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (1 !== count($authorization->getResponseTypes())) {
+        if (1 === count($authorization->getResponseTypes())) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The response type "none" cannot be used with another response type.', $authorization);
         }
         return $next($authorization);
     }
 }


1338) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/NoneGrant/NoneResponseType.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         if (1 !== count($authorization->getResponseTypes())) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The response type "none" cannot be used with another response type.', $authorization);
         }
         return $next($authorization);
     }

1339) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(IdTokenId $idTokenId, array $claims) : self
+    protected static function create(IdTokenId $idTokenId, array $claims) : self
     {
         return new self($idTokenId, $claims);
     }
     /**
      * @return IdTokenId
      */

1340) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:57    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getId() : IdTokenId
+    protected function getId() : IdTokenId
     {
         return $this->idTokenId;
     }
     /**
      * @return null|string
      */

1341) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:65    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getNonce()
+    protected function getNonce()
     {
         return array_key_exists('nonce', $this->claims) ? $this->claims['nonce'] : null;
     }
     /**
      * @return null|string
      */

1342) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:73    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAccessTokenHash()
+    protected function getAccessTokenHash()
     {
         return array_key_exists('at_hash', $this->claims) ? $this->claims['at_hash'] : null;
     }
     /**
      * @return null|string
      */

1343) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAuthorizationCodeHash()
+    protected function getAuthorizationCodeHash()
     {
         return array_key_exists('c_hash', $this->claims) ? $this->claims['c_hash'] : null;
     }
     /**
      * @return ClientId
      */

1344) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:91    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!array_key_exists('aud', $this->claims)) {
+        if (array_key_exists('aud', $this->claims)) {
             throw new \InvalidArgumentException('Invalid ID Token.');
         }
         return ClientId::create($this->claims['aud']);
     }
     /**
      * @return UserAccountId

1345) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:89    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClientId() : ClientId
+    protected function getClientId() : ClientId
     {
         if (!array_key_exists('aud', $this->claims)) {
             throw new \InvalidArgumentException('Invalid ID Token.');
         }
         return ClientId::create($this->claims['aud']);
     }

1346) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:103    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!array_key_exists('sub', $this->claims)) {
+        if (array_key_exists('sub', $this->claims)) {
             throw new \InvalidArgumentException('Invalid ID Token.');
         }
         return UserAccountId::create($this->claims['sub']);
     }
     /**
      * @return \DateTimeImmutable

1347) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:101    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getUserAccountId() : UserAccountId
+    protected function getUserAccountId() : UserAccountId
     {
         if (!array_key_exists('sub', $this->claims)) {
             throw new \InvalidArgumentException('Invalid ID Token.');
         }
         return UserAccountId::create($this->claims['sub']);
     }

1348) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:115    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!array_key_exists('exp', $this->claims)) {
+        if (array_key_exists('exp', $this->claims)) {
             throw new \InvalidArgumentException('Invalid ID Token.');
         }
         return new \DateTimeImmutable((string) $this->claims['exp']);
     }
     /**
      * @return bool

1349) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:113    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getExpiresAt() : \DateTimeImmutable
+    protected function getExpiresAt() : \DateTimeImmutable
     {
         if (!array_key_exists('exp', $this->claims)) {
             throw new \InvalidArgumentException('Invalid ID Token.');
         }
         return new \DateTimeImmutable((string) $this->claims['exp']);
     }

1350) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:127    [M] LessThan

--- Original
+++ New
@@ @@
     {
-        return $this->getExpiresAt()->getTimestamp() < time();
+        return $this->getExpiresAt()->getTimestamp() <= time();
     }
     public function getExpiresIn() : int
     {
         return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
     }
     /**

1351) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:127    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     {
-        return $this->getExpiresAt()->getTimestamp() < time();
+        return $this->getExpiresAt()->getTimestamp() >= time();
     }
     public function getExpiresIn() : int
     {
         return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
     }
     /**

1352) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:125    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasExpired() : bool
+    protected function hasExpired() : bool
     {
         return $this->getExpiresAt()->getTimestamp() < time();
     }
     public function getExpiresIn() : int
     {
         return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();

1353) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:132    [M] Minus

--- Original
+++ New
@@ @@
     {
-        return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
+        return $this->getExpiresAt()->getTimestamp() + time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
     }
     /**
      * @return array
      */
     public function getClaims() : array
     {

1354) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:132    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
+        return $this->getExpiresAt()->getTimestamp() - time() < 1 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
     }
     /**
      * @return array
      */
     public function getClaims() : array
     {

1355) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:132    [M] LessThan

--- Original
+++ New
@@ @@
     {
-        return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
+        return $this->getExpiresAt()->getTimestamp() - time() <= 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
     }
     /**
      * @return array
      */
     public function getClaims() : array
     {

1356) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:132    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     {
-        return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
+        return $this->getExpiresAt()->getTimestamp() - time() >= 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
     }
     /**
      * @return array
      */
     public function getClaims() : array
     {

1357) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:132    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
+        return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 1 : $this->getExpiresAt()->getTimestamp() - time();
     }
     /**
      * @return array
      */
     public function getClaims() : array
     {

1358) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:132    [M] Minus

--- Original
+++ New
@@ @@
     {
-        return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
+        return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() + time();
     }
     /**
      * @return array
      */
     public function getClaims() : array
     {

1359) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:130    [M] PublicVisibility

--- Original
+++ New
@@ @@
     }
-    public function getExpiresIn() : int
+    protected function getExpiresIn() : int
     {
         return $this->getExpiresAt()->getTimestamp() - time() < 0 ? 0 : $this->getExpiresAt()->getTimestamp() - time();
     }
     /**
      * @return array
      */

1360) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdToken.php:138    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClaims() : array
+    protected function getClaims() : array
     {
         return $this->claims;
     }
 }


1361) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:165    [M] NewObject

--- Original
+++ New
@@ @@
     {
-        return new self($issuer, $userinfo, $lifetime, $client, $userAccount, $redirectUri);
+        new self($issuer, $userinfo, $lifetime, $client, $userAccount, $redirectUri);
+        return null;
     }
     /**
      * @param AccessToken $accessToken
      *
      * @return IdTokenBuilder

1362) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:163    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(string $issuer, UserInfo $userinfo, int $lifetime, Client $client, UserAccount $userAccount, string $redirectUri)
+    protected static function create(string $issuer, UserInfo $userinfo, int $lifetime, Client $client, UserAccount $userAccount, string $redirectUri)
     {
         return new self($issuer, $userinfo, $lifetime, $client, $userAccount, $redirectUri);
     }
     /**
      * @param AccessToken $accessToken
      *

1363) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:184    [M] Foreach_

--- Original
+++ New
@@ @@
             $queryParams = $authorizationCode->getQueryParams();
-            foreach (['nonce' => 'nonce', 'claims_locales' => 'claimsLocales'] as $k => $v) {
+            foreach (array() as $k => $v) {
                 if (array_key_exists($k, $queryParams)) {
                     $clone->{$v} = $queryParams[$k];
                 }
             }
             $clone->withAuthenticationTime = array_key_exists('max_age', $authorizationCode->getQueryParams());
         }

1364) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:173    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withAccessToken(AccessToken $accessToken) : self
+    protected function withAccessToken(AccessToken $accessToken) : self
     {
         $clone = clone $this;
         $clone->accessTokenId = $accessToken->getTokenId();
         $clone->expiresAt = $accessToken->getExpiresAt();
         $clone->scopes = $accessToken->getScopes();
         if ($accessToken->hasMetadata('code')) {

1365) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:200    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withAccessTokenId(AccessTokenId $accessTokenId) : self
+    protected function withAccessTokenId(AccessTokenId $accessTokenId) : self
     {
         $clone = clone $this;
         $clone->accessTokenId = $accessTokenId;
         return $clone;
     }
     /**

1366) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:213    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withAuthorizationCodeId(AuthorizationCodeId $authorizationCodeId) : self
+    protected function withAuthorizationCodeId(AuthorizationCodeId $authorizationCodeId) : self
     {
         $clone = clone $this;
         $clone->authorizationCodeId = $authorizationCodeId;
         return $clone;
     }
     /**

1367) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:226    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withClaimsLocales(string $claimsLocales) : self
+    protected function withClaimsLocales(string $claimsLocales) : self
     {
         $clone = clone $this;
         $clone->claimsLocales = $claimsLocales;
         return $clone;
     }
     /**

1368) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:240    [M] TrueValue

--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->withAuthenticationTime = true;
+        $clone->withAuthenticationTime = false;
         return $clone;
     }
     /**
      * @param string[] $scopes
      *
      * @return IdTokenBuilder

1369) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:237    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withAuthenticationTime() : self
+    protected function withAuthenticationTime() : self
     {
         $clone = clone $this;
         $clone->withAuthenticationTime = true;
         return $clone;
     }
     /**

1370) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:250    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withScope(array $scopes) : self
+    protected function withScope(array $scopes) : self
     {
         $clone = clone $this;
         $clone->scopes = $scopes;
         return $clone;
     }
     /**

1371) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:263    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withRequestedClaims(array $requestedClaims) : self
+    protected function withRequestedClaims(array $requestedClaims) : self
     {
         $clone = clone $this;
         $clone->requestedClaims = $requestedClaims;
         return $clone;
     }
     /**

1372) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:276    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withNonce(string $nonce) : self
+    protected function withNonce(string $nonce) : self
     {
         $clone = clone $this;
         $clone->nonce = $nonce;
         return $clone;
     }
     /**

1373) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:289    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withExpirationAt(\DateTimeImmutable $expiresAt) : self
+    protected function withExpirationAt(\DateTimeImmutable $expiresAt) : self
     {
         $clone = clone $this;
         $clone->expiresAt = $expiresAt;
         return $clone;
     }
     /**

1374) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:303    [M] FalseValue

--- Original
+++ New
@@ @@
         $clone = clone $this;
-        $clone->withAuthenticationTime = false;
+        $clone->withAuthenticationTime = true;
         return $clone;
     }
     /**
      * @param JWSBuilder $jwsBuilder
      * @param JWKSet     $signatureKeys
      * @param string     $signatureAlgorithm

1375) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:300    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withoutAuthenticationTime() : self
+    protected function withoutAuthenticationTime() : self
     {
         $clone = clone $this;
         $clone->withAuthenticationTime = false;
         return $clone;
     }
     /**

1376) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:318    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         Assertion::inArray($signatureAlgorithm, $jwsBuilder->getSignatureAlgorithmManager()->list(), sprintf('Unsupported signature algorithm "%s". Please use one of the following one: %s', $signatureAlgorithm, implode(', ', $jwsBuilder->getSignatureAlgorithmManager()->list())));
-        Assertion::true(0 !== $signatureKeys->count(), 'The signature key set must contain at least one key.');
+        Assertion::true(1 !== $signatureKeys->count(), 'The signature key set must contain at least one key.');
         $clone = clone $this;
         $clone->jwsBuilder = $jwsBuilder;
         $clone->signatureKeys = $signatureKeys;
         $clone->signatureAlgorithm = $signatureAlgorithm;
         return $clone;
     }

1377) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:318    [M] NotIdentical

--- Original
+++ New
@@ @@
         Assertion::inArray($signatureAlgorithm, $jwsBuilder->getSignatureAlgorithmManager()->list(), sprintf('Unsupported signature algorithm "%s". Please use one of the following one: %s', $signatureAlgorithm, implode(', ', $jwsBuilder->getSignatureAlgorithmManager()->list())));
-        Assertion::true(0 !== $signatureKeys->count(), 'The signature key set must contain at least one key.');
+        Assertion::true(0 === $signatureKeys->count(), 'The signature key set must contain at least one key.');
         $clone = clone $this;
         $clone->jwsBuilder = $jwsBuilder;
         $clone->signatureKeys = $signatureKeys;
         $clone->signatureAlgorithm = $signatureAlgorithm;
         return $clone;
     }

1378) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:315    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withSignature(JWSBuilder $jwsBuilder, JWKSet $signatureKeys, string $signatureAlgorithm) : self
+    protected function withSignature(JWSBuilder $jwsBuilder, JWKSet $signatureKeys, string $signatureAlgorithm) : self
     {
         Assertion::inArray($signatureAlgorithm, $jwsBuilder->getSignatureAlgorithmManager()->list(), sprintf('Unsupported signature algorithm "%s". Please use one of the following one: %s', $signatureAlgorithm, implode(', ', $jwsBuilder->getSignatureAlgorithmManager()->list())));
         Assertion::true(0 !== $signatureKeys->count(), 'The signature key set must contain at least one key.');
         $clone = clone $this;
         $clone->jwsBuilder = $jwsBuilder;
         $clone->signatureKeys = $signatureKeys;

1379) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:334    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withEncryption(JWEBuilder $jweBuilder, string $keyEncryptionAlgorithm, string $contentEncryptionAlgorithm) : self
+    protected function withEncryption(JWEBuilder $jweBuilder, string $keyEncryptionAlgorithm, string $contentEncryptionAlgorithm) : self
     {
         Assertion::inArray($keyEncryptionAlgorithm, $jweBuilder->getKeyEncryptionAlgorithmManager()->list(), sprintf('Unsupported key encryption algorithm "%s". Please use one of the following one: %s', $keyEncryptionAlgorithm, implode(', ', $jweBuilder->getKeyEncryptionAlgorithmManager()->list())));
         Assertion::inArray($contentEncryptionAlgorithm, $jweBuilder->getContentEncryptionAlgorithmManager()->list(), sprintf('Unsupported content encryption algorithm "%s". Please use one of the following one: %s', $contentEncryptionAlgorithm, implode(', ', $jweBuilder->getContentEncryptionAlgorithmManager()->list())));
         $clone = clone $this;
         $clone->jweBuilder = $jweBuilder;
         $clone->keyEncryptionAlgorithm = $keyEncryptionAlgorithm;

1380) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:355    [M] NotIdentical

--- Original
+++ New
@@ @@
         $data = $this->updateClaimsWithNonce($data);
-        if (null !== $this->signatureAlgorithm) {
+        if (null === $this->signatureAlgorithm) {
             $data = $this->updateClaimsWithJwtClaims($data);
             $data = $this->updateClaimsWithTokenHash($data);
             $data = $this->updateClaimsAudience($data);
             $result = $this->computeIdToken($data);
         } else {
             $result = json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

1381) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:361    [M] BitwiseOr

--- Original
+++ New
@@ @@
         } else {
-            $result = json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
+            $result = json_encode($data, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES);
         }
         if (null !== $this->keyEncryptionAlgorithm && null !== $this->contentEncryptionAlgorithm) {
             $result = $this->tryToEncrypt($this->client, $result);
         }
         return $result;
     }

1382) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:364    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $this->keyEncryptionAlgorithm && null !== $this->contentEncryptionAlgorithm) {
+        if (null === $this->keyEncryptionAlgorithm && null !== $this->contentEncryptionAlgorithm) {
             $result = $this->tryToEncrypt($this->client, $result);
         }
         return $result;
     }
     /**
      * @param array $claims

1383) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:364    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $this->keyEncryptionAlgorithm && null !== $this->contentEncryptionAlgorithm) {
+        if (null !== $this->keyEncryptionAlgorithm && null === $this->contentEncryptionAlgorithm) {
             $result = $this->tryToEncrypt($this->client, $result);
         }
         return $result;
     }
     /**
      * @param array $claims

1384) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:364    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if (null !== $this->keyEncryptionAlgorithm && null !== $this->contentEncryptionAlgorithm) {
+        if (null !== $this->keyEncryptionAlgorithm || null !== $this->contentEncryptionAlgorithm) {
             $result = $this->tryToEncrypt($this->client, $result);
         }
         return $result;
     }
     /**
      * @param array $claims

1385) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:349    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function build() : string
+    protected function build() : string
     {
         $data = $this->userinfo->getUserinfo($this->client, $this->userAccount, $this->redirectUri, $this->requestedClaims, $this->scopes, $this->claimsLocales);
         $data = $this->updateClaimsWithAmrAndAcrInfo($data, $this->userAccount);
         $data = $this->updateClaimsWithAuthenticationTime($data, $this->userAccount);
         $data = $this->updateClaimsWithNonce($data);
         if (null !== $this->signatureAlgorithm) {

1386) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:378    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $this->expiresAt) {
+        if (null !== $this->expiresAt) {
             $this->expiresAt = (new \DateTimeImmutable())->setTimestamp(time() + $this->lifetime);
         }
         $claims += ['iat' => time(), 'nbf' => time(), 'exp' => $this->expiresAt->getTimestamp(), 'jti' => Base64Url::encode(random_bytes(25)), 'iss' => $this->issuer];
         return $claims;
     }
     /**

1387) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:379    [M] Plus

--- Original
+++ New
@@ @@
         if (null === $this->expiresAt) {
-            $this->expiresAt = (new \DateTimeImmutable())->setTimestamp(time() + $this->lifetime);
+            $this->expiresAt = (new \DateTimeImmutable())->setTimestamp(time() - $this->lifetime);
         }
         $claims += ['iat' => time(), 'nbf' => time(), 'exp' => $this->expiresAt->getTimestamp(), 'jti' => Base64Url::encode(random_bytes(25)), 'iss' => $this->issuer];
         return $claims;
     }
     /**
      * @param array       $claims

1388) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:381    [M] PlusEqual

--- Original
+++ New
@@ @@
         }
-        $claims += ['iat' => time(), 'nbf' => time(), 'exp' => $this->expiresAt->getTimestamp(), 'jti' => Base64Url::encode(random_bytes(25)), 'iss' => $this->issuer];
+        $claims -= ['iat' => time(), 'nbf' => time(), 'exp' => $this->expiresAt->getTimestamp(), 'jti' => Base64Url::encode(random_bytes(25)), 'iss' => $this->issuer];
         return $claims;
     }
     /**
      * @param array       $claims
      * @param UserAccount $userAccount
      *

1389) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:400    [M] TrueValue

--- Original
+++ New
@@ @@
     {
-        if (true === $this->withAuthenticationTime && null !== $userAccount->getLastLoginAt()) {
+        if (false === $this->withAuthenticationTime && null !== $userAccount->getLastLoginAt()) {
             //FIXME: check if the client has a require_auth_time parameter
             $claims['auth_time'] = $userAccount->getLastLoginAt()->getTimestamp();
         }
         return $claims;
     }
     /**

1390) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:400    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (true === $this->withAuthenticationTime && null !== $userAccount->getLastLoginAt()) {
+        if (true !== $this->withAuthenticationTime && null !== $userAccount->getLastLoginAt()) {
             //FIXME: check if the client has a require_auth_time parameter
             $claims['auth_time'] = $userAccount->getLastLoginAt()->getTimestamp();
         }
         return $claims;
     }
     /**

1391) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:400    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (true === $this->withAuthenticationTime && null !== $userAccount->getLastLoginAt()) {
+        if (true === $this->withAuthenticationTime && null === $userAccount->getLastLoginAt()) {
             //FIXME: check if the client has a require_auth_time parameter
             $claims['auth_time'] = $userAccount->getLastLoginAt()->getTimestamp();
         }
         return $claims;
     }
     /**

1392) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:400    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
-        if (true === $this->withAuthenticationTime && null !== $userAccount->getLastLoginAt()) {
+        if (true === $this->withAuthenticationTime || null !== $userAccount->getLastLoginAt()) {
             //FIXME: check if the client has a require_auth_time parameter
             $claims['auth_time'] = $userAccount->getLastLoginAt()->getTimestamp();
         }
         return $claims;
     }
     /**

1393) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:414    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (null !== $this->nonce) {
+        if (null === $this->nonce) {
             $claims['nonce'] = $this->nonce;
         }
         return $claims;
     }
     /**
      * @param array $claims

1394) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:445    [M] Foreach_

--- Original
+++ New
@@ @@
     {
-        foreach (['amr' => 'amr', 'acr' => 'acr'] as $claim => $key) {
+        foreach (array() as $claim => $key) {
             if ($userAccount->has($claim)) {
                 $claims[$key] = $userAccount->get($claim);
             }
         }
         return $claims;
     }

1395) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:470    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $serializer = new JwsCompactSerializer();
-        return $serializer->serialize($jws, 0);
+        return $serializer->serialize($jws, 1);
     }
     /**
      * @param Client $client
      * @param string $jwt
      *
      * @return string

1396) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:499    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $serializer = new JweCompactSerializer();
-        return $serializer->serialize($jwe, 0);
+        return $serializer->serialize($jwe, 1);
     }
     /**
      * @param string $signatureAlgorithm
      *
      * @return JWK
      */

1397) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:510    [M] Identical

--- Original
+++ New
@@ @@
         $signatureAlgorithm = $this->jwsBuilder->getSignatureAlgorithmManager()->get($signatureAlgorithm);
-        if ('none' === $signatureAlgorithm->name()) {
+        if ('none' !== $signatureAlgorithm->name()) {
             return JWK::create(['kty' => 'none', 'alg' => 'none', 'use' => 'sig']);
         }
         $signatureKey = $this->signatureKeys->selectKey('sig', $signatureAlgorithm);
         Assertion::notNull($signatureKey, 'Unable to find a key to sign the ID Token. Please verify the selected key set contains suitable keys.');
         return $signatureKey;
     }

1398) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:545    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if ('none' === $this->signatureAlgorithm) {
+        if ('none' !== $this->signatureAlgorithm) {
             return $claims;
         }
         if (null !== $this->accessTokenId) {
             $claims['at_hash'] = $this->getHash($this->accessTokenId);
         }
         if (null !== $this->authorizationCodeId) {

1399) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:548    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $this->accessTokenId) {
+        if (null === $this->accessTokenId) {
             $claims['at_hash'] = $this->getHash($this->accessTokenId);
         }
         if (null !== $this->authorizationCodeId) {
             $claims['c_hash'] = $this->getHash($this->authorizationCodeId);
         }
         return $claims;

1400) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:551    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if (null !== $this->authorizationCodeId) {
+        if (null === $this->authorizationCodeId) {
             $claims['c_hash'] = $this->getHash($this->authorizationCodeId);
         }
         return $claims;
     }
     /**
      * @param TokenId $tokenId

1401) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:565    [M] TrueValue

--- Original
+++ New
@@ @@
     {
-        return Base64Url::encode(mb_substr(hash($this->getHashMethod(), $tokenId->getValue(), true), 0, $this->getHashSize(), '8bit'));
+        return Base64Url::encode(mb_substr(hash($this->getHashMethod(), $tokenId->getValue(), false), 0, $this->getHashSize(), '8bit'));
     }
     /**
      * @throws \InvalidArgumentException
      *
      * @return string
      */

1402) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilder.php:565    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        return Base64Url::encode(mb_substr(hash($this->getHashMethod(), $tokenId->getValue(), true), 0, $this->getHashSize(), '8bit'));
+        return Base64Url::encode(mb_substr(hash($this->getHashMethod(), $tokenId->getValue(), true), 1, $this->getHashSize(), '8bit'));
     }
     /**
      * @throws \InvalidArgumentException
      *
      * @return string
      */

1403) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenBuilderFactory.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function createBuilder(Client $client, UserAccount $userAccount, string $redirectUri)
+    protected function createBuilder(Client $client, UserAccount $userAccount, string $redirectUri)
     {
         return IdTokenBuilder::create($this->issuer, $this->userinfo, $this->lifetime, $client, $userAccount, $redirectUri);
     }
 }


1404) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:64    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if ('none' === $defaultSignatureAlgorithm) {
+        if ('none' !== $defaultSignatureAlgorithm) {
             throw new \InvalidArgumentException('The algorithm "none" is not allowed for ID Tokens issued through the authorization endpoint.');
         }
         $this->idTokenBuilderFactory = $idTokenBuilderFactory;
         $this->defaultSignatureAlgorithm = $defaultSignatureAlgorithm;
         $this->jwsBuilder = $jwsBuilder;
         $this->signatureKeys = $signatureKeys;

1405) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:77    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAssociatedGrantTypes() : array
+    protected function getAssociatedGrantTypes() : array
     {
         return [];
     }
     /**
      * {@inheritdoc}
      */

1406) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:85    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponseType() : string
+    protected function getResponseType() : string
     {
         return 'id_token';
     }
     /**
      * {@inheritdoc}
      */

1407) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:93    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponseMode() : string
+    protected function getResponseMode() : string
     {
         return self::RESPONSE_TYPE_MODE_FRAGMENT;
     }
     /**
      * {@inheritdoc}
      */

1408) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:106    [M] LogicalNot

--- Original
+++ New
@@ @@
         if (in_array('openid', $authorization->getScopes())) {
-            if (!array_key_exists('nonce', $authorization->getQueryParams())) {
+            if (array_key_exists('nonce', $authorization->getQueryParams())) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "nonce" is mandatory using "id_token" response type.');
             }
             $authorization = $this->populateWithIdToken($authorization);
         }
         return $authorization;
     }

1409) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:101    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Authorization $authorization, callable $next) : Authorization
+    protected function process(Authorization $authorization, callable $next) : Authorization
     {
         $authorization = $next($authorization);
         if (in_array('openid', $authorization->getScopes())) {
             if (!array_key_exists('nonce', $authorization->getQueryParams())) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'The parameter "nonce" is mandatory using "id_token" response type.');
             }

1410) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:159    [M] Identical

--- Original
+++ New
@@ @@
             $signatureAlgorithm = $authorization->getClient()->get('id_token_signed_response_alg');
-            if ('none' === $signatureAlgorithm) {
+            if ('none' !== $signatureAlgorithm) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_CLIENT, 'The ID Token signature algorithm set for the client (parameter "id_token_signed_response_alg") is "none" but this algorithm is not allowed for ID Tokens issued through the authorization endpoint.');
             }
             $idTokenBuilder = $idTokenBuilder->withSignature($this->jwsBuilder, $this->signatureKeys, $signatureAlgorithm);
         } else {
             $idTokenBuilder = $idTokenBuilder->withSignature($this->jwsBuilder, $this->signatureKeys, $this->defaultSignatureAlgorithm);
         }

1411) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:166    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if ($authorization->getClient()->has('id_token_encrypted_response_alg') && $authorization->getClient()->has('id_token_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if (($authorization->getClient()->has('id_token_encrypted_response_alg') || $authorization->getClient()->has('id_token_encrypted_response_enc')) && null !== $this->jweBuilder) {
             $keyEncryptionAlgorithm = $authorization->getClient()->get('id_token_encrypted_response_alg');
             $contentEncryptionAlgorithm = $authorization->getClient()->get('id_token_encrypted_response_enc');
             $idTokenBuilder = $idTokenBuilder->withEncryption($this->jweBuilder, $keyEncryptionAlgorithm, $contentEncryptionAlgorithm);
         }
         $idToken = $idTokenBuilder->build();
         return $authorization->withResponseParameter('id_token', $idToken);

1412) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:166    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if ($authorization->getClient()->has('id_token_encrypted_response_alg') && $authorization->getClient()->has('id_token_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if ($authorization->getClient()->has('id_token_encrypted_response_alg') && $authorization->getClient()->has('id_token_encrypted_response_enc') && null === $this->jweBuilder) {
             $keyEncryptionAlgorithm = $authorization->getClient()->get('id_token_encrypted_response_alg');
             $contentEncryptionAlgorithm = $authorization->getClient()->get('id_token_encrypted_response_enc');
             $idTokenBuilder = $idTokenBuilder->withEncryption($this->jweBuilder, $keyEncryptionAlgorithm, $contentEncryptionAlgorithm);
         }
         $idToken = $idTokenBuilder->build();
         return $authorization->withResponseParameter('id_token', $idToken);

1413) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:166    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if ($authorization->getClient()->has('id_token_encrypted_response_alg') && $authorization->getClient()->has('id_token_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if ($authorization->getClient()->has('id_token_encrypted_response_alg') && $authorization->getClient()->has('id_token_encrypted_response_enc') || null !== $this->jweBuilder) {
             $keyEncryptionAlgorithm = $authorization->getClient()->get('id_token_encrypted_response_alg');
             $contentEncryptionAlgorithm = $authorization->getClient()->get('id_token_encrypted_response_enc');
             $idTokenBuilder = $idTokenBuilder->withEncryption($this->jweBuilder, $keyEncryptionAlgorithm, $contentEncryptionAlgorithm);
         }
         $idToken = $idTokenBuilder->build();
         return $authorization->withResponseParameter('id_token', $idToken);

1414) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:184    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$authorization->hasQueryParam('claims')) {
+        if ($authorization->hasQueryParam('claims')) {
             return [];
         }
         $requestedClaims = $authorization->getQueryParam('claims');
         if (true === array_key_exists('id_token', $requestedClaims)) {
             return $requestedClaims['id_token'];
         }

1415) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:189    [M] TrueValue

--- Original
+++ New
@@ @@
         $requestedClaims = $authorization->getQueryParam('claims');
-        if (true === array_key_exists('id_token', $requestedClaims)) {
+        if (false === array_key_exists('id_token', $requestedClaims)) {
             return $requestedClaims['id_token'];
         }
         return [];
     }
 }


1416) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenGrant/IdTokenResponseType.php:189    [M] Identical

--- Original
+++ New
@@ @@
         $requestedClaims = $authorization->getQueryParam('claims');
-        if (true === array_key_exists('id_token', $requestedClaims)) {
+        if (true !== array_key_exists('id_token', $requestedClaims)) {
             return $requestedClaims['id_token'];
         }
         return [];
     }
 }


1417) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenId.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function create(string $value) : self
+    protected static function create(string $value) : self
     {
         return new self($value);
     }
 }


1418) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenLoader.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedSignatureAlgorithms() : array
+    protected function getSupportedSignatureAlgorithms() : array
     {
         return $this->jwsVerifier->getSignatureAlgorithmManager()->list();
     }
     /**
      * @param IdTokenId $idTokenId
      *

1419) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenLoader.php:69    [M] TrueValue

--- Original
+++ New
@@ @@
             $jwt = $this->jwsVerifier->load($value);
-            $claims = json_decode($jwt->getPayload(), true);
+            $claims = json_decode($jwt->getPayload(), false);
             Assertion::isArray($claims, 'Invalid ID Token');
             $validSignature = $this->jwsVerifier->verifyWithKeySet($jwt, $this->signatureKeySet, 0);
             Assertion::inArray($jwt->getSignature($validSignature)->getProtectedHeader('alg'), $this->signatureAlgorithms);
             $idToken = IdToken::create($idTokenId, $claims);
             return $idToken;
         } catch (\Exception $e) {

1420) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenLoader.php:71    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             Assertion::isArray($claims, 'Invalid ID Token');
-            $validSignature = $this->jwsVerifier->verifyWithKeySet($jwt, $this->signatureKeySet, 0);
+            $validSignature = $this->jwsVerifier->verifyWithKeySet($jwt, $this->signatureKeySet, 1);
             Assertion::inArray($jwt->getSignature($validSignature)->getProtectedHeader('alg'), $this->signatureAlgorithms);
             $idToken = IdToken::create($idTokenId, $claims);
             return $idToken;
         } catch (\Exception $e) {
             return null;
         }

1421) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IdTokenLoader.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function load(IdTokenId $idTokenId) : ?IdToken
+    protected function load(IdTokenId $idTokenId) : ?IdToken
     {
         $value = $idTokenId->getValue();
         try {
             $jwt = $this->jwsVerifier->load($value);
             $claims = json_decode($jwt->getPayload(), true);
             Assertion::isArray($claims, 'Invalid ID Token');

1422) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IFrame/IFrameEndpoint.php:48    [M] Foreach_

--- Original
+++ New
@@ @@
         $headers = ['Content-Type' => 'text/html; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         $response->getBody()->write($content);
         return $response;
     }
     /**

1423) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/IFrame/IFrameEndpoint.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $content = $this->renderTemplate();
         $response = $this->responseFactory->createResponse();
         $headers = ['Content-Type' => 'text/html; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
         foreach ($headers as $k => $v) {
             $response = $response->withHeader($k, $v);

1424) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:30    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(ClaimSource $claimSource) : self
+    protected function add(ClaimSource $claimSource) : self
     {
         $this->claimSources[] = $claimSource;
         return $this;
     }
     /**
      * @return ClaimSource[]

1425) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         return $this->claimSources;
     }
     /**
      * @param UserAccount $userAccount
      * @param string[]    $scope

1426) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:58    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $claims = ['_claim_names' => [], '_claim_sources' => []];
-        $i = 0;
+        $i = 1;
         foreach ($this->all() as $claimSource) {
             $result = $claimSource->getUserInfo($userAccount, $scope, $previousClaims);
             if (null !== $result) {
                 ++$i;
                 $src = sprintf('src%d', $i);
                 $_claim_names = [];

1427) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:62    [M] NotIdentical

--- Original
+++ New
@@ @@
             $result = $claimSource->getUserInfo($userAccount, $scope, $previousClaims);
-            if (null !== $result) {
+            if (null === $result) {
                 ++$i;
                 $src = sprintf('src%d', $i);
                 $_claim_names = [];
                 foreach ($result->getAvailableClaims() as $claim) {
                     if ('sub' !== $claim) {
                         $_claim_names[$claim] = $src;

1428) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:63    [M] Increment

--- Original
+++ New
@@ @@
             if (null !== $result) {
-                ++$i;
+                --$i;
                 $src = sprintf('src%d', $i);
                 $_claim_names = [];
                 foreach ($result->getAvailableClaims() as $claim) {
                     if ('sub' !== $claim) {
                         $_claim_names[$claim] = $src;
                     }

1429) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:67    [M] NotIdentical

--- Original
+++ New
@@ @@
                 foreach ($result->getAvailableClaims() as $claim) {
-                    if ('sub' !== $claim) {
+                    if ('sub' === $claim) {
                         $_claim_names[$claim] = $src;
                     }
                 }
                 $claims['_claim_names'] = array_merge($claims['_claim_names'], $_claim_names);
                 $claims['_claim_sources'][$src] = $result->getSource();
             }

1430) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:66    [M] Foreach_

--- Original
+++ New
@@ @@
                 $_claim_names = [];
-                foreach ($result->getAvailableClaims() as $claim) {
+                foreach (array() as $claim) {
                     if ('sub' !== $claim) {
                         $_claim_names[$claim] = $src;
                     }
                 }
                 $claims['_claim_names'] = array_merge($claims['_claim_names'], $_claim_names);
                 $claims['_claim_sources'][$src] = $result->getSource();

1431) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:60    [M] Foreach_

--- Original
+++ New
@@ @@
         $i = 0;
-        foreach ($this->all() as $claimSource) {
+        foreach (array() as $claimSource) {
             $result = $claimSource->getUserInfo($userAccount, $scope, $previousClaims);
             if (null !== $result) {
                 ++$i;
                 $src = sprintf('src%d', $i);
                 $_claim_names = [];
                 foreach ($result->getAvailableClaims() as $claim) {

1432) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/ClaimSourceManager.php:52    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getUserInfo(UserAccount $userAccount, array $scope, array $previousClaims)
+    protected function getUserInfo(UserAccount $userAccount, array $scope, array $previousClaims)
     {
         $claims = ['_claim_names' => [], '_claim_sources' => []];
         $i = 0;
         foreach ($this->all() as $claimSource) {
             $result = $claimSource->getUserInfo($userAccount, $scope, $previousClaims);
             if (null !== $result) {

1433) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/Source.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getAvailableClaims() : array
+    protected function getAvailableClaims() : array
     {
         return $this->availableClaims;
     }
     /**
      * @return array
      */

1434) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ClaimSource/Source.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSource() : array
+    protected function getSource() : array
     {
         return $this->source;
     }
 }


1435) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/EncryptedSubjectIdentifier.php:39    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!in_array($algorithm, openssl_get_cipher_methods())) {
+        if (in_array($algorithm, openssl_get_cipher_methods())) {
             throw new \InvalidArgumentException(sprintf('The algorithm "%s" is not supported.', $algorithm));
         }
         $this->pairwiseEncryptionKey = $pairwiseEncryptionKey;
         $this->algorithm = $algorithm;
     }
     /**

1436) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/EncryptedSubjectIdentifier.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function calculateSubjectIdentifier(UserAccount $userAccount, string $sectorIdentifierHost) : string
+    protected function calculateSubjectIdentifier(UserAccount $userAccount, string $sectorIdentifierHost) : string
     {
         $prepared = sprintf('%s:%s', $sectorIdentifierHost, $userAccount->getPublicId()->getValue());
         return Base64Url::encode(openssl_encrypt($prepared, $this->algorithm, $this->pairwiseEncryptionKey, OPENSSL_RAW_DATA));
     }
     /**
      * {@inheritdoc}

1437) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/EncryptedSubjectIdentifier.php:67    [M] NotIdentical

--- Original
+++ New
@@ @@
         $parts = explode(':', $decoded);
-        if (3 !== count($parts)) {
+        if (3 === count($parts)) {
             return null;
         }
         return $parts[1];
     }
 }


1438) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/EncryptedSubjectIdentifier.php:71    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         }
-        return $parts[1];
+        return $parts[0];
     }
 }


1439) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/EncryptedSubjectIdentifier.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPublicIdFromSubjectIdentifier(string $subjectIdentifier) : ?string
+    protected function getPublicIdFromSubjectIdentifier(string $subjectIdentifier) : ?string
     {
         $decoded = openssl_decrypt(Base64Url::decode($subjectIdentifier), $this->algorithm, $this->pairwiseEncryptionKey, OPENSSL_RAW_DATA);
         $parts = explode(':', $decoded);
         if (3 !== count($parts)) {
             return null;
         }

1440) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/HashedSubjectIdentifier.php:39    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!in_array($algorithm, openssl_get_cipher_methods())) {
+        if (in_array($algorithm, openssl_get_cipher_methods())) {
             throw new \InvalidArgumentException(sprintf('The algorithm "%s" is not supported.', $algorithm));
         }
         $this->pairwiseHashKey = $pairwiseHashKey;
         $this->algorithm = $algorithm;
     }
     /**

1441) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/HashedSubjectIdentifier.php:57    [M] TrueValue

--- Original
+++ New
@@ @@
         $prepared = sprintf('%s%s', $sectorIdentifierHost, $userAccount->getPublicId()->getValue());
-        return Base64Url::encode(hash_hmac($this->algorithm, $prepared, $this->pairwiseHashKey, true));
+        return Base64Url::encode(hash_hmac($this->algorithm, $prepared, $this->pairwiseHashKey, false));
     }
     /**
      * {@inheritdoc}
      */
     public function getPublicIdFromSubjectIdentifier(string $subjectIdentifier) : ?string
     {

1442) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/HashedSubjectIdentifier.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function calculateSubjectIdentifier(UserAccount $userAccount, string $sectorIdentifierHost) : string
+    protected function calculateSubjectIdentifier(UserAccount $userAccount, string $sectorIdentifierHost) : string
     {
         $prepared = sprintf('%s%s', $sectorIdentifierHost, $userAccount->getPublicId()->getValue());
         return Base64Url::encode(hash_hmac($this->algorithm, $prepared, $this->pairwiseHashKey, true));
     }
     /**
      * {@inheritdoc}

1443) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/Pairwise/HashedSubjectIdentifier.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPublicIdFromSubjectIdentifier(string $subjectIdentifier) : ?string
+    protected function getPublicIdFromSubjectIdentifier(string $subjectIdentifier) : ?string
     {
         return null;
     }
 }


1444) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/AddressScopeSupport.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScope() : string
+    protected function getScope() : string
     {
         return 'address';
     }
     /**
      * {@inheritdoc}
      */

1445) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/AddressScopeSupport.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClaims() : array
+    protected function getClaims() : array
     {
         return ['address'];
     }
 }


1446) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/EmailScopeSupport.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScope() : string
+    protected function getScope() : string
     {
         return 'email';
     }
     /**
      * {@inheritdoc}
      */

1447) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/EmailScopeSupport.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClaims() : array
+    protected function getClaims() : array
     {
         return ['email', 'email_verified'];
     }
 }


1448) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/OpenIdScopeSupport.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScope() : string
+    protected function getScope() : string
     {
         return 'openid';
     }
     /**
      * {@inheritdoc}
      */

1449) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/OpenIdScopeSupport.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClaims() : array
+    protected function getClaims() : array
     {
         return ['sub'];
     }
 }


1450) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/PhoneScopeSupport.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScope() : string
+    protected function getScope() : string
     {
         return 'phone';
     }
     /**
      * {@inheritdoc}
      */

1451) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/PhoneScopeSupport.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClaims() : array
+    protected function getClaims() : array
     {
         return ['phone_number', 'phone_number_verified'];
     }
 }


1452) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/ProfilScopeSupport.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScope() : string
+    protected function getScope() : string
     {
         return 'profile';
     }
     /**
      * {@inheritdoc}
      */

1453) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/ProfilScopeSupport.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getClaims() : array
+    protected function getClaims() : array
     {
         return ['sub', 'name', 'given_name', 'middle_name', 'family_name', 'nickname', 'preferred_username', 'profile', 'picture', 'website', 'gender', 'birthdate', 'zoneinfo', 'locale', 'updated_at'];
     }
 }


1454) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/UserInfoScopeSupportManager.php:36    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(UserInfoScopeSupport $userinfoScopeSupport) : self
+    protected function add(UserInfoScopeSupport $userinfoScopeSupport) : self
     {
         $this->userinfoScopeSupports[$userinfoScopeSupport->getScope()] = $userinfoScopeSupport;
         return $this;
     }
     /**
      * @param string $scope

1455) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/UserInfoScopeSupportManager.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function has(string $scope) : bool
+    protected function has(string $scope) : bool
     {
         return array_key_exists($scope, $this->userinfoScopeSupports);
     }
     /**
      * @param string $scope
      *

1456) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/UserInfoScopeSupportManager.php:62    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->has($scope)) {
+        if ($this->has($scope)) {
             throw new \InvalidArgumentException(sprintf('The userinfo scope "%s" is not supported.', $scope));
         }
         return $this->userinfoScopeSupports[$scope];
     }
     /**
      * @return UserInfoScopeSupport[]

1457) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/UserInfoScopeSupportManager.php:60    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function get(string $scope) : UserInfoScopeSupport
+    protected function get(string $scope) : UserInfoScopeSupport
     {
         if (!$this->has($scope)) {
             throw new \InvalidArgumentException(sprintf('The userinfo scope "%s" is not supported.', $scope));
         }
         return $this->userinfoScopeSupports[$scope];
     }

1458) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/ScopeSupport/UserInfoScopeSupportManager.php:72    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         return $this->userinfoScopeSupports;
     }
 }


1459) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:63    [M] PlusEqual

--- Original
+++ New
@@ @@
         foreach ($this->userinfoScopeSupportManager->all() as $infoScopeSupport) {
-            $claimsSupported += $infoScopeSupport->getClaims();
+            $claimsSupported -= $infoScopeSupport->getClaims();
         }
         return array_unique($claimsSupported);
     }
     /**
      * @param Client      $client
      * @param UserAccount $userAccount

1460) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:62    [M] Foreach_

--- Original
+++ New
@@ @@
         $claimsSupported = [];
-        foreach ($this->userinfoScopeSupportManager->all() as $infoScopeSupport) {
+        foreach (array() as $infoScopeSupport) {
             $claimsSupported += $infoScopeSupport->getClaims();
         }
         return array_unique($claimsSupported);
     }
     /**
      * @param Client      $client

1461) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedClaims() : array
+    protected function getSupportedClaims() : array
     {
         $claimsSupported = [];
         foreach ($this->userinfoScopeSupportManager->all() as $infoScopeSupport) {
             $claimsSupported += $infoScopeSupport->getClaims();
         }
         return array_unique($claimsSupported);

1462) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getUserinfo(Client $client, UserAccount $userAccount, string $redirectUri, array $requestClaims, array $scopes, ?string $claimsLocales) : array
+    protected function getUserinfo(Client $client, UserAccount $userAccount, string $redirectUri, array $requestClaims, array $scopes, ?string $claimsLocales) : array
     {
         $requestClaims = array_merge($this->getClaimsFromClaimScope($scopes), $requestClaims);
         $claims = $this->getClaimValues($userAccount, $requestClaims, $claimsLocales);
         $claims = array_merge($claims, $this->claimSourceManager->getUserInfo($userAccount, $scopes, []));
         $claims['sub'] = $this->calculateSubjectIdentifier($client, $userAccount, $redirectUri);
         return $claims;

1463) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:106    [M] Foreach_

--- Original
+++ New
@@ @@
                 $scope_claims = $this->userinfoScopeSupportManager->get($scope)->getClaims();
-                foreach ($scope_claims as $scope_claim) {
+                foreach (array() as $scope_claim) {
                     $result[$scope_claim] = null;
                 }
             }
         }
         return $result;
     }

1464) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:103    [M] Foreach_

--- Original
+++ New
@@ @@
         $result = [];
-        foreach ($scopes as $scope) {
+        foreach (array() as $scope) {
             if ($this->userinfoScopeSupportManager->has($scope)) {
                 $scope_claims = $this->userinfoScopeSupportManager->get($scope)->getClaims();
                 foreach ($scope_claims as $scope_claim) {
                     $result[$scope_claim] = null;
                 }
             }

1465) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:125    [M] Identical

--- Original
+++ New
@@ @@
         $result = [];
-        if (null === $claimsLocales) {
+        if (null !== $claimsLocales) {
             $claimsLocales = [];
         } elseif (true === is_string($claimsLocales)) {
             $claimsLocales = explode(' ', $claimsLocales);
         }
         $claimsLocales[] = '';
         foreach ($claims as $claim => $config) {

1466) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:127    [M] TrueValue

--- Original
+++ New
@@ @@
             $claimsLocales = [];
-        } elseif (true === is_string($claimsLocales)) {
+        } elseif (false === is_string($claimsLocales)) {
             $claimsLocales = explode(' ', $claimsLocales);
         }
         $claimsLocales[] = '';
         foreach ($claims as $claim => $config) {
             foreach ($claimsLocales as $claims_locale) {
                 $claim_locale = $this->computeClaimWithLocale($claim, $claims_locale);

1467) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:127    [M] Identical

--- Original
+++ New
@@ @@
             $claimsLocales = [];
-        } elseif (true === is_string($claimsLocales)) {
+        } elseif (true !== is_string($claimsLocales)) {
             $claimsLocales = explode(' ', $claimsLocales);
         }
         $claimsLocales[] = '';
         foreach ($claims as $claim => $config) {
             foreach ($claimsLocales as $claims_locale) {
                 $claim_locale = $this->computeClaimWithLocale($claim, $claims_locale);

1468) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:135    [M] NotIdentical

--- Original
+++ New
@@ @@
                 $claim_value = $this->getUserClaim($userAccount, $claim_locale, $config);
-                if (null !== $claim_value) {
+                if (null === $claim_value) {
                     $result[$claim_locale] = $claim_value;
                     break;
                 }
             }
         }
         return $result;

1469) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:138    [M] Break_

--- Original
+++ New
@@ @@
                     $result[$claim_locale] = $claim_value;
-                    break;
+                    continue;
                 }
             }
         }
         return $result;
     }
     /**

1470) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:132    [M] Foreach_

--- Original
+++ New
@@ @@
         foreach ($claims as $claim => $config) {
-            foreach ($claimsLocales as $claims_locale) {
+            foreach (array() as $claims_locale) {
                 $claim_locale = $this->computeClaimWithLocale($claim, $claims_locale);
                 $claim_value = $this->getUserClaim($userAccount, $claim_locale, $config);
                 if (null !== $claim_value) {
                     $result[$claim_locale] = $claim_value;
                     break;
                 }

1471) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:131    [M] Foreach_

--- Original
+++ New
@@ @@
         $claimsLocales[] = '';
-        foreach ($claims as $claim => $config) {
+        foreach (array() as $claim => $config) {
             foreach ($claimsLocales as $claims_locale) {
                 $claim_locale = $this->computeClaimWithLocale($claim, $claims_locale);
                 $claim_value = $this->getUserClaim($userAccount, $claim_locale, $config);
                 if (null !== $claim_value) {
                     $result[$claim_locale] = $claim_value;
                     break;

1472) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:181    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enablePairwiseSubject(PairwiseSubjectIdentifierAlgorithm $pairwiseAlgorithm, bool $isPairwiseSubjectDefault)
+    protected function enablePairwiseSubject(PairwiseSubjectIdentifierAlgorithm $pairwiseAlgorithm, bool $isPairwiseSubjectDefault)
     {
         $this->pairwiseAlgorithm = $pairwiseAlgorithm;
         $this->isPairwiseSubjectDefault = $isPairwiseSubjectDefault;
     }
     /**
      * @return bool

1473) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:192    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        return null !== $this->pairwiseAlgorithm;
+        return null === $this->pairwiseAlgorithm;
     }
     /**
      * @return PairwiseSubjectIdentifierAlgorithm|null
      */
     public function getPairwiseSubjectIdentifierAlgorithm() : ?PairwiseSubjectIdentifierAlgorithm
     {

1474) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:190    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isPairwiseSubjectIdentifierSupported() : bool
+    protected function isPairwiseSubjectIdentifierSupported() : bool
     {
         return null !== $this->pairwiseAlgorithm;
     }
     /**
      * @return PairwiseSubjectIdentifierAlgorithm|null
      */

1475) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:198    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPairwiseSubjectIdentifierAlgorithm() : ?PairwiseSubjectIdentifierAlgorithm
+    protected function getPairwiseSubjectIdentifierAlgorithm() : ?PairwiseSubjectIdentifierAlgorithm
     {
         return $this->pairwiseAlgorithm;
     }
     /**
      * @return bool
      */

1476) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:206    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isPairwiseSubjectDefault() : bool
+    protected function isPairwiseSubjectDefault() : bool
     {
         return $this->isPairwiseSubjectDefault;
     }
     /**
      * @param Client      $client
      * @param UserAccount $userAccount

1477) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:221    [M] FalseValue

--- Original
+++ New
@@ @@
         $sub = $userAccount->getPublicId()->getValue();
-        if (false === $this->isPairwiseSubjectIdentifierSupported()) {
+        if (true === $this->isPairwiseSubjectIdentifierSupported()) {
             return $sub;
         }
         if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
             $sectorIdentifierHost = $this->getSectorIdentifierHost($client, $redirectUri);
             return $this->pairwiseAlgorithm->calculateSubjectIdentifier($userAccount, $sectorIdentifierHost);
         }

1478) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:221    [M] Identical

--- Original
+++ New
@@ @@
         $sub = $userAccount->getPublicId()->getValue();
-        if (false === $this->isPairwiseSubjectIdentifierSupported()) {
+        if (false !== $this->isPairwiseSubjectIdentifierSupported()) {
             return $sub;
         }
         if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
             $sectorIdentifierHost = $this->getSectorIdentifierHost($client, $redirectUri);
             return $this->pairwiseAlgorithm->calculateSubjectIdentifier($userAccount, $sectorIdentifierHost);
         }

1479) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:224    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
+        if ($client->has('subject_type') && 'pairwise' !== $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
             $sectorIdentifierHost = $this->getSectorIdentifierHost($client, $redirectUri);
             return $this->pairwiseAlgorithm->calculateSubjectIdentifier($userAccount, $sectorIdentifierHost);
         }
         return $sub;
     }
     /**

1480) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:224    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
+        if ($client->has('subject_type') || 'pairwise' === $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
             $sectorIdentifierHost = $this->getSectorIdentifierHost($client, $redirectUri);
             return $this->pairwiseAlgorithm->calculateSubjectIdentifier($userAccount, $sectorIdentifierHost);
         }
         return $sub;
     }
     /**

1481) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:224    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
+        if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || false === $this->isPairwiseSubjectDefault()) {
             $sectorIdentifierHost = $this->getSectorIdentifierHost($client, $redirectUri);
             return $this->pairwiseAlgorithm->calculateSubjectIdentifier($userAccount, $sectorIdentifierHost);
         }
         return $sub;
     }
     /**

1482) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:224    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
+        if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || true !== $this->isPairwiseSubjectDefault()) {
             $sectorIdentifierHost = $this->getSectorIdentifierHost($client, $redirectUri);
             return $this->pairwiseAlgorithm->calculateSubjectIdentifier($userAccount, $sectorIdentifierHost);
         }
         return $sub;
     }
     /**

1483) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:224    [M] LogicalOr

--- Original
+++ New
@@ @@
         }
-        if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') || true === $this->isPairwiseSubjectDefault()) {
+        if ($client->has('subject_type') && 'pairwise' === $client->get('subject_type') && true === $this->isPairwiseSubjectDefault()) {
             $sectorIdentifierHost = $this->getSectorIdentifierHost($client, $redirectUri);
             return $this->pairwiseAlgorithm->calculateSubjectIdentifier($userAccount, $sectorIdentifierHost);
         }
         return $sub;
     }
     /**

1484) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:246    [M] TrueValue

--- Original
+++ New
@@ @@
         $uri = $redirectUri;
-        if (true === $client->has('sector_identifier_uri')) {
+        if (false === $client->has('sector_identifier_uri')) {
             $uri = $client->get('sector_identifier_uri');
         }
         $data = parse_url($uri);
         if (!is_array($data) || !array_key_exists('host', $data)) {
             throw new \InvalidArgumentException(sprintf('Invalid Sector Identifier Uri "%s".', $uri));
         }

1485) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:246    [M] Identical

--- Original
+++ New
@@ @@
         $uri = $redirectUri;
-        if (true === $client->has('sector_identifier_uri')) {
+        if (true !== $client->has('sector_identifier_uri')) {
             $uri = $client->get('sector_identifier_uri');
         }
         $data = parse_url($uri);
         if (!is_array($data) || !array_key_exists('host', $data)) {
             throw new \InvalidArgumentException(sprintf('Invalid Sector Identifier Uri "%s".', $uri));
         }

1486) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:251    [M] LogicalNot

--- Original
+++ New
@@ @@
         $data = parse_url($uri);
-        if (!is_array($data) || !array_key_exists('host', $data)) {
+        if (is_array($data) || !array_key_exists('host', $data)) {
             throw new \InvalidArgumentException(sprintf('Invalid Sector Identifier Uri "%s".', $uri));
         }
         return $data['host'];
     }
 }


1487) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:251    [M] LogicalNot

--- Original
+++ New
@@ @@
         $data = parse_url($uri);
-        if (!is_array($data) || !array_key_exists('host', $data)) {
+        if (!is_array($data) || array_key_exists('host', $data)) {
             throw new \InvalidArgumentException(sprintf('Invalid Sector Identifier Uri "%s".', $uri));
         }
         return $data['host'];
     }
 }


1488) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfo/UserInfo.php:251    [M] LogicalOr

--- Original
+++ New
@@ @@
         $data = parse_url($uri);
-        if (!is_array($data) || !array_key_exists('host', $data)) {
+        if (!is_array($data) && !array_key_exists('host', $data)) {
             throw new \InvalidArgumentException(sprintf('Invalid Sector Identifier Uri "%s".', $uri));
         }
         return $data['host'];
     }
 }


1489) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:90    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enableSignature(JWSBuilder $jwsBuilder, JWKSet $signatureKeys)
+    protected function enableSignature(JWSBuilder $jwsBuilder, JWKSet $signatureKeys)
     {
         $this->jwsBuilder = $jwsBuilder;
         $this->signatureKeys = $signatureKeys;
     }
     /**
      * @param JWEBuilder $jweBuilder

1490) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:99    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enableEncryption(JWEBuilder $jweBuilder)
+    protected function enableEncryption(JWEBuilder $jweBuilder)
     {
         $this->jweBuilder = $jweBuilder;
     }
     /**
      * {@inheritdoc}
      */

1491) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:125    [M] Foreach_

--- Original
+++ New
@@ @@
         $headers = ['Content-Type' => sprintf('application/%s; charset=UTF-8', $isJwt ? 'jwt' : 'json'), 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
     /**
      * @param Client      $client

1492) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:107    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         /**
          * @var AccessToken
          */
         $accessToken = $request->getAttribute('access_token');
         $this->checkScope($accessToken);

1493) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:142    [M] FalseValue

--- Original
+++ New
@@ @@
     {
-        $isJwt = false;
+        $isJwt = true;
         $requestedClaims = $this->getEndpointClaims($accessToken);
         $idTokenBuilder = $this->idTokenBuilderFactory->createBuilder($client, $userAccount, $accessToken->getMetadata('redirect_uri'));
         if ($client->has('userinfo_signed_response_alg') && null !== $this->jwsBuilder) {
             $isJwt = true;
             $signatureAlgorithm = $client->get('userinfo_signed_response_alg');
             $idTokenBuilder = $idTokenBuilder->withSignature($this->jwsBuilder, $this->signatureKeys, $signatureAlgorithm);

1494) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:146    [M] NotIdentical

--- Original
+++ New
@@ @@
         $idTokenBuilder = $this->idTokenBuilderFactory->createBuilder($client, $userAccount, $accessToken->getMetadata('redirect_uri'));
-        if ($client->has('userinfo_signed_response_alg') && null !== $this->jwsBuilder) {
+        if ($client->has('userinfo_signed_response_alg') && null === $this->jwsBuilder) {
             $isJwt = true;
             $signatureAlgorithm = $client->get('userinfo_signed_response_alg');
             $idTokenBuilder = $idTokenBuilder->withSignature($this->jwsBuilder, $this->signatureKeys, $signatureAlgorithm);
         }
         if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
             $isJwt = true;

1495) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:146    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $idTokenBuilder = $this->idTokenBuilderFactory->createBuilder($client, $userAccount, $accessToken->getMetadata('redirect_uri'));
-        if ($client->has('userinfo_signed_response_alg') && null !== $this->jwsBuilder) {
+        if ($client->has('userinfo_signed_response_alg') || null !== $this->jwsBuilder) {
             $isJwt = true;
             $signatureAlgorithm = $client->get('userinfo_signed_response_alg');
             $idTokenBuilder = $idTokenBuilder->withSignature($this->jwsBuilder, $this->signatureKeys, $signatureAlgorithm);
         }
         if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
             $isJwt = true;

1496) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:147    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($client->has('userinfo_signed_response_alg') && null !== $this->jwsBuilder) {
-            $isJwt = true;
+            $isJwt = false;
             $signatureAlgorithm = $client->get('userinfo_signed_response_alg');
             $idTokenBuilder = $idTokenBuilder->withSignature($this->jwsBuilder, $this->signatureKeys, $signatureAlgorithm);
         }
         if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
             $isJwt = true;
             $keyEncryptionAlgorithm = $client->get('userinfo_encrypted_response_alg');

1497) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:151    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if (($client->has('userinfo_encrypted_response_alg') || $client->has('userinfo_encrypted_response_enc')) && null !== $this->jweBuilder) {
             $isJwt = true;
             $keyEncryptionAlgorithm = $client->get('userinfo_encrypted_response_alg');
             $contentEncryptionAlgorithm = $client->get('userinfo_encrypted_response_enc');
             $idTokenBuilder = $idTokenBuilder->withEncryption($this->jweBuilder, $keyEncryptionAlgorithm, $contentEncryptionAlgorithm);
         }
         $idTokenBuilder = $idTokenBuilder->withAccessToken($accessToken);

1498) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:151    [M] NotIdentical

--- Original
+++ New
@@ @@
         }
-        if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') && null === $this->jweBuilder) {
             $isJwt = true;
             $keyEncryptionAlgorithm = $client->get('userinfo_encrypted_response_alg');
             $contentEncryptionAlgorithm = $client->get('userinfo_encrypted_response_enc');
             $idTokenBuilder = $idTokenBuilder->withEncryption($this->jweBuilder, $keyEncryptionAlgorithm, $contentEncryptionAlgorithm);
         }
         $idTokenBuilder = $idTokenBuilder->withAccessToken($accessToken);

1499) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:151    [M] LogicalAnd

--- Original
+++ New
@@ @@
         }
-        if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
+        if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') || null !== $this->jweBuilder) {
             $isJwt = true;
             $keyEncryptionAlgorithm = $client->get('userinfo_encrypted_response_alg');
             $contentEncryptionAlgorithm = $client->get('userinfo_encrypted_response_enc');
             $idTokenBuilder = $idTokenBuilder->withEncryption($this->jweBuilder, $keyEncryptionAlgorithm, $contentEncryptionAlgorithm);
         }
         $idTokenBuilder = $idTokenBuilder->withAccessToken($accessToken);

1500) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:152    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($client->has('userinfo_encrypted_response_alg') && $client->has('userinfo_encrypted_response_enc') && null !== $this->jweBuilder) {
-            $isJwt = true;
+            $isJwt = false;
             $keyEncryptionAlgorithm = $client->get('userinfo_encrypted_response_alg');
             $contentEncryptionAlgorithm = $client->get('userinfo_encrypted_response_enc');
             $idTokenBuilder = $idTokenBuilder->withEncryption($this->jweBuilder, $keyEncryptionAlgorithm, $contentEncryptionAlgorithm);
         }
         $idTokenBuilder = $idTokenBuilder->withAccessToken($accessToken);
         $idTokenBuilder = $idTokenBuilder->withRequestedClaims($requestedClaims);

1501) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:171    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$accessToken->hasMetadata('requested_claims')) {
+        if ($accessToken->hasMetadata('requested_claims')) {
             return [];
         }
         $requested_claims = $accessToken->getMetadata('requested_claims');
         if (true === array_key_exists('userinfo', $requested_claims)) {
             return $requested_claims['userinfo'];
         }

1502) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:176    [M] TrueValue

--- Original
+++ New
@@ @@
         $requested_claims = $accessToken->getMetadata('requested_claims');
-        if (true === array_key_exists('userinfo', $requested_claims)) {
+        if (false === array_key_exists('userinfo', $requested_claims)) {
             return $requested_claims['userinfo'];
         }
         return [];
     }
     /**
      * @param AccessToken $accessToken

1503) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:176    [M] Identical

--- Original
+++ New
@@ @@
         $requested_claims = $accessToken->getMetadata('requested_claims');
-        if (true === array_key_exists('userinfo', $requested_claims)) {
+        if (true !== array_key_exists('userinfo', $requested_claims)) {
             return $requested_claims['userinfo'];
         }
         return [];
     }
     /**
      * @param AccessToken $accessToken

1504) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:193    [M] Identical

--- Original
+++ New
@@ @@
         $clientId = $accessToken->getClientId();
-        if (null === $clientId || null === ($client = $this->clientRepository->find($clientId))) {
+        if (null !== $clientId || null === ($client = $this->clientRepository->find($clientId))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unable to find the client.');
         }
         return $client;
     }
     /**
      * @param AccessToken $accessToken

1505) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:193    [M] Identical

--- Original
+++ New
@@ @@
         $clientId = $accessToken->getClientId();
-        if (null === $clientId || null === ($client = $this->clientRepository->find($clientId))) {
+        if (null === $clientId || null !== ($client = $this->clientRepository->find($clientId))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unable to find the client.');
         }
         return $client;
     }
     /**
      * @param AccessToken $accessToken

1506) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:193    [M] LogicalOr

--- Original
+++ New
@@ @@
         $clientId = $accessToken->getClientId();
-        if (null === $clientId || null === ($client = $this->clientRepository->find($clientId))) {
+        if (null === $clientId && null === ($client = $this->clientRepository->find($clientId))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unable to find the client.');
         }
         return $client;
     }
     /**
      * @param AccessToken $accessToken

1507) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:210    [M] LogicalNot

--- Original
+++ New
@@ @@
         $userAccountId = $accessToken->getResourceOwnerId();
-        if (!$userAccountId instanceof UserAccountId || null === ($userAccount = $this->userAccountRepository->find($userAccountId))) {
+        if ($userAccountId instanceof UserAccountId || null === ($userAccount = $this->userAccountRepository->find($userAccountId))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unable to find the resource owner.');
         }
         return $userAccount;
     }
     /**
      * @param AccessToken $accessToken

1508) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:210    [M] Identical

--- Original
+++ New
@@ @@
         $userAccountId = $accessToken->getResourceOwnerId();
-        if (!$userAccountId instanceof UserAccountId || null === ($userAccount = $this->userAccountRepository->find($userAccountId))) {
+        if (!$userAccountId instanceof UserAccountId || null !== ($userAccount = $this->userAccountRepository->find($userAccountId))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unable to find the resource owner.');
         }
         return $userAccount;
     }
     /**
      * @param AccessToken $accessToken

1509) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:210    [M] LogicalOr

--- Original
+++ New
@@ @@
         $userAccountId = $accessToken->getResourceOwnerId();
-        if (!$userAccountId instanceof UserAccountId || null === ($userAccount = $this->userAccountRepository->find($userAccountId))) {
+        if (!$userAccountId instanceof UserAccountId && null === ($userAccount = $this->userAccountRepository->find($userAccountId))) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unable to find the resource owner.');
         }
         return $userAccount;
     }
     /**
      * @param AccessToken $accessToken

1510) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:224    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$accessToken->hasMetadata('redirect_uri')) {
+        if ($accessToken->hasMetadata('redirect_uri')) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'The access token has not been issued through the authorization endpoint and cannot be used.');
         }
     }
     /**
      * @param AccessToken $accessToken
      *

1511) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/OpenIdConnect/UserInfoEndpoint/UserInfoEndpoint.php:236    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$accessToken->hasScope('openid')) {
+        if ($accessToken->hasScope('openid')) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_TOKEN, 'The access token does not contain the "openid" scope.');
         }
     }
 }


1512) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/AccessTokenAddedToRefreshTokenEvent.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/refresh-token/access-token-added/1.0/schema';
     }
     /**
      * @param RefreshTokenId $refreshTokenId
      * @param AccessTokenId  $accessTokenId

1513) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/AccessTokenAddedToRefreshTokenEvent.php:96    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['access_token_id' => $this->accessTokenId->getValue()];
     }
     /**
      * {@inheritdoc}
      */

1514) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:98    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/refresh-token/created/1.0/schema';
     }
     /**
      * @param RefreshTokenId        $refreshTokenId
      * @param ResourceOwnerId       $resourceOwnerId

1515) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:187    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getDomainId() : Id
+    protected function getDomainId() : Id
     {
         return $this->getRefreshTokenId();
     }
     /**
      * {@inheritdoc}
      */

1516) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenCreatedEvent.php:195    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
         return (object) ['resource_owner_id' => $this->resourceOwnerId->jsonSerialize(), 'resource_owner_class' => get_class($this->resourceOwnerId), 'client_id' => $this->clientId->jsonSerialize(), 'parameters' => (object) $this->parameters->all(), 'expires_at' => $this->expiresAt->getTimestamp(), 'scopes' => $this->scopes, 'metadatas' => (object) $this->metadatas->all(), 'resource_server_id' => $this->resourceServerId ? $this->resourceServerId->getValue() : null];
     }
     /**
      * {@inheritdoc}
      */

1517) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenRevokedEvent.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public static function getSchema() : string
+    protected static function getSchema() : string
     {
         return 'https://oauth2-framework.spomky-labs.com/schemas/events/refresh-token/revoked/1.0/schema';
     }
     /**
      * @param RefreshTokenId $refreshTokenId
      *

1518) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/Event/RefreshTokenRevokedEvent.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getPayload()
+    protected function getPayload()
     {
     }
     /**
      * {@inheritdoc}
      */
     public static function createFromJson(\stdClass $json) : DomainObject

1519) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:133    [M] LogicalNot

--- Original
+++ New
@@ @@
         $data = $data->with('expires_in', $this->getExpiresIn());
-        if (!empty($this->getScopes())) {
+        if (empty($this->getScopes())) {
             $data = $data->with('scope', implode(' ', $this->getScopes()));
         }
         if (!empty($this->getTokenId())) {
             $data = $data->with('refresh_token', $this->getTokenId());
         }
         return $data->all();

1520) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:136    [M] LogicalNot

--- Original
+++ New
@@ @@
         }
-        if (!empty($this->getTokenId())) {
+        if (empty($this->getTokenId())) {
             $data = $data->with('refresh_token', $this->getTokenId());
         }
         return $data->all();
     }
     /**
      * {@inheritdoc}

1521) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/RefreshTokenGrant/RefreshToken.php:128    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getResponseData() : array
+    protected function getResponseData() : array
     {
         $data = $this->getParameters();
         $data = $data->with('access_token', $this->getTokenId()->getValue());
         $data = $data->with('expires_in', $this->getExpiresIn());
         if (!empty($this->getScopes())) {
             $data = $data->with('scope', implode(' ', $this->getScopes()));

1522) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:78    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
-    public function __construct(JwsCompactSerializer $jwsSerializer, JWSVerifier $jwsVerifier, ClaimCheckerManager $claimCheckerManager, int $secretLifetime = 0)
+    public function __construct(JwsCompactSerializer $jwsSerializer, JWSVerifier $jwsVerifier, ClaimCheckerManager $claimCheckerManager, int $secretLifetime = 1)
     {
         if ($secretLifetime < 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->jwsSerializer = $jwsSerializer;
         $this->jwsVerifier = $jwsVerifier;

1523) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:80    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime < 1) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->jwsSerializer = $jwsSerializer;
         $this->jwsVerifier = $jwsVerifier;
         $this->claimCheckerManager = $claimCheckerManager;
         $this->secretLifetime = $secretLifetime;

1524) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:80    [M] LessThan

--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime <= 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->jwsSerializer = $jwsSerializer;
         $this->jwsVerifier = $jwsVerifier;
         $this->claimCheckerManager = $claimCheckerManager;
         $this->secretLifetime = $secretLifetime;

1525) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:80    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     {
-        if ($secretLifetime < 0) {
+        if ($secretLifetime >= 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->jwsSerializer = $jwsSerializer;
         $this->jwsVerifier = $jwsVerifier;
         $this->claimCheckerManager = $claimCheckerManager;
         $this->secretLifetime = $secretLifetime;

1526) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:95    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function enableEncryptedAssertions(JweCompactSerializer $jweSerializer, JWEDecrypter $jweDecrypter, JWKSet $keyEncryptionKeySet, bool $encryptionRequired)
+    protected function enableEncryptedAssertions(JweCompactSerializer $jweSerializer, JWEDecrypter $jweDecrypter, JWKSet $keyEncryptionKeySet, bool $encryptionRequired)
     {
         $this->jweSerializer = $jweSerializer;
         $this->jweDecrypter = $jweDecrypter;
         $this->encryptionRequired = $encryptionRequired;
         $this->keyEncryptionKeySet = $keyEncryptionKeySet;
     }

1527) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:106    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedSignatureAlgorithms() : array
+    protected function getSupportedSignatureAlgorithms() : array
     {
         return $this->jwsVerifier->getSignatureAlgorithmManager()->list();
     }
     /**
      * @return string[]
      */

1528) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:116    [M] Identical

--- Original
+++ New
@@ @@
     {
-        return null === $this->jweDecrypter ? [] : $this->jweDecrypter->getContentEncryptionAlgorithmManager()->list();
+        return null !== $this->jweDecrypter ? [] : $this->jweDecrypter->getContentEncryptionAlgorithmManager()->list();
     }
     /**
      * @return string[]
      */
     public function getSupportedKeyEncryptionAlgorithms() : array
     {

1529) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:114    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedContentEncryptionAlgorithms() : array
+    protected function getSupportedContentEncryptionAlgorithms() : array
     {
         return null === $this->jweDecrypter ? [] : $this->jweDecrypter->getContentEncryptionAlgorithmManager()->list();
     }
     /**
      * @return string[]
      */

1530) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:124    [M] Identical

--- Original
+++ New
@@ @@
     {
-        return null === $this->jweDecrypter ? [] : $this->jweDecrypter->getKeyEncryptionAlgorithmManager()->list();
+        return null !== $this->jweDecrypter ? [] : $this->jweDecrypter->getKeyEncryptionAlgorithmManager()->list();
     }
     /**
      * {@inheritdoc}
      */
     public function getSchemesParameters() : array
     {

1531) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:122    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedKeyEncryptionAlgorithms() : array
+    protected function getSupportedKeyEncryptionAlgorithms() : array
     {
         return null === $this->jweDecrypter ? [] : $this->jweDecrypter->getKeyEncryptionAlgorithmManager()->list();
     }
     /**
      * {@inheritdoc}
      */

1532) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:130    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSchemesParameters() : array
+    protected function getSchemesParameters() : array
     {
         return [];
     }
     /**
      * {@inheritdoc}
      */

1533) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:141    [M] LogicalNot

--- Original
+++ New
@@ @@
         $parameters = $request->getParsedBody() ?? [];
-        if (!array_key_exists('client_assertion_type', $parameters)) {
+        if (array_key_exists('client_assertion_type', $parameters)) {
             return null;
         }
         $clientAssertionType = $parameters['client_assertion_type'];
         //We verify the client assertion type in the request
         if ('urn:ietf:params:oauth:client-assertion-type:jwt-bearer' !== $clientAssertionType) {
             return null;

1534) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:147    [M] NotIdentical

--- Original
+++ New
@@ @@
         //We verify the client assertion type in the request
-        if ('urn:ietf:params:oauth:client-assertion-type:jwt-bearer' !== $clientAssertionType) {
+        if ('urn:ietf:params:oauth:client-assertion-type:jwt-bearer' === $clientAssertionType) {
             return null;
         }
         try {
             if (!array_key_exists('client_assertion', $parameters)) {
                 throw new \InvalidArgumentException('Parameter "client_assertion" is missing.');
             }

1535) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:152    [M] LogicalNot

--- Original
+++ New
@@ @@
         try {
-            if (!array_key_exists('client_assertion', $parameters)) {
+            if (array_key_exists('client_assertion', $parameters)) {
                 throw new \InvalidArgumentException('Parameter "client_assertion" is missing.');
             }
             $client_assertion = $parameters['client_assertion'];
             $client_assertion = $this->tryToDecryptClientAssertion($client_assertion);
             $jws = $this->jwsSerializer->unserialize($client_assertion);
             if (1 !== $jws->countSignatures()) {

1536) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:158    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $jws = $this->jwsSerializer->unserialize($client_assertion);
-            if (1 !== $jws->countSignatures()) {
+            if (0 !== $jws->countSignatures()) {
                 throw new \InvalidArgumentException('The assertion must have only one signature.');
             }
             $claims = json_decode($jws->getPayload(), true);
             $claims = $this->claimCheckerManager->check($claims);
             $diff = array_diff(['iss', 'sub', 'aud', 'jti', 'exp'], array_keys($claims));
             if (!empty($diff)) {

1537) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:158    [M] NotIdentical

--- Original
+++ New
@@ @@
             $jws = $this->jwsSerializer->unserialize($client_assertion);
-            if (1 !== $jws->countSignatures()) {
+            if (1 === $jws->countSignatures()) {
                 throw new \InvalidArgumentException('The assertion must have only one signature.');
             }
             $claims = json_decode($jws->getPayload(), true);
             $claims = $this->claimCheckerManager->check($claims);
             $diff = array_diff(['iss', 'sub', 'aud', 'jti', 'exp'], array_keys($claims));
             if (!empty($diff)) {

1538) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:161    [M] TrueValue

--- Original
+++ New
@@ @@
             }
-            $claims = json_decode($jws->getPayload(), true);
+            $claims = json_decode($jws->getPayload(), false);
             $claims = $this->claimCheckerManager->check($claims);
             $diff = array_diff(['iss', 'sub', 'aud', 'jti', 'exp'], array_keys($claims));
             if (!empty($diff)) {
                 throw new \InvalidArgumentException(sprintf('The following claim(s) is/are mandatory: "%s".', implode(', ', array_values($diff))));
             }
             if ($claims['sub'] !== $claims['iss']) {

1539) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:165    [M] LogicalNot

--- Original
+++ New
@@ @@
             $diff = array_diff(['iss', 'sub', 'aud', 'jti', 'exp'], array_keys($claims));
-            if (!empty($diff)) {
+            if (empty($diff)) {
                 throw new \InvalidArgumentException(sprintf('The following claim(s) is/are mandatory: "%s".', implode(', ', array_values($diff))));
             }
             if ($claims['sub'] !== $claims['iss']) {
                 throw new \InvalidArgumentException('The claims "sub" and "iss" must contain the client public ID.');
             }
         } catch (\Exception $e) {

1540) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:168    [M] NotIdentical

--- Original
+++ New
@@ @@
             }
-            if ($claims['sub'] !== $claims['iss']) {
+            if ($claims['sub'] === $claims['iss']) {
                 throw new \InvalidArgumentException('The claims "sub" and "iss" must contain the client public ID.');
             }
         } catch (\Exception $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage());
         }
         $clientCredentials = $jws;

1541) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:138    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function findClientId(ServerRequestInterface $request, &$clientCredentials = null) : ?ClientId
+    protected function findClientId(ServerRequestInterface $request, &$clientCredentials = null) : ?ClientId
     {
         $parameters = $request->getParsedBody() ?? [];
         if (!array_key_exists('client_assertion_type', $parameters)) {
             return null;
         }
         $clientAssertionType = $parameters['client_assertion_type'];

1542) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:189    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (null === $this->jweDecrypter) {
+        if (null !== $this->jweDecrypter) {
             return $assertion;
         }
         try {
             $jwe = $this->jweSerializer->unserialize($assertion);
             if (1 !== $jwe->countRecipients()) {
                 throw new \InvalidArgumentException('The client assertion must have only one recipient.');

1543) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:195    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $jwe = $this->jweSerializer->unserialize($assertion);
-            if (1 !== $jwe->countRecipients()) {
+            if (0 !== $jwe->countRecipients()) {
                 throw new \InvalidArgumentException('The client assertion must have only one recipient.');
             }
             if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the client assertion.');

1544) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:195    [M] NotIdentical

--- Original
+++ New
@@ @@
             $jwe = $this->jweSerializer->unserialize($assertion);
-            if (1 !== $jwe->countRecipients()) {
+            if (1 === $jwe->countRecipients()) {
                 throw new \InvalidArgumentException('The client assertion must have only one recipient.');
             }
             if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the client assertion.');

1545) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:198    [M] TrueValue

--- Original
+++ New
@@ @@
             }
-            if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
+            if (false === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the client assertion.');
         } catch (\Exception $e) {
             if (true === $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);

1546) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:198    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             }
-            if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
+            if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 1)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the client assertion.');
         } catch (\Exception $e) {
             if (true === $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);

1547) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:198    [M] Identical

--- Original
+++ New
@@ @@
             }
-            if (true === $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
+            if (true !== $this->jweDecrypter->decryptUsingKeySet($jwe, $this->keyEncryptionKeySet, 0)) {
                 return $jwe->getPayload();
             }
             throw new \InvalidArgumentException('Unable to decrypt the client assertion.');
         } catch (\Exception $e) {
             if (true === $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);

1548) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:204    [M] TrueValue

--- Original
+++ New
@@ @@
         } catch (\Exception $e) {
-            if (true === $this->encryptionRequired) {
+            if (false === $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);
             }
             return $assertion;
         }
     }
     /**

1549) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:204    [M] Identical

--- Original
+++ New
@@ @@
         } catch (\Exception $e) {
-            if (true === $this->encryptionRequired) {
+            if (true !== $this->encryptionRequired) {
                 throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, $e->getMessage(), [], $e);
             }
             return $assertion;
         }
     }
     /**

1550) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:223    [M] FalseValue

--- Original
+++ New
@@ @@
         } catch (\Exception $e) {
-            return false;
+            return true;
         }
         return true;
     }
     /**
      * {@inheritdoc}
      */

1551) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:226    [M] TrueValue

--- Original
+++ New
@@ @@
         }
-        return true;
+        return false;
     }
     /**
      * {@inheritdoc}
      */
     public function getSupportedAuthenticationMethods() : array
     {

1552) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:215    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool
+    protected function isClientAuthenticated(Client $client, $clientCredentials, ServerRequestInterface $request) : bool
     {
         try {
             //Get the JWKSet depending on the client configuration and parameters
             $jwkSet = $client->getPublicKeySet();
             Assertion::isInstanceOf($jwkSet, JWKSet::class);
             $this->jwsVerifier->verifyWithKeySet($clientCredentials, $jwkSet);

1553) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:232    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getSupportedAuthenticationMethods() : array
+    protected function getSupportedAuthenticationMethods() : array
     {
         return ['client_secret_jwt', 'private_key_jwt'];
     }
     /**
      * {@inheritdoc}
      */

1554) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:242    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if ('client_secret_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
+        if ('client_secret_jwt' !== $commandParameters->get('token_endpoint_auth_method')) {
             $validatedParameters = $validatedParameters->with('client_secret', $this->createClientSecret());
             $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         } elseif ('private_key_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
             if (!($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri'))) {
                 throw new \InvalidArgumentException('The parameter "jwks" or "jwks_uri" must be set.');
             }

1555) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:244    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $validatedParameters = $validatedParameters->with('client_secret', $this->createClientSecret());
-            $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+            $validatedParameters = $validatedParameters->with('client_secret_expires_at', 1 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         } elseif ('private_key_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
             if (!($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri'))) {
                 throw new \InvalidArgumentException('The parameter "jwks" or "jwks_uri" must be set.');
             }
             if ($commandParameters->has('jwks')) {
                 $jwks = JWKSet::createFromKeyData($commandParameters->get('jwks'));

1556) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:244    [M] Identical

--- Original
+++ New
@@ @@
             $validatedParameters = $validatedParameters->with('client_secret', $this->createClientSecret());
-            $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+            $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 !== $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         } elseif ('private_key_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
             if (!($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri'))) {
                 throw new \InvalidArgumentException('The parameter "jwks" or "jwks_uri" must be set.');
             }
             if ($commandParameters->has('jwks')) {
                 $jwks = JWKSet::createFromKeyData($commandParameters->get('jwks'));

1557) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:244    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $validatedParameters = $validatedParameters->with('client_secret', $this->createClientSecret());
-            $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+            $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 1 : time() + $this->secretLifetime);
         } elseif ('private_key_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
             if (!($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri'))) {
                 throw new \InvalidArgumentException('The parameter "jwks" or "jwks_uri" must be set.');
             }
             if ($commandParameters->has('jwks')) {
                 $jwks = JWKSet::createFromKeyData($commandParameters->get('jwks'));

1558) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:244    [M] Plus

--- Original
+++ New
@@ @@
             $validatedParameters = $validatedParameters->with('client_secret', $this->createClientSecret());
-            $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
+            $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() - $this->secretLifetime);
         } elseif ('private_key_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
             if (!($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri'))) {
                 throw new \InvalidArgumentException('The parameter "jwks" or "jwks_uri" must be set.');
             }
             if ($commandParameters->has('jwks')) {
                 $jwks = JWKSet::createFromKeyData($commandParameters->get('jwks'));

1559) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:245    [M] Identical

--- Original
+++ New
@@ @@
             $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
-        } elseif ('private_key_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
+        } elseif ('private_key_jwt' !== $commandParameters->get('token_endpoint_auth_method')) {
             if (!($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri'))) {
                 throw new \InvalidArgumentException('The parameter "jwks" or "jwks_uri" must be set.');
             }
             if ($commandParameters->has('jwks')) {
                 $jwks = JWKSet::createFromKeyData($commandParameters->get('jwks'));
                 if (!$jwks instanceof JWKSet) {

1560) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:246    [M] LogicalNot

--- Original
+++ New
@@ @@
         } elseif ('private_key_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
-            if (!($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri'))) {
+            if ($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri')) {
                 throw new \InvalidArgumentException('The parameter "jwks" or "jwks_uri" must be set.');
             }
             if ($commandParameters->has('jwks')) {
                 $jwks = JWKSet::createFromKeyData($commandParameters->get('jwks'));
                 if (!$jwks instanceof JWKSet) {
                     throw new \InvalidArgumentException('The parameter "jwks" must be a valid JWKSet object.');

1561) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:251    [M] LogicalNot

--- Original
+++ New
@@ @@
                 $jwks = JWKSet::createFromKeyData($commandParameters->get('jwks'));
-                if (!$jwks instanceof JWKSet) {
+                if ($jwks instanceof JWKSet) {
                     throw new \InvalidArgumentException('The parameter "jwks" must be a valid JWKSet object.');
                 }
                 $validatedParameters = $validatedParameters->with('jwks', $commandParameters->get('jwks'));
             }
             /* else { FIXME
                    $jwks = JWKFactory::createFromJKU($commandParameters->get('jwks_uri'));

1562) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientAssertionJwt.php:240    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function checkClientConfiguration(DataBag $commandParameters, DataBag $validatedParameters) : DataBag
+    protected function checkClientConfiguration(DataBag $commandParameters, DataBag $validatedParameters) : DataBag
     {
         if ('client_secret_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
             $validatedParameters = $validatedParameters->with('client_secret', $this->createClientSecret());
             $validatedParameters = $validatedParameters->with('client_secret_expires_at', 0 === $this->secretLifetime ? 0 : time() + $this->secretLifetime);
         } elseif ('private_key_jwt' === $commandParameters->get('token_endpoint_auth_method')) {
             if (!($commandParameters->has('jwks') xor $commandParameters->has('jwks_uri'))) {

1563) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretBasic.php:39    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
-    public function __construct(string $realm, int $secretLifetime = 0)
+    public function __construct(string $realm, int $secretLifetime = 1)
     {
         if ($secretLifetime < 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->realm = $realm;
         $this->secretLifetime = $secretLifetime;

1564) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/ClientSecretPost.php:33    [M] OneZeroInteger

--- Original
+++ New
@@ @@
      */
-    public function __construct(int $secretLifetime = 0)
+    public function __construct(int $secretLifetime = 1)
     {
         if ($secretLifetime < 0) {
             throw new \InvalidArgumentException('The secret lifetime must be at least 0 (= unlimited).');
         }
         $this->secretLifetime = $secretLifetime;
     }

1565) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:41    [M] Foreach_

--- Original
+++ New
@@ @@
         $this->tokenEndpointAuthenticationMethods[] = $tokenEndpointAuthenticationMethod;
-        foreach ($tokenEndpointAuthenticationMethod->getSupportedAuthenticationMethods() as $method_name) {
+        foreach (array() as $method_name) {
             $this->tokenEndpointAuthenticationMethodNames[$method_name] = $tokenEndpointAuthenticationMethod;
         }
         return $this;
     }
     /**
      * @return string[]

1566) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(TokenEndpointAuthenticationMethod $tokenEndpointAuthenticationMethod) : self
+    protected function add(TokenEndpointAuthenticationMethod $tokenEndpointAuthenticationMethod) : self
     {
         $this->tokenEndpointAuthenticationMethods[] = $tokenEndpointAuthenticationMethod;
         foreach ($tokenEndpointAuthenticationMethod->getSupportedAuthenticationMethods() as $method_name) {
             $this->tokenEndpointAuthenticationMethodNames[$method_name] = $tokenEndpointAuthenticationMethod;
         }
         return $this;

1567) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function all() : array
+    protected function all() : array
     {
         return array_keys($this->tokenEndpointAuthenticationMethodNames);
     }
     /**
      * @param string $tokenEndpointAuthenticationMethod
      *

1568) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:61    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function has(string $tokenEndpointAuthenticationMethod) : bool
+    protected function has(string $tokenEndpointAuthenticationMethod) : bool
     {
         return array_key_exists($tokenEndpointAuthenticationMethod, $this->tokenEndpointAuthenticationMethodNames);
     }
     /**
      * @param string $tokenEndpointAuthenticationMethod
      *

1569) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:73    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function get(string $tokenEndpointAuthenticationMethod) : TokenEndpointAuthenticationMethod
+    protected function get(string $tokenEndpointAuthenticationMethod) : TokenEndpointAuthenticationMethod
     {
         Assertion::true($this->has($tokenEndpointAuthenticationMethod), sprintf('The token endpoint authentication method "%s" is not supported. Please use one of the following values: %s', $tokenEndpointAuthenticationMethod, implode(', ', $this->all())));
         return $this->tokenEndpointAuthenticationMethodNames[$tokenEndpointAuthenticationMethod];
     }
     /**
      * @return TokenEndpointAuthenticationMethod[]

1570) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:83    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getTokenEndpointAuthenticationMethods() : array
+    protected function getTokenEndpointAuthenticationMethods() : array
     {
         return array_values($this->tokenEndpointAuthenticationMethods);
     }
     /**
      * @param ServerRequestInterface            $request
      * @param TokenEndpointAuthenticationMethod $authenticationMethod

1571) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:103    [M] NotIdentical

--- Original
+++ New
@@ @@
             $temp = $method->findClientId($request, $clientCredentials);
-            if (null !== $temp) {
+            if (null === $temp) {
                 if (null !== $clientId) {
                     if (!$method instanceof None && !$authenticationMethod instanceof None) {
                         $authenticationMethod = null;
                         throw new OAuth2Exception(400, ['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => 'Only one authentication method may be used to authenticate the client.']);
                     } else {
                         if (!$method instanceof None) {

1572) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:104    [M] NotIdentical

--- Original
+++ New
@@ @@
             if (null !== $temp) {
-                if (null !== $clientId) {
+                if (null === $clientId) {
                     if (!$method instanceof None && !$authenticationMethod instanceof None) {
                         $authenticationMethod = null;
                         throw new OAuth2Exception(400, ['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => 'Only one authentication method may be used to authenticate the client.']);
                     } else {
                         if (!$method instanceof None) {
                             $authenticationMethod = $method;

1573) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:105    [M] LogicalNot

--- Original
+++ New
@@ @@
                 if (null !== $clientId) {
-                    if (!$method instanceof None && !$authenticationMethod instanceof None) {
+                    if ($method instanceof None && !$authenticationMethod instanceof None) {
                         $authenticationMethod = null;
                         throw new OAuth2Exception(400, ['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => 'Only one authentication method may be used to authenticate the client.']);
                     } else {
                         if (!$method instanceof None) {
                             $authenticationMethod = $method;
                         }

1574) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:105    [M] LogicalNot

--- Original
+++ New
@@ @@
                 if (null !== $clientId) {
-                    if (!$method instanceof None && !$authenticationMethod instanceof None) {
+                    if (!$method instanceof None && $authenticationMethod instanceof None) {
                         $authenticationMethod = null;
                         throw new OAuth2Exception(400, ['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => 'Only one authentication method may be used to authenticate the client.']);
                     } else {
                         if (!$method instanceof None) {
                             $authenticationMethod = $method;
                         }

1575) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:105    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 if (null !== $clientId) {
-                    if (!$method instanceof None && !$authenticationMethod instanceof None) {
+                    if (!$method instanceof None || !$authenticationMethod instanceof None) {
                         $authenticationMethod = null;
                         throw new OAuth2Exception(400, ['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => 'Only one authentication method may be used to authenticate the client.']);
                     } else {
                         if (!$method instanceof None) {
                             $authenticationMethod = $method;
                         }

1576) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:111    [M] LogicalNot

--- Original
+++ New
@@ @@
                     } else {
-                        if (!$method instanceof None) {
+                        if ($method instanceof None) {
                             $authenticationMethod = $method;
                         }
                     }
                 } else {
                     $clientId = $temp;
                     $authenticationMethod = $method;

1577) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:101    [M] Foreach_

--- Original
+++ New
@@ @@
         $clientCredentials = null;
-        foreach ($this->getTokenEndpointAuthenticationMethods() as $method) {
+        foreach (array() as $method) {
             $temp = $method->findClientId($request, $clientCredentials);
             if (null !== $temp) {
                 if (null !== $clientId) {
                     if (!$method instanceof None && !$authenticationMethod instanceof None) {
                         $authenticationMethod = null;
                         throw new OAuth2Exception(400, ['error' => OAuth2Exception::ERROR_INVALID_REQUEST, 'error_description' => 'Only one authentication method may be used to authenticate the client.']);

1578) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:97    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function findClientInformationInTheRequest(ServerRequestInterface $request, TokenEndpointAuthenticationMethod &$authenticationMethod = null, &$clientCredentials = null)
+    protected function findClientInformationInTheRequest(ServerRequestInterface $request, TokenEndpointAuthenticationMethod &$authenticationMethod = null, &$clientCredentials = null)
     {
         $clientId = null;
         $clientCredentials = null;
         foreach ($this->getTokenEndpointAuthenticationMethods() as $method) {
             $temp = $method->findClientId($request, $clientCredentials);
             if (null !== $temp) {

1579) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:135    [M] TrueValue

--- Original
+++ New
@@ @@
     {
-        if (true === $client->isDeleted()) {
+        if (false === $client->isDeleted()) {
             return false;
         }
         if (in_array($client->get('token_endpoint_auth_method'), $authenticationMethod->getSupportedAuthenticationMethods())) {
             if (false === $client->areClientCredentialsExpired()) {
                 return $authenticationMethod->isClientAuthenticated($client, $clientCredentials, $request);
             }

1580) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:135    [M] Identical

--- Original
+++ New
@@ @@
     {
-        if (true === $client->isDeleted()) {
+        if (true !== $client->isDeleted()) {
             return false;
         }
         if (in_array($client->get('token_endpoint_auth_method'), $authenticationMethod->getSupportedAuthenticationMethods())) {
             if (false === $client->areClientCredentialsExpired()) {
                 return $authenticationMethod->isClientAuthenticated($client, $clientCredentials, $request);
             }

1581) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:136    [M] FalseValue

--- Original
+++ New
@@ @@
         if (true === $client->isDeleted()) {
-            return false;
+            return true;
         }
         if (in_array($client->get('token_endpoint_auth_method'), $authenticationMethod->getSupportedAuthenticationMethods())) {
             if (false === $client->areClientCredentialsExpired()) {
                 return $authenticationMethod->isClientAuthenticated($client, $clientCredentials, $request);
             }
         }

1582) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:139    [M] FalseValue

--- Original
+++ New
@@ @@
         if (in_array($client->get('token_endpoint_auth_method'), $authenticationMethod->getSupportedAuthenticationMethods())) {
-            if (false === $client->areClientCredentialsExpired()) {
+            if (true === $client->areClientCredentialsExpired()) {
                 return $authenticationMethod->isClientAuthenticated($client, $clientCredentials, $request);
             }
         }
         return false;
     }
 }

1583) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:139    [M] Identical

--- Original
+++ New
@@ @@
         if (in_array($client->get('token_endpoint_auth_method'), $authenticationMethod->getSupportedAuthenticationMethods())) {
-            if (false === $client->areClientCredentialsExpired()) {
+            if (false !== $client->areClientCredentialsExpired()) {
                 return $authenticationMethod->isClientAuthenticated($client, $clientCredentials, $request);
             }
         }
         return false;
     }
 }

1584) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:144    [M] FalseValue

--- Original
+++ New
@@ @@
         }
-        return false;
+        return true;
     }
 }


1585) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/AuthenticationMethod/TokenEndpointAuthenticationMethodManager.php:133    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function isClientAuthenticated(ServerRequestInterface $request, Client $client, TokenEndpointAuthenticationMethod $authenticationMethod, $clientCredentials) : bool
+    protected function isClientAuthenticated(ServerRequestInterface $request, Client $client, TokenEndpointAuthenticationMethod $authenticationMethod, $clientCredentials) : bool
     {
         if (true === $client->isDeleted()) {
             return false;
         }
         if (in_array($client->get('token_endpoint_auth_method'), $authenticationMethod->getSupportedAuthenticationMethods())) {
             if (false === $client->areClientCredentialsExpired()) {

1586) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:91    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getMetadatas() : DataBag
+    protected function getMetadatas() : DataBag
     {
         return $this->metadatas;
     }
     /**
      * @param string $key
      *

1587) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:103    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->hasMetadata($key)) {
+        if ($this->hasMetadata($key)) {
             throw new \InvalidArgumentException(sprintf('The metadata with key "%s" does not exist.', $key));
         }
         return $this->metadatas->get($key);
     }
     /**
      * @param string $key

1588) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:101    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getMetadata(string $key)
+    protected function getMetadata(string $key)
     {
         if (!$this->hasMetadata($key)) {
             throw new \InvalidArgumentException(sprintf('The metadata with key "%s" does not exist.', $key));
         }
         return $this->metadatas->get($key);
     }

1589) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:137    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getParameters() : DataBag
+    protected function getParameters() : DataBag
     {
         return $this->parameters;
     }
     /**
      * @param string $key
      *

1590) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:149    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->hasParameter($key)) {
+        if ($this->hasParameter($key)) {
             throw new \InvalidArgumentException(sprintf('The parameter with key "%s" does not exist.', $key));
         }
         return $this->parameters->get($key);
     }
     /**
      * @param string $key

1591) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:147    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getParameter(string $key)
+    protected function getParameter(string $key)
     {
         if (!$this->hasParameter($key)) {
             throw new \InvalidArgumentException(sprintf('The parameter with key "%s" does not exist.', $key));
         }
         return $this->parameters->get($key);
     }

1592) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:161    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasParameter(string $key) : bool
+    protected function hasParameter(string $key) : bool
     {
         return $this->parameters->has($key);
     }
     /**
      * @param Client $client
      *

1593) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:213    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withScopes(array $scopes) : self
+    protected function withScopes(array $scopes) : self
     {
         $clone = clone $this;
         $clone->scopes = $scopes;
         return $clone;
     }
     /**

1594) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:226    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withScope(string $scope) : self
+    protected function withScope(string $scope) : self
     {
         if ($this->hasScope($scope)) {
             return $this;
         }
         $clone = clone $this;
         $clone->scopes[] = $scope;

1595) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:244    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$this->hasScope($scope)) {
+        if ($this->hasScope($scope)) {
             return $this;
         }
         $clone = clone $this;
         $key = array_search($scope, $clone->scopes);
         unset($clone->scopes[$key]);
         return $clone;

1596) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:242    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function withoutScope(string $scope) : self
+    protected function withoutScope(string $scope) : self
     {
         if (!$this->hasScope($scope)) {
             return $this;
         }
         $clone = clone $this;
         $key = array_search($scope, $clone->scopes);

1597) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:259    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function hasScope(string $scope) : bool
+    protected function hasScope(string $scope) : bool
     {
         return in_array($scope, $this->scopes);
     }
     /**
      * @return string[]
      */

1598) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeData.php:267    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function getScopes() : array
+    protected function getScopes() : array
     {
         return $this->scopes;
     }
     /**
      * @return string[]|null
      */

1599) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/GrantTypeManager.php:62    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function list() : array
+    protected function list() : array
     {
         return array_keys($this->grantTypes);
     }
 }


1600) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ProcessorManager.php:38    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
-        if (null !== $scopeRepository) {
+        if (null === $scopeRepository) {
             $this->processors[] = new ScopeProcessor($scopeRepository, $scopePolicyManager);
         }
         $this->processors[] = new TokenTypeProcessor();
     }
     /**
      * @param ServerRequestInterface $request

1601) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ProcessorManager.php:55    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        $grantTypeData = call_user_func($this->callableForNextRule(0), $request, $grantTypeData, $grantType);
+        $grantTypeData = call_user_func($this->callableForNextRule(1), $request, $grantTypeData, $grantType);
         return $grantType->grant($request, $grantTypeData);
     }
     /**
      * @param int $index
      *
      * @return \Closure

1602) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ProcessorManager.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function handle(ServerRequestInterface $request, GrantTypeData $grantTypeData, GrantType $grantType) : GrantTypeData
+    protected function handle(ServerRequestInterface $request, GrantTypeData $grantTypeData, GrantType $grantType) : GrantTypeData
     {
         $grantTypeData = call_user_func($this->callableForNextRule(0), $request, $grantTypeData, $grantType);
         return $grantType->grant($request, $grantTypeData);
     }
     /**
      * @param int $index

1603) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ProcessorManager.php:67    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!isset($this->processors[$index])) {
+        if (isset($this->processors[$index])) {
             return function (ServerRequestInterface $request, GrantTypeData $grantTypeData, GrantType $grantType) : GrantTypeData {
                 return $grantTypeData;
             };
         }
         $processor = $this->processors[$index];
         return function (ServerRequestInterface $request, GrantTypeData $grantTypeData, GrantType $grantType) use($processor, $index) : GrantTypeData {

1604) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ProcessorManager.php:75    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         return function (ServerRequestInterface $request, GrantTypeData $grantTypeData, GrantType $grantType) use($processor, $index) : GrantTypeData {
-            return $processor($request, $grantTypeData, $grantType, $this->callableForNextRule($index + 1));
+            return $processor($request, $grantTypeData, $grantType, $this->callableForNextRule($index + 0));
         };
     }
 }


1605) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ProcessorManager.php:75    [M] Plus

--- Original
+++ New
@@ @@
         return function (ServerRequestInterface $request, GrantTypeData $grantTypeData, GrantType $grantType) use($processor, $index) : GrantTypeData {
-            return $processor($request, $grantTypeData, $grantType, $this->callableForNextRule($index + 1));
+            return $processor($request, $grantTypeData, $grantType, $this->callableForNextRule($index - 1));
         };
     }
 }


1606) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ScopeProcessor.php:62    [M] LogicalNot

--- Original
+++ New
@@ @@
         $params = $request->getParsedBody() ?? [];
-        if (!array_key_exists('scope', $params)) {
+        if (array_key_exists('scope', $params)) {
             $scope = $grantTypeData->getAvailableScopes() ?? [];
         } else {
             $scopeParameter = $params['scope'];
             $scope = $this->scopeRepository->convertToArray($scopeParameter);
         }
         //Modify the scope according to the scope policy

1607) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ScopeProcessor.php:71    [M] NotIdentical

--- Original
+++ New
@@ @@
         try {
-            if (null !== $this->scopePolicyManager) {
+            if (null === $this->scopePolicyManager) {
                 $scope = $this->scopePolicyManager->apply($scope, $grantTypeData->getClient());
             }
         } catch (\InvalidArgumentException $e) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_SCOPE, $e->getMessage());
         }
         $availableScope = is_array($grantTypeData->getAvailableScopes()) ? $grantTypeData->getAvailableScopes() : $this->scopeRepository->getAvailableScopesForClient($grantTypeData->getClient());

1608) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/ScopeProcessor.php:81    [M] LogicalNot

--- Original
+++ New
@@ @@
         //Check if scope requested are within the available scope
-        if (!$this->scopeRepository->areRequestedScopesAvailable($scope, $availableScope)) {
+        if ($this->scopeRepository->areRequestedScopesAvailable($scope, $availableScope)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_SCOPE, sprintf('An unsupported scope was requested. Available scopes are %s.', implode(', ', $availableScope)));
         }
         $grantTypeData = $grantTypeData->withScopes($scope);
         return $grantTypeData;
         //return $next($request, $grantTypeData, $grantType);
     }

1609) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/TokenTypeProcessor.php:40    [M] LogicalNot

--- Original
+++ New
@@ @@
         $tokenType = $request->getAttribute('token_type');
-        if (!$grantTypeData->getClient()->isTokenTypeAllowed($tokenType->name())) {
+        if ($grantTypeData->getClient()->isTokenTypeAllowed($tokenType->name())) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, sprintf('The token type "%s" is not allowed for the client.', $tokenType->name()));
         }
         $info = $tokenType->getInformation();
         foreach ($info as $k => $v) {
             $grantTypeData = $grantTypeData->withParameter($k, $v);
         }

1610) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/Processor/TokenTypeProcessor.php:45    [M] Foreach_

--- Original
+++ New
@@ @@
         $info = $tokenType->getInformation();
-        foreach ($info as $k => $v) {
+        foreach (array() as $k => $v) {
             $grantTypeData = $grantTypeData->withParameter($k, $v);
         }
         return $next($request, $grantTypeData, $grantType);
     }
 }


1611) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:104    [M] Identical

--- Original
+++ New
@@ @@
         $grantTypeData = $grantType->prepareTokenResponse($request, $grantTypeData);
-        if (null === $grantTypeData->getClient() || $grantTypeData->getClient()->isDeleted()) {
+        if (null !== $grantTypeData->getClient() || $grantTypeData->getClient()->isDeleted()) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         // This occurs now because the client may be found during the preparation process
         $this->checkGrantType($grantTypeData->getClient(), $grantType->getGrantType());
         $grantTypeData = $this->processorManager->handle($request, $grantTypeData, $grantType);
         $accessToken = $this->issueAccessToken($grantTypeData);

1612) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:104    [M] LogicalOr

--- Original
+++ New
@@ @@
         $grantTypeData = $grantType->prepareTokenResponse($request, $grantTypeData);
-        if (null === $grantTypeData->getClient() || $grantTypeData->getClient()->isDeleted()) {
+        if (null === $grantTypeData->getClient() && $grantTypeData->getClient()->isDeleted()) {
             throw new OAuth2Exception(401, OAuth2Exception::ERROR_INVALID_CLIENT, 'Client authentication failed.');
         }
         // This occurs now because the client may be found during the preparation process
         $this->checkGrantType($grantTypeData->getClient(), $grantType->getGrantType());
         $grantTypeData = $this->processorManager->handle($request, $grantTypeData, $grantType);
         $accessToken = $this->issueAccessToken($grantTypeData);

1613) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:96    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
+    protected function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface
     {
         $grantTypeData = GrantTypeData::create($request->getAttribute('client'));
         /** @var $grantType GrantType From the dedicated middleware */
         $grantType = $request->getAttribute('grant_type');
         $grantType->checkTokenRequest($request);
         $grantTypeData = $grantType->prepareTokenResponse($request, $grantTypeData);

1614) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:127    [M] BitwiseOr

--- Original
+++ New
@@ @@
         $response = $this->responseFactory->createResponse();
-        $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
+        $response->getBody()->write(json_encode($data, JSON_UNESCAPED_UNICODE & JSON_UNESCAPED_SLASHES));
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
         foreach ($headers as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }

1615) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:129    [M] Foreach_

--- Original
+++ New
@@ @@
         $headers = ['Content-Type' => 'application/json; charset=UTF-8', 'Cache-Control' => 'no-cache, no-store, max-age=0, must-revalidate, private', 'Pragma' => 'no-cache'];
-        foreach ($headers as $k => $v) {
+        foreach (array() as $k => $v) {
             $response = $response->withHeader($k, $v);
         }
         return $response;
     }
     /**
      * @param Client $client

1616) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:144    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!$client->isGrantTypeAllowed($grantType)) {
+        if ($client->isGrantTypeAllowed($grantType)) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_UNAUTHORIZED_CLIENT, sprintf('The grant type "%s" is unauthorized for this client.', $grantType));
         }
     }
     /**
      * @param GrantTypeData $grantTypeData
      *

1617) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:157    [M] NotIdentical

--- Original
+++ New
@@ @@
         $parameters = $grantTypeData->getParameters();
-        if (in_array('offline_access', $grantTypeData->getScopes()) && null !== $this->refreshTokenRepository) {
+        if (in_array('offline_access', $grantTypeData->getScopes()) && null === $this->refreshTokenRepository) {
             $refreshToken = $this->refreshTokenRepository->create($grantTypeData->getClient()->getPublicId(), $grantTypeData->getParameters(), $grantTypeData->getMetadatas(), $grantTypeData->getScopes(), null, null);
             $parameters = $parameters->with('refresh_token', $refreshToken->getTokenId());
         } else {
             $refreshToken = null;
         }
         $accessToken = $this->accessTokenRepository->create($grantTypeData->getResourceOwnerId(), $grantTypeData->getClient()->getPublicId(), $parameters, $grantTypeData->getMetadatas(), $grantTypeData->getScopes(), null, null);

1618) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:157    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $parameters = $grantTypeData->getParameters();
-        if (in_array('offline_access', $grantTypeData->getScopes()) && null !== $this->refreshTokenRepository) {
+        if (in_array('offline_access', $grantTypeData->getScopes()) || null !== $this->refreshTokenRepository) {
             $refreshToken = $this->refreshTokenRepository->create($grantTypeData->getClient()->getPublicId(), $grantTypeData->getParameters(), $grantTypeData->getMetadatas(), $grantTypeData->getScopes(), null, null);
             $parameters = $parameters->with('refresh_token', $refreshToken->getTokenId());
         } else {
             $refreshToken = null;
         }
         $accessToken = $this->accessTokenRepository->create($grantTypeData->getResourceOwnerId(), $grantTypeData->getClient()->getPublicId(), $parameters, $grantTypeData->getMetadatas(), $grantTypeData->getScopes(), null, null);

1619) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:181    [M] NotIdentical

--- Original
+++ New
@@ @@
         $accessToken = $this->accessTokenRepository->create($grantTypeData->getResourceOwnerId(), $grantTypeData->getClient()->getPublicId(), $parameters, $grantTypeData->getMetadatas(), $grantTypeData->getScopes(), null, null);
-        if (null !== $refreshToken) {
+        if (null === $refreshToken) {
             $refreshToken = $refreshToken->addAccessToken($accessToken->getTokenId());
             $this->refreshTokenRepository->save($refreshToken);
         }
         $this->accessTokenRepository->save($accessToken);
         return $accessToken;
     }

1620) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:200    [M] Identical

--- Original
+++ New
@@ @@
         $resourceOwner = $this->clientRepository->find(ClientId::create($resourceOwnerId->getValue()));
-        if (null === $resourceOwner) {
+        if (null !== $resourceOwner) {
             $resourceOwner = $this->userAccountRepository->find(UserAccountId::create($resourceOwnerId->getValue()));
         }
         if (null === $resourceOwner) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unable to find the associated resource owner.');
         }
         return $resourceOwner;

1621) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpoint.php:204    [M] Identical

--- Original
+++ New
@@ @@
         }
-        if (null === $resourceOwner) {
+        if (null !== $resourceOwner) {
             throw new OAuth2Exception(400, OAuth2Exception::ERROR_INVALID_REQUEST, 'Unable to find the associated resource owner.');
         }
         return $resourceOwner;
     }
 }


1622) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpointExtensionManager.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function add(TokenEndpointExtension $accessTokenParameterExtension) : self
+    protected function add(TokenEndpointExtension $accessTokenParameterExtension) : self
     {
         $this->extensions[] = $accessTokenParameterExtension;
         return $this;
     }
     /**
      * @param Client        $client

1623) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpointExtensionManager.php:48    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
-        return call_user_func($this->callableForNextExtension(0), $client, $resourceOwner, $accessToken);
+        return call_user_func($this->callableForNextExtension(1), $client, $resourceOwner, $accessToken);
     }
     /**
      * @param int $index
      *
      * @return \Closure
      */

1624) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpointExtensionManager.php:46    [M] PublicVisibility

--- Original
+++ New
@@ @@
      */
-    public function process(Client $client, ResourceOwner $resourceOwner, AccessToken $accessToken) : array
+    protected function process(Client $client, ResourceOwner $resourceOwner, AccessToken $accessToken) : array
     {
         return call_user_func($this->callableForNextExtension(0), $client, $resourceOwner, $accessToken);
     }
     /**
      * @param int $index
      *

1625) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpointExtensionManager.php:58    [M] LogicalNot

--- Original
+++ New
@@ @@
     {
-        if (!array_key_exists($index, $this->extensions)) {
+        if (array_key_exists($index, $this->extensions)) {
             return function (Client $client, ResourceOwner $resourceOwner, AccessToken $accessToken) : array {
                 return $accessToken->getResponseData();
             };
         }
         $extension = $this->extensions[$index];
         return function (Client $client, ResourceOwner $resourceOwner, AccessToken $accessToken) use($extension, $index) : array {

1626) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpointExtensionManager.php:66    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         return function (Client $client, ResourceOwner $resourceOwner, AccessToken $accessToken) use($extension, $index) : array {
-            return $extension->process($client, $resourceOwner, $accessToken, $this->callableForNextExtension($index + 1));
+            return $extension->process($client, $resourceOwner, $accessToken, $this->callableForNextExtension($index + 0));
         };
     }
 }


1627) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenEndpoint/TokenEndpointExtensionManager.php:66    [M] Plus

--- Original
+++ New
@@ @@
         return function (Client $client, ResourceOwner $resourceOwner, AccessToken $accessToken) use($extension, $index) : array {
-            return $extension->process($client, $resourceOwner, $accessToken, $this->callableForNextExtension($index + 1));
+            return $extension->process($client, $resourceOwner, $accessToken, $this->callableForNextExtension($index - 1));
         };
     }
 }


1628) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenIntrospectionEndpoint/TokenIntrospectionEndpoint.php:74    [M] FalseValue

--- Original
+++ New
@@ @@
             }
-            $responseContent = ['active' => false];
+            $responseContent = ['active' => true];
             $responseStatucCode = 200;
         } catch (OAuth2Exception $e) {
             $responseContent = $e->getData();
             $responseStatucCode = $e->getCode();
         }
         $response = $this->responseFactory->createResponse($responseStatucCode);

1629) /mnt/c/Users/Spomky/Documents/Travaux/oauth2-framework/src/Component/Server/TokenType/TokenTypeManager.php:36    [M] FalseValue

--- Original
+++ New
@@ @@
      */
-    public function add(TokenType $tokenType, bool $default = false) : self
+    public function add(TokenType $tokenType, bool $default = true) : self
     {
         $this->tokenTypes[$tokenType->name()] = $tokenType;
         if (null === $this->defaultTokenType || true === $default) {
             $this->defaultTokenType = $tokenType->name();
         }
         return $this;